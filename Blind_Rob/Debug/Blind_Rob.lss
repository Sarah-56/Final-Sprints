
Blind_Rob.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800200  00003272  00003306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c8  0080033c  0080033c  00003442  2**0
                  ALLOC
  3 .stab         00003e04  00000000  00000000  00003444  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000028a2  00000000  00000000  00007248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  00009c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a88  00000000  00000000  00009dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eb7  00000000  00000000  0000b849  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df7  00000000  00000000  0000c700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bf  00000000  00000000  0000d658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007f2  00000000  00000000  0000d917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__vector_29>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e7       	ldi	r30, 0x72	; 114
      fc:	f2 e3       	ldi	r31, 0x32	; 50
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 33       	cpi	r26, 0x3C	; 60
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	16 e0       	ldi	r17, 0x06	; 6
     110:	ac e3       	ldi	r26, 0x3C	; 60
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 30       	cpi	r26, 0x04	; 4
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 91 18 	call	0x3122	; 0x3122 <main>
     122:	0c 94 37 19 	jmp	0x326e	; 0x326e <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <__fixunssfsi>:
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	7b 01       	movw	r14, r22
     134:	8c 01       	movw	r16, r24
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	5f e4       	ldi	r21, 0x4F	; 79
     13e:	0e 94 17 03 	call	0x62e	; 0x62e <__gesf2>
     142:	88 23       	and	r24, r24
     144:	8c f0       	brlt	.+34     	; 0x168 <__fixunssfsi+0x3e>
     146:	c8 01       	movw	r24, r16
     148:	b7 01       	movw	r22, r14
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	5f e4       	ldi	r21, 0x4F	; 79
     152:	0e 94 0d 02 	call	0x41a	; 0x41a <__subsf3>
     156:	0e 94 47 03 	call	0x68e	; 0x68e <__fixsfsi>
     15a:	9b 01       	movw	r18, r22
     15c:	ac 01       	movw	r20, r24
     15e:	20 50       	subi	r18, 0x00	; 0
     160:	30 40       	sbci	r19, 0x00	; 0
     162:	40 40       	sbci	r20, 0x00	; 0
     164:	50 48       	sbci	r21, 0x80	; 128
     166:	06 c0       	rjmp	.+12     	; 0x174 <__fixunssfsi+0x4a>
     168:	c8 01       	movw	r24, r16
     16a:	b7 01       	movw	r22, r14
     16c:	0e 94 47 03 	call	0x68e	; 0x68e <__fixsfsi>
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
     174:	b9 01       	movw	r22, r18
     176:	ca 01       	movw	r24, r20
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	ff 90       	pop	r15
     17e:	ef 90       	pop	r14
     180:	08 95       	ret

00000182 <_fpadd_parts>:
     182:	a0 e0       	ldi	r26, 0x00	; 0
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	e7 ec       	ldi	r30, 0xC7	; 199
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__prologue_saves__>
     18e:	dc 01       	movw	r26, r24
     190:	2b 01       	movw	r4, r22
     192:	fa 01       	movw	r30, r20
     194:	9c 91       	ld	r25, X
     196:	92 30       	cpi	r25, 0x02	; 2
     198:	08 f4       	brcc	.+2      	; 0x19c <_fpadd_parts+0x1a>
     19a:	39 c1       	rjmp	.+626    	; 0x40e <_fpadd_parts+0x28c>
     19c:	eb 01       	movw	r28, r22
     19e:	88 81       	ld	r24, Y
     1a0:	82 30       	cpi	r24, 0x02	; 2
     1a2:	08 f4       	brcc	.+2      	; 0x1a6 <_fpadd_parts+0x24>
     1a4:	33 c1       	rjmp	.+614    	; 0x40c <_fpadd_parts+0x28a>
     1a6:	94 30       	cpi	r25, 0x04	; 4
     1a8:	69 f4       	brne	.+26     	; 0x1c4 <_fpadd_parts+0x42>
     1aa:	84 30       	cpi	r24, 0x04	; 4
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <_fpadd_parts+0x2e>
     1ae:	2f c1       	rjmp	.+606    	; 0x40e <_fpadd_parts+0x28c>
     1b0:	11 96       	adiw	r26, 0x01	; 1
     1b2:	9c 91       	ld	r25, X
     1b4:	11 97       	sbiw	r26, 0x01	; 1
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	98 17       	cp	r25, r24
     1ba:	09 f4       	brne	.+2      	; 0x1be <_fpadd_parts+0x3c>
     1bc:	28 c1       	rjmp	.+592    	; 0x40e <_fpadd_parts+0x28c>
     1be:	ac e1       	ldi	r26, 0x1C	; 28
     1c0:	b2 e0       	ldi	r27, 0x02	; 2
     1c2:	25 c1       	rjmp	.+586    	; 0x40e <_fpadd_parts+0x28c>
     1c4:	84 30       	cpi	r24, 0x04	; 4
     1c6:	09 f4       	brne	.+2      	; 0x1ca <_fpadd_parts+0x48>
     1c8:	21 c1       	rjmp	.+578    	; 0x40c <_fpadd_parts+0x28a>
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	a9 f4       	brne	.+42     	; 0x1f8 <_fpadd_parts+0x76>
     1ce:	92 30       	cpi	r25, 0x02	; 2
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <_fpadd_parts+0x52>
     1d2:	1d c1       	rjmp	.+570    	; 0x40e <_fpadd_parts+0x28c>
     1d4:	9a 01       	movw	r18, r20
     1d6:	ad 01       	movw	r20, r26
     1d8:	88 e0       	ldi	r24, 0x08	; 8
     1da:	ea 01       	movw	r28, r20
     1dc:	09 90       	ld	r0, Y+
     1de:	ae 01       	movw	r20, r28
     1e0:	e9 01       	movw	r28, r18
     1e2:	09 92       	st	Y+, r0
     1e4:	9e 01       	movw	r18, r28
     1e6:	81 50       	subi	r24, 0x01	; 1
     1e8:	c1 f7       	brne	.-16     	; 0x1da <_fpadd_parts+0x58>
     1ea:	e2 01       	movw	r28, r4
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	11 96       	adiw	r26, 0x01	; 1
     1f0:	9c 91       	ld	r25, X
     1f2:	89 23       	and	r24, r25
     1f4:	81 83       	std	Z+1, r24	; 0x01
     1f6:	08 c1       	rjmp	.+528    	; 0x408 <_fpadd_parts+0x286>
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	09 f4       	brne	.+2      	; 0x1fe <_fpadd_parts+0x7c>
     1fc:	07 c1       	rjmp	.+526    	; 0x40c <_fpadd_parts+0x28a>
     1fe:	12 96       	adiw	r26, 0x02	; 2
     200:	2d 90       	ld	r2, X+
     202:	3c 90       	ld	r3, X
     204:	13 97       	sbiw	r26, 0x03	; 3
     206:	eb 01       	movw	r28, r22
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	9b 81       	ldd	r25, Y+3	; 0x03
     20c:	14 96       	adiw	r26, 0x04	; 4
     20e:	ad 90       	ld	r10, X+
     210:	bd 90       	ld	r11, X+
     212:	cd 90       	ld	r12, X+
     214:	dc 90       	ld	r13, X
     216:	17 97       	sbiw	r26, 0x07	; 7
     218:	ec 80       	ldd	r14, Y+4	; 0x04
     21a:	fd 80       	ldd	r15, Y+5	; 0x05
     21c:	0e 81       	ldd	r16, Y+6	; 0x06
     21e:	1f 81       	ldd	r17, Y+7	; 0x07
     220:	91 01       	movw	r18, r2
     222:	28 1b       	sub	r18, r24
     224:	39 0b       	sbc	r19, r25
     226:	b9 01       	movw	r22, r18
     228:	37 ff       	sbrs	r19, 7
     22a:	04 c0       	rjmp	.+8      	; 0x234 <_fpadd_parts+0xb2>
     22c:	66 27       	eor	r22, r22
     22e:	77 27       	eor	r23, r23
     230:	62 1b       	sub	r22, r18
     232:	73 0b       	sbc	r23, r19
     234:	60 32       	cpi	r22, 0x20	; 32
     236:	71 05       	cpc	r23, r1
     238:	0c f0       	brlt	.+2      	; 0x23c <_fpadd_parts+0xba>
     23a:	61 c0       	rjmp	.+194    	; 0x2fe <_fpadd_parts+0x17c>
     23c:	12 16       	cp	r1, r18
     23e:	13 06       	cpc	r1, r19
     240:	6c f5       	brge	.+90     	; 0x29c <_fpadd_parts+0x11a>
     242:	37 01       	movw	r6, r14
     244:	48 01       	movw	r8, r16
     246:	06 2e       	mov	r0, r22
     248:	04 c0       	rjmp	.+8      	; 0x252 <_fpadd_parts+0xd0>
     24a:	96 94       	lsr	r9
     24c:	87 94       	ror	r8
     24e:	77 94       	ror	r7
     250:	67 94       	ror	r6
     252:	0a 94       	dec	r0
     254:	d2 f7       	brpl	.-12     	; 0x24a <_fpadd_parts+0xc8>
     256:	21 e0       	ldi	r18, 0x01	; 1
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	04 c0       	rjmp	.+8      	; 0x268 <_fpadd_parts+0xe6>
     260:	22 0f       	add	r18, r18
     262:	33 1f       	adc	r19, r19
     264:	44 1f       	adc	r20, r20
     266:	55 1f       	adc	r21, r21
     268:	6a 95       	dec	r22
     26a:	d2 f7       	brpl	.-12     	; 0x260 <_fpadd_parts+0xde>
     26c:	21 50       	subi	r18, 0x01	; 1
     26e:	30 40       	sbci	r19, 0x00	; 0
     270:	40 40       	sbci	r20, 0x00	; 0
     272:	50 40       	sbci	r21, 0x00	; 0
     274:	2e 21       	and	r18, r14
     276:	3f 21       	and	r19, r15
     278:	40 23       	and	r20, r16
     27a:	51 23       	and	r21, r17
     27c:	21 15       	cp	r18, r1
     27e:	31 05       	cpc	r19, r1
     280:	41 05       	cpc	r20, r1
     282:	51 05       	cpc	r21, r1
     284:	21 f0       	breq	.+8      	; 0x28e <_fpadd_parts+0x10c>
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	79 01       	movw	r14, r18
     290:	8a 01       	movw	r16, r20
     292:	e6 28       	or	r14, r6
     294:	f7 28       	or	r15, r7
     296:	08 29       	or	r16, r8
     298:	19 29       	or	r17, r9
     29a:	3c c0       	rjmp	.+120    	; 0x314 <_fpadd_parts+0x192>
     29c:	23 2b       	or	r18, r19
     29e:	d1 f1       	breq	.+116    	; 0x314 <_fpadd_parts+0x192>
     2a0:	26 0e       	add	r2, r22
     2a2:	37 1e       	adc	r3, r23
     2a4:	35 01       	movw	r6, r10
     2a6:	46 01       	movw	r8, r12
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0x132>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0x12a>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0x148>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0x140>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2a 21       	and	r18, r10
     2d8:	3b 21       	and	r19, r11
     2da:	4c 21       	and	r20, r12
     2dc:	5d 21       	and	r21, r13
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x16e>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	59 01       	movw	r10, r18
     2f2:	6a 01       	movw	r12, r20
     2f4:	a6 28       	or	r10, r6
     2f6:	b7 28       	or	r11, r7
     2f8:	c8 28       	or	r12, r8
     2fa:	d9 28       	or	r13, r9
     2fc:	0b c0       	rjmp	.+22     	; 0x314 <_fpadd_parts+0x192>
     2fe:	82 15       	cp	r24, r2
     300:	93 05       	cpc	r25, r3
     302:	2c f0       	brlt	.+10     	; 0x30e <_fpadd_parts+0x18c>
     304:	1c 01       	movw	r2, r24
     306:	aa 24       	eor	r10, r10
     308:	bb 24       	eor	r11, r11
     30a:	65 01       	movw	r12, r10
     30c:	03 c0       	rjmp	.+6      	; 0x314 <_fpadd_parts+0x192>
     30e:	ee 24       	eor	r14, r14
     310:	ff 24       	eor	r15, r15
     312:	87 01       	movw	r16, r14
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	9c 91       	ld	r25, X
     318:	d2 01       	movw	r26, r4
     31a:	11 96       	adiw	r26, 0x01	; 1
     31c:	8c 91       	ld	r24, X
     31e:	98 17       	cp	r25, r24
     320:	09 f4       	brne	.+2      	; 0x324 <_fpadd_parts+0x1a2>
     322:	45 c0       	rjmp	.+138    	; 0x3ae <_fpadd_parts+0x22c>
     324:	99 23       	and	r25, r25
     326:	39 f0       	breq	.+14     	; 0x336 <_fpadd_parts+0x1b4>
     328:	a8 01       	movw	r20, r16
     32a:	97 01       	movw	r18, r14
     32c:	2a 19       	sub	r18, r10
     32e:	3b 09       	sbc	r19, r11
     330:	4c 09       	sbc	r20, r12
     332:	5d 09       	sbc	r21, r13
     334:	06 c0       	rjmp	.+12     	; 0x342 <_fpadd_parts+0x1c0>
     336:	a6 01       	movw	r20, r12
     338:	95 01       	movw	r18, r10
     33a:	2e 19       	sub	r18, r14
     33c:	3f 09       	sbc	r19, r15
     33e:	40 0b       	sbc	r20, r16
     340:	51 0b       	sbc	r21, r17
     342:	57 fd       	sbrc	r21, 7
     344:	08 c0       	rjmp	.+16     	; 0x356 <_fpadd_parts+0x1d4>
     346:	11 82       	std	Z+1, r1	; 0x01
     348:	33 82       	std	Z+3, r3	; 0x03
     34a:	22 82       	std	Z+2, r2	; 0x02
     34c:	24 83       	std	Z+4, r18	; 0x04
     34e:	35 83       	std	Z+5, r19	; 0x05
     350:	46 83       	std	Z+6, r20	; 0x06
     352:	57 83       	std	Z+7, r21	; 0x07
     354:	1d c0       	rjmp	.+58     	; 0x390 <_fpadd_parts+0x20e>
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	81 83       	std	Z+1, r24	; 0x01
     35a:	33 82       	std	Z+3, r3	; 0x03
     35c:	22 82       	std	Z+2, r2	; 0x02
     35e:	88 27       	eor	r24, r24
     360:	99 27       	eor	r25, r25
     362:	dc 01       	movw	r26, r24
     364:	82 1b       	sub	r24, r18
     366:	93 0b       	sbc	r25, r19
     368:	a4 0b       	sbc	r26, r20
     36a:	b5 0b       	sbc	r27, r21
     36c:	84 83       	std	Z+4, r24	; 0x04
     36e:	95 83       	std	Z+5, r25	; 0x05
     370:	a6 83       	std	Z+6, r26	; 0x06
     372:	b7 83       	std	Z+7, r27	; 0x07
     374:	0d c0       	rjmp	.+26     	; 0x390 <_fpadd_parts+0x20e>
     376:	22 0f       	add	r18, r18
     378:	33 1f       	adc	r19, r19
     37a:	44 1f       	adc	r20, r20
     37c:	55 1f       	adc	r21, r21
     37e:	24 83       	std	Z+4, r18	; 0x04
     380:	35 83       	std	Z+5, r19	; 0x05
     382:	46 83       	std	Z+6, r20	; 0x06
     384:	57 83       	std	Z+7, r21	; 0x07
     386:	82 81       	ldd	r24, Z+2	; 0x02
     388:	93 81       	ldd	r25, Z+3	; 0x03
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	93 83       	std	Z+3, r25	; 0x03
     38e:	82 83       	std	Z+2, r24	; 0x02
     390:	24 81       	ldd	r18, Z+4	; 0x04
     392:	35 81       	ldd	r19, Z+5	; 0x05
     394:	46 81       	ldd	r20, Z+6	; 0x06
     396:	57 81       	ldd	r21, Z+7	; 0x07
     398:	da 01       	movw	r26, r20
     39a:	c9 01       	movw	r24, r18
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	a1 09       	sbc	r26, r1
     3a0:	b1 09       	sbc	r27, r1
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	9f 4f       	sbci	r25, 0xFF	; 255
     3a6:	af 4f       	sbci	r26, 0xFF	; 255
     3a8:	bf 43       	sbci	r27, 0x3F	; 63
     3aa:	28 f3       	brcs	.-54     	; 0x376 <_fpadd_parts+0x1f4>
     3ac:	0b c0       	rjmp	.+22     	; 0x3c4 <_fpadd_parts+0x242>
     3ae:	91 83       	std	Z+1, r25	; 0x01
     3b0:	33 82       	std	Z+3, r3	; 0x03
     3b2:	22 82       	std	Z+2, r2	; 0x02
     3b4:	ea 0c       	add	r14, r10
     3b6:	fb 1c       	adc	r15, r11
     3b8:	0c 1d       	adc	r16, r12
     3ba:	1d 1d       	adc	r17, r13
     3bc:	e4 82       	std	Z+4, r14	; 0x04
     3be:	f5 82       	std	Z+5, r15	; 0x05
     3c0:	06 83       	std	Z+6, r16	; 0x06
     3c2:	17 83       	std	Z+7, r17	; 0x07
     3c4:	83 e0       	ldi	r24, 0x03	; 3
     3c6:	80 83       	st	Z, r24
     3c8:	24 81       	ldd	r18, Z+4	; 0x04
     3ca:	35 81       	ldd	r19, Z+5	; 0x05
     3cc:	46 81       	ldd	r20, Z+6	; 0x06
     3ce:	57 81       	ldd	r21, Z+7	; 0x07
     3d0:	57 ff       	sbrs	r21, 7
     3d2:	1a c0       	rjmp	.+52     	; 0x408 <_fpadd_parts+0x286>
     3d4:	c9 01       	movw	r24, r18
     3d6:	aa 27       	eor	r26, r26
     3d8:	97 fd       	sbrc	r25, 7
     3da:	a0 95       	com	r26
     3dc:	ba 2f       	mov	r27, r26
     3de:	81 70       	andi	r24, 0x01	; 1
     3e0:	90 70       	andi	r25, 0x00	; 0
     3e2:	a0 70       	andi	r26, 0x00	; 0
     3e4:	b0 70       	andi	r27, 0x00	; 0
     3e6:	56 95       	lsr	r21
     3e8:	47 95       	ror	r20
     3ea:	37 95       	ror	r19
     3ec:	27 95       	ror	r18
     3ee:	82 2b       	or	r24, r18
     3f0:	93 2b       	or	r25, r19
     3f2:	a4 2b       	or	r26, r20
     3f4:	b5 2b       	or	r27, r21
     3f6:	84 83       	std	Z+4, r24	; 0x04
     3f8:	95 83       	std	Z+5, r25	; 0x05
     3fa:	a6 83       	std	Z+6, r26	; 0x06
     3fc:	b7 83       	std	Z+7, r27	; 0x07
     3fe:	82 81       	ldd	r24, Z+2	; 0x02
     400:	93 81       	ldd	r25, Z+3	; 0x03
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	93 83       	std	Z+3, r25	; 0x03
     406:	82 83       	std	Z+2, r24	; 0x02
     408:	df 01       	movw	r26, r30
     40a:	01 c0       	rjmp	.+2      	; 0x40e <_fpadd_parts+0x28c>
     40c:	d2 01       	movw	r26, r4
     40e:	cd 01       	movw	r24, r26
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	e2 e1       	ldi	r30, 0x12	; 18
     416:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__epilogue_restores__>

0000041a <__subsf3>:
     41a:	a0 e2       	ldi	r26, 0x20	; 32
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	e3 e1       	ldi	r30, 0x13	; 19
     420:	f2 e0       	ldi	r31, 0x02	; 2
     422:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__+0x18>
     426:	69 83       	std	Y+1, r22	; 0x01
     428:	7a 83       	std	Y+2, r23	; 0x02
     42a:	8b 83       	std	Y+3, r24	; 0x03
     42c:	9c 83       	std	Y+4, r25	; 0x04
     42e:	2d 83       	std	Y+5, r18	; 0x05
     430:	3e 83       	std	Y+6, r19	; 0x06
     432:	4f 83       	std	Y+7, r20	; 0x07
     434:	58 87       	std	Y+8, r21	; 0x08
     436:	e9 e0       	ldi	r30, 0x09	; 9
     438:	ee 2e       	mov	r14, r30
     43a:	f1 2c       	mov	r15, r1
     43c:	ec 0e       	add	r14, r28
     43e:	fd 1e       	adc	r15, r29
     440:	ce 01       	movw	r24, r28
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	b7 01       	movw	r22, r14
     446:	0e 94 38 05 	call	0xa70	; 0xa70 <__unpack_f>
     44a:	8e 01       	movw	r16, r28
     44c:	0f 5e       	subi	r16, 0xEF	; 239
     44e:	1f 4f       	sbci	r17, 0xFF	; 255
     450:	ce 01       	movw	r24, r28
     452:	05 96       	adiw	r24, 0x05	; 5
     454:	b8 01       	movw	r22, r16
     456:	0e 94 38 05 	call	0xa70	; 0xa70 <__unpack_f>
     45a:	8a 89       	ldd	r24, Y+18	; 0x12
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	89 27       	eor	r24, r25
     460:	8a 8b       	std	Y+18, r24	; 0x12
     462:	c7 01       	movw	r24, r14
     464:	b8 01       	movw	r22, r16
     466:	ae 01       	movw	r20, r28
     468:	47 5e       	subi	r20, 0xE7	; 231
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	0e 94 c1 00 	call	0x182	; 0x182 <_fpadd_parts>
     470:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__pack_f>
     474:	a0 96       	adiw	r28, 0x20	; 32
     476:	e6 e0       	ldi	r30, 0x06	; 6
     478:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__+0x18>

0000047c <__addsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	f9 e0       	ldi	r31, 0x09	; 9
     49a:	ef 2e       	mov	r14, r31
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 38 05 	call	0xa70	; 0xa70 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 38 05 	call	0xa70	; 0xa70 <__unpack_f>
     4bc:	c7 01       	movw	r24, r14
     4be:	b8 01       	movw	r22, r16
     4c0:	ae 01       	movw	r20, r28
     4c2:	47 5e       	subi	r20, 0xE7	; 231
     4c4:	5f 4f       	sbci	r21, 0xFF	; 255
     4c6:	0e 94 c1 00 	call	0x182	; 0x182 <_fpadd_parts>
     4ca:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__pack_f>
     4ce:	a0 96       	adiw	r28, 0x20	; 32
     4d0:	e6 e0       	ldi	r30, 0x06	; 6
     4d2:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__+0x18>

000004d6 <__divsf3>:
     4d6:	a8 e1       	ldi	r26, 0x18	; 24
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	e1 e7       	ldi	r30, 0x71	; 113
     4dc:	f2 e0       	ldi	r31, 0x02	; 2
     4de:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x10>
     4e2:	69 83       	std	Y+1, r22	; 0x01
     4e4:	7a 83       	std	Y+2, r23	; 0x02
     4e6:	8b 83       	std	Y+3, r24	; 0x03
     4e8:	9c 83       	std	Y+4, r25	; 0x04
     4ea:	2d 83       	std	Y+5, r18	; 0x05
     4ec:	3e 83       	std	Y+6, r19	; 0x06
     4ee:	4f 83       	std	Y+7, r20	; 0x07
     4f0:	58 87       	std	Y+8, r21	; 0x08
     4f2:	b9 e0       	ldi	r27, 0x09	; 9
     4f4:	eb 2e       	mov	r14, r27
     4f6:	f1 2c       	mov	r15, r1
     4f8:	ec 0e       	add	r14, r28
     4fa:	fd 1e       	adc	r15, r29
     4fc:	ce 01       	movw	r24, r28
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	b7 01       	movw	r22, r14
     502:	0e 94 38 05 	call	0xa70	; 0xa70 <__unpack_f>
     506:	8e 01       	movw	r16, r28
     508:	0f 5e       	subi	r16, 0xEF	; 239
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	ce 01       	movw	r24, r28
     50e:	05 96       	adiw	r24, 0x05	; 5
     510:	b8 01       	movw	r22, r16
     512:	0e 94 38 05 	call	0xa70	; 0xa70 <__unpack_f>
     516:	29 85       	ldd	r18, Y+9	; 0x09
     518:	22 30       	cpi	r18, 0x02	; 2
     51a:	08 f4       	brcc	.+2      	; 0x51e <__divsf3+0x48>
     51c:	7e c0       	rjmp	.+252    	; 0x61a <__divsf3+0x144>
     51e:	39 89       	ldd	r19, Y+17	; 0x11
     520:	32 30       	cpi	r19, 0x02	; 2
     522:	10 f4       	brcc	.+4      	; 0x528 <__divsf3+0x52>
     524:	b8 01       	movw	r22, r16
     526:	7c c0       	rjmp	.+248    	; 0x620 <__divsf3+0x14a>
     528:	8a 85       	ldd	r24, Y+10	; 0x0a
     52a:	9a 89       	ldd	r25, Y+18	; 0x12
     52c:	89 27       	eor	r24, r25
     52e:	8a 87       	std	Y+10, r24	; 0x0a
     530:	24 30       	cpi	r18, 0x04	; 4
     532:	11 f0       	breq	.+4      	; 0x538 <__divsf3+0x62>
     534:	22 30       	cpi	r18, 0x02	; 2
     536:	31 f4       	brne	.+12     	; 0x544 <__divsf3+0x6e>
     538:	23 17       	cp	r18, r19
     53a:	09 f0       	breq	.+2      	; 0x53e <__divsf3+0x68>
     53c:	6e c0       	rjmp	.+220    	; 0x61a <__divsf3+0x144>
     53e:	6c e1       	ldi	r22, 0x1C	; 28
     540:	72 e0       	ldi	r23, 0x02	; 2
     542:	6e c0       	rjmp	.+220    	; 0x620 <__divsf3+0x14a>
     544:	34 30       	cpi	r19, 0x04	; 4
     546:	39 f4       	brne	.+14     	; 0x556 <__divsf3+0x80>
     548:	1d 86       	std	Y+13, r1	; 0x0d
     54a:	1e 86       	std	Y+14, r1	; 0x0e
     54c:	1f 86       	std	Y+15, r1	; 0x0f
     54e:	18 8a       	std	Y+16, r1	; 0x10
     550:	1c 86       	std	Y+12, r1	; 0x0c
     552:	1b 86       	std	Y+11, r1	; 0x0b
     554:	04 c0       	rjmp	.+8      	; 0x55e <__divsf3+0x88>
     556:	32 30       	cpi	r19, 0x02	; 2
     558:	21 f4       	brne	.+8      	; 0x562 <__divsf3+0x8c>
     55a:	84 e0       	ldi	r24, 0x04	; 4
     55c:	89 87       	std	Y+9, r24	; 0x09
     55e:	b7 01       	movw	r22, r14
     560:	5f c0       	rjmp	.+190    	; 0x620 <__divsf3+0x14a>
     562:	2b 85       	ldd	r18, Y+11	; 0x0b
     564:	3c 85       	ldd	r19, Y+12	; 0x0c
     566:	8b 89       	ldd	r24, Y+19	; 0x13
     568:	9c 89       	ldd	r25, Y+20	; 0x14
     56a:	28 1b       	sub	r18, r24
     56c:	39 0b       	sbc	r19, r25
     56e:	3c 87       	std	Y+12, r19	; 0x0c
     570:	2b 87       	std	Y+11, r18	; 0x0b
     572:	ed 84       	ldd	r14, Y+13	; 0x0d
     574:	fe 84       	ldd	r15, Y+14	; 0x0e
     576:	0f 85       	ldd	r16, Y+15	; 0x0f
     578:	18 89       	ldd	r17, Y+16	; 0x10
     57a:	ad 88       	ldd	r10, Y+21	; 0x15
     57c:	be 88       	ldd	r11, Y+22	; 0x16
     57e:	cf 88       	ldd	r12, Y+23	; 0x17
     580:	d8 8c       	ldd	r13, Y+24	; 0x18
     582:	ea 14       	cp	r14, r10
     584:	fb 04       	cpc	r15, r11
     586:	0c 05       	cpc	r16, r12
     588:	1d 05       	cpc	r17, r13
     58a:	40 f4       	brcc	.+16     	; 0x59c <__divsf3+0xc6>
     58c:	ee 0c       	add	r14, r14
     58e:	ff 1c       	adc	r15, r15
     590:	00 1f       	adc	r16, r16
     592:	11 1f       	adc	r17, r17
     594:	21 50       	subi	r18, 0x01	; 1
     596:	30 40       	sbci	r19, 0x00	; 0
     598:	3c 87       	std	Y+12, r19	; 0x0c
     59a:	2b 87       	std	Y+11, r18	; 0x0b
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e4       	ldi	r27, 0x40	; 64
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	ea 14       	cp	r14, r10
     5b2:	fb 04       	cpc	r15, r11
     5b4:	0c 05       	cpc	r16, r12
     5b6:	1d 05       	cpc	r17, r13
     5b8:	40 f0       	brcs	.+16     	; 0x5ca <__divsf3+0xf4>
     5ba:	28 2b       	or	r18, r24
     5bc:	39 2b       	or	r19, r25
     5be:	4a 2b       	or	r20, r26
     5c0:	5b 2b       	or	r21, r27
     5c2:	ea 18       	sub	r14, r10
     5c4:	fb 08       	sbc	r15, r11
     5c6:	0c 09       	sbc	r16, r12
     5c8:	1d 09       	sbc	r17, r13
     5ca:	b6 95       	lsr	r27
     5cc:	a7 95       	ror	r26
     5ce:	97 95       	ror	r25
     5d0:	87 95       	ror	r24
     5d2:	ee 0c       	add	r14, r14
     5d4:	ff 1c       	adc	r15, r15
     5d6:	00 1f       	adc	r16, r16
     5d8:	11 1f       	adc	r17, r17
     5da:	6f 5f       	subi	r22, 0xFF	; 255
     5dc:	7f 4f       	sbci	r23, 0xFF	; 255
     5de:	6f 31       	cpi	r22, 0x1F	; 31
     5e0:	71 05       	cpc	r23, r1
     5e2:	31 f7       	brne	.-52     	; 0x5b0 <__divsf3+0xda>
     5e4:	da 01       	movw	r26, r20
     5e6:	c9 01       	movw	r24, r18
     5e8:	8f 77       	andi	r24, 0x7F	; 127
     5ea:	90 70       	andi	r25, 0x00	; 0
     5ec:	a0 70       	andi	r26, 0x00	; 0
     5ee:	b0 70       	andi	r27, 0x00	; 0
     5f0:	80 34       	cpi	r24, 0x40	; 64
     5f2:	91 05       	cpc	r25, r1
     5f4:	a1 05       	cpc	r26, r1
     5f6:	b1 05       	cpc	r27, r1
     5f8:	61 f4       	brne	.+24     	; 0x612 <__divsf3+0x13c>
     5fa:	27 fd       	sbrc	r18, 7
     5fc:	0a c0       	rjmp	.+20     	; 0x612 <__divsf3+0x13c>
     5fe:	e1 14       	cp	r14, r1
     600:	f1 04       	cpc	r15, r1
     602:	01 05       	cpc	r16, r1
     604:	11 05       	cpc	r17, r1
     606:	29 f0       	breq	.+10     	; 0x612 <__divsf3+0x13c>
     608:	20 5c       	subi	r18, 0xC0	; 192
     60a:	3f 4f       	sbci	r19, 0xFF	; 255
     60c:	4f 4f       	sbci	r20, 0xFF	; 255
     60e:	5f 4f       	sbci	r21, 0xFF	; 255
     610:	20 78       	andi	r18, 0x80	; 128
     612:	2d 87       	std	Y+13, r18	; 0x0d
     614:	3e 87       	std	Y+14, r19	; 0x0e
     616:	4f 87       	std	Y+15, r20	; 0x0f
     618:	58 8b       	std	Y+16, r21	; 0x10
     61a:	be 01       	movw	r22, r28
     61c:	67 5f       	subi	r22, 0xF7	; 247
     61e:	7f 4f       	sbci	r23, 0xFF	; 255
     620:	cb 01       	movw	r24, r22
     622:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__pack_f>
     626:	68 96       	adiw	r28, 0x18	; 24
     628:	ea e0       	ldi	r30, 0x0A	; 10
     62a:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x10>

0000062e <__gesf2>:
     62e:	a8 e1       	ldi	r26, 0x18	; 24
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	ed e1       	ldi	r30, 0x1D	; 29
     634:	f3 e0       	ldi	r31, 0x03	; 3
     636:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__+0x18>
     63a:	69 83       	std	Y+1, r22	; 0x01
     63c:	7a 83       	std	Y+2, r23	; 0x02
     63e:	8b 83       	std	Y+3, r24	; 0x03
     640:	9c 83       	std	Y+4, r25	; 0x04
     642:	2d 83       	std	Y+5, r18	; 0x05
     644:	3e 83       	std	Y+6, r19	; 0x06
     646:	4f 83       	std	Y+7, r20	; 0x07
     648:	58 87       	std	Y+8, r21	; 0x08
     64a:	89 e0       	ldi	r24, 0x09	; 9
     64c:	e8 2e       	mov	r14, r24
     64e:	f1 2c       	mov	r15, r1
     650:	ec 0e       	add	r14, r28
     652:	fd 1e       	adc	r15, r29
     654:	ce 01       	movw	r24, r28
     656:	01 96       	adiw	r24, 0x01	; 1
     658:	b7 01       	movw	r22, r14
     65a:	0e 94 38 05 	call	0xa70	; 0xa70 <__unpack_f>
     65e:	8e 01       	movw	r16, r28
     660:	0f 5e       	subi	r16, 0xEF	; 239
     662:	1f 4f       	sbci	r17, 0xFF	; 255
     664:	ce 01       	movw	r24, r28
     666:	05 96       	adiw	r24, 0x05	; 5
     668:	b8 01       	movw	r22, r16
     66a:	0e 94 38 05 	call	0xa70	; 0xa70 <__unpack_f>
     66e:	89 85       	ldd	r24, Y+9	; 0x09
     670:	82 30       	cpi	r24, 0x02	; 2
     672:	40 f0       	brcs	.+16     	; 0x684 <__gesf2+0x56>
     674:	89 89       	ldd	r24, Y+17	; 0x11
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	28 f0       	brcs	.+10     	; 0x684 <__gesf2+0x56>
     67a:	c7 01       	movw	r24, r14
     67c:	b8 01       	movw	r22, r16
     67e:	0e 94 b0 05 	call	0xb60	; 0xb60 <__fpcmp_parts_f>
     682:	01 c0       	rjmp	.+2      	; 0x686 <__gesf2+0x58>
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	68 96       	adiw	r28, 0x18	; 24
     688:	e6 e0       	ldi	r30, 0x06	; 6
     68a:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__+0x18>

0000068e <__fixsfsi>:
     68e:	ac e0       	ldi	r26, 0x0C	; 12
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	ed e4       	ldi	r30, 0x4D	; 77
     694:	f3 e0       	ldi	r31, 0x03	; 3
     696:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__prologue_saves__+0x20>
     69a:	69 83       	std	Y+1, r22	; 0x01
     69c:	7a 83       	std	Y+2, r23	; 0x02
     69e:	8b 83       	std	Y+3, r24	; 0x03
     6a0:	9c 83       	std	Y+4, r25	; 0x04
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	be 01       	movw	r22, r28
     6a8:	6b 5f       	subi	r22, 0xFB	; 251
     6aa:	7f 4f       	sbci	r23, 0xFF	; 255
     6ac:	0e 94 38 05 	call	0xa70	; 0xa70 <__unpack_f>
     6b0:	8d 81       	ldd	r24, Y+5	; 0x05
     6b2:	82 30       	cpi	r24, 0x02	; 2
     6b4:	61 f1       	breq	.+88     	; 0x70e <__fixsfsi+0x80>
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	50 f1       	brcs	.+84     	; 0x70e <__fixsfsi+0x80>
     6ba:	84 30       	cpi	r24, 0x04	; 4
     6bc:	21 f4       	brne	.+8      	; 0x6c6 <__fixsfsi+0x38>
     6be:	8e 81       	ldd	r24, Y+6	; 0x06
     6c0:	88 23       	and	r24, r24
     6c2:	51 f1       	breq	.+84     	; 0x718 <__fixsfsi+0x8a>
     6c4:	2e c0       	rjmp	.+92     	; 0x722 <__fixsfsi+0x94>
     6c6:	2f 81       	ldd	r18, Y+7	; 0x07
     6c8:	38 85       	ldd	r19, Y+8	; 0x08
     6ca:	37 fd       	sbrc	r19, 7
     6cc:	20 c0       	rjmp	.+64     	; 0x70e <__fixsfsi+0x80>
     6ce:	6e 81       	ldd	r22, Y+6	; 0x06
     6d0:	2f 31       	cpi	r18, 0x1F	; 31
     6d2:	31 05       	cpc	r19, r1
     6d4:	1c f0       	brlt	.+6      	; 0x6dc <__fixsfsi+0x4e>
     6d6:	66 23       	and	r22, r22
     6d8:	f9 f0       	breq	.+62     	; 0x718 <__fixsfsi+0x8a>
     6da:	23 c0       	rjmp	.+70     	; 0x722 <__fixsfsi+0x94>
     6dc:	8e e1       	ldi	r24, 0x1E	; 30
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	82 1b       	sub	r24, r18
     6e2:	93 0b       	sbc	r25, r19
     6e4:	29 85       	ldd	r18, Y+9	; 0x09
     6e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     6e8:	4b 85       	ldd	r20, Y+11	; 0x0b
     6ea:	5c 85       	ldd	r21, Y+12	; 0x0c
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__fixsfsi+0x68>
     6ee:	56 95       	lsr	r21
     6f0:	47 95       	ror	r20
     6f2:	37 95       	ror	r19
     6f4:	27 95       	ror	r18
     6f6:	8a 95       	dec	r24
     6f8:	d2 f7       	brpl	.-12     	; 0x6ee <__fixsfsi+0x60>
     6fa:	66 23       	and	r22, r22
     6fc:	b1 f0       	breq	.+44     	; 0x72a <__fixsfsi+0x9c>
     6fe:	50 95       	com	r21
     700:	40 95       	com	r20
     702:	30 95       	com	r19
     704:	21 95       	neg	r18
     706:	3f 4f       	sbci	r19, 0xFF	; 255
     708:	4f 4f       	sbci	r20, 0xFF	; 255
     70a:	5f 4f       	sbci	r21, 0xFF	; 255
     70c:	0e c0       	rjmp	.+28     	; 0x72a <__fixsfsi+0x9c>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	09 c0       	rjmp	.+18     	; 0x72a <__fixsfsi+0x9c>
     718:	2f ef       	ldi	r18, 0xFF	; 255
     71a:	3f ef       	ldi	r19, 0xFF	; 255
     71c:	4f ef       	ldi	r20, 0xFF	; 255
     71e:	5f e7       	ldi	r21, 0x7F	; 127
     720:	04 c0       	rjmp	.+8      	; 0x72a <__fixsfsi+0x9c>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	50 e8       	ldi	r21, 0x80	; 128
     72a:	b9 01       	movw	r22, r18
     72c:	ca 01       	movw	r24, r20
     72e:	2c 96       	adiw	r28, 0x0c	; 12
     730:	e2 e0       	ldi	r30, 0x02	; 2
     732:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__epilogue_restores__+0x20>

00000736 <__floatunsisf>:
     736:	a8 e0       	ldi	r26, 0x08	; 8
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e1 ea       	ldi	r30, 0xA1	; 161
     73c:	f3 e0       	ldi	r31, 0x03	; 3
     73e:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x10>
     742:	7b 01       	movw	r14, r22
     744:	8c 01       	movw	r16, r24
     746:	61 15       	cp	r22, r1
     748:	71 05       	cpc	r23, r1
     74a:	81 05       	cpc	r24, r1
     74c:	91 05       	cpc	r25, r1
     74e:	19 f4       	brne	.+6      	; 0x756 <__floatunsisf+0x20>
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	60 c0       	rjmp	.+192    	; 0x816 <__floatunsisf+0xe0>
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	8e e1       	ldi	r24, 0x1E	; 30
     75c:	c8 2e       	mov	r12, r24
     75e:	d1 2c       	mov	r13, r1
     760:	dc 82       	std	Y+4, r13	; 0x04
     762:	cb 82       	std	Y+3, r12	; 0x03
     764:	ed 82       	std	Y+5, r14	; 0x05
     766:	fe 82       	std	Y+6, r15	; 0x06
     768:	0f 83       	std	Y+7, r16	; 0x07
     76a:	18 87       	std	Y+8, r17	; 0x08
     76c:	c8 01       	movw	r24, r16
     76e:	b7 01       	movw	r22, r14
     770:	0e 94 14 04 	call	0x828	; 0x828 <__clzsi2>
     774:	fc 01       	movw	r30, r24
     776:	31 97       	sbiw	r30, 0x01	; 1
     778:	f7 ff       	sbrs	r31, 7
     77a:	3b c0       	rjmp	.+118    	; 0x7f2 <__floatunsisf+0xbc>
     77c:	22 27       	eor	r18, r18
     77e:	33 27       	eor	r19, r19
     780:	2e 1b       	sub	r18, r30
     782:	3f 0b       	sbc	r19, r31
     784:	57 01       	movw	r10, r14
     786:	68 01       	movw	r12, r16
     788:	02 2e       	mov	r0, r18
     78a:	04 c0       	rjmp	.+8      	; 0x794 <__floatunsisf+0x5e>
     78c:	d6 94       	lsr	r13
     78e:	c7 94       	ror	r12
     790:	b7 94       	ror	r11
     792:	a7 94       	ror	r10
     794:	0a 94       	dec	r0
     796:	d2 f7       	brpl	.-12     	; 0x78c <__floatunsisf+0x56>
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	a0 e0       	ldi	r26, 0x00	; 0
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <__floatunsisf+0x7c>
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	aa 1f       	adc	r26, r26
     7b0:	bb 1f       	adc	r27, r27
     7b2:	2a 95       	dec	r18
     7b4:	d2 f7       	brpl	.-12     	; 0x7aa <__floatunsisf+0x74>
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	a1 09       	sbc	r26, r1
     7ba:	b1 09       	sbc	r27, r1
     7bc:	8e 21       	and	r24, r14
     7be:	9f 21       	and	r25, r15
     7c0:	a0 23       	and	r26, r16
     7c2:	b1 23       	and	r27, r17
     7c4:	00 97       	sbiw	r24, 0x00	; 0
     7c6:	a1 05       	cpc	r26, r1
     7c8:	b1 05       	cpc	r27, r1
     7ca:	21 f0       	breq	.+8      	; 0x7d4 <__floatunsisf+0x9e>
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	4a 29       	or	r20, r10
     7d6:	5b 29       	or	r21, r11
     7d8:	6c 29       	or	r22, r12
     7da:	7d 29       	or	r23, r13
     7dc:	4d 83       	std	Y+5, r20	; 0x05
     7de:	5e 83       	std	Y+6, r21	; 0x06
     7e0:	6f 83       	std	Y+7, r22	; 0x07
     7e2:	78 87       	std	Y+8, r23	; 0x08
     7e4:	8e e1       	ldi	r24, 0x1E	; 30
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	8e 1b       	sub	r24, r30
     7ea:	9f 0b       	sbc	r25, r31
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	8b 83       	std	Y+3, r24	; 0x03
     7f0:	12 c0       	rjmp	.+36     	; 0x816 <__floatunsisf+0xe0>
     7f2:	30 97       	sbiw	r30, 0x00	; 0
     7f4:	81 f0       	breq	.+32     	; 0x816 <__floatunsisf+0xe0>
     7f6:	0e 2e       	mov	r0, r30
     7f8:	04 c0       	rjmp	.+8      	; 0x802 <__floatunsisf+0xcc>
     7fa:	ee 0c       	add	r14, r14
     7fc:	ff 1c       	adc	r15, r15
     7fe:	00 1f       	adc	r16, r16
     800:	11 1f       	adc	r17, r17
     802:	0a 94       	dec	r0
     804:	d2 f7       	brpl	.-12     	; 0x7fa <__floatunsisf+0xc4>
     806:	ed 82       	std	Y+5, r14	; 0x05
     808:	fe 82       	std	Y+6, r15	; 0x06
     80a:	0f 83       	std	Y+7, r16	; 0x07
     80c:	18 87       	std	Y+8, r17	; 0x08
     80e:	ce 1a       	sub	r12, r30
     810:	df 0a       	sbc	r13, r31
     812:	dc 82       	std	Y+4, r13	; 0x04
     814:	cb 82       	std	Y+3, r12	; 0x03
     816:	1a 82       	std	Y+2, r1	; 0x02
     818:	ce 01       	movw	r24, r28
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__pack_f>
     820:	28 96       	adiw	r28, 0x08	; 8
     822:	ea e0       	ldi	r30, 0x0A	; 10
     824:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x10>

00000828 <__clzsi2>:
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	7b 01       	movw	r14, r22
     832:	8c 01       	movw	r16, r24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	e8 16       	cp	r14, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	f8 06       	cpc	r15, r24
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	08 07       	cpc	r16, r24
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	18 07       	cpc	r17, r24
     844:	88 f4       	brcc	.+34     	; 0x868 <__clzsi2+0x40>
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	e8 16       	cp	r14, r24
     84a:	f1 04       	cpc	r15, r1
     84c:	01 05       	cpc	r16, r1
     84e:	11 05       	cpc	r17, r1
     850:	31 f0       	breq	.+12     	; 0x85e <__clzsi2+0x36>
     852:	28 f0       	brcs	.+10     	; 0x85e <__clzsi2+0x36>
     854:	88 e0       	ldi	r24, 0x08	; 8
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	17 c0       	rjmp	.+46     	; 0x88c <__clzsi2+0x64>
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	a0 e0       	ldi	r26, 0x00	; 0
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	12 c0       	rjmp	.+36     	; 0x88c <__clzsi2+0x64>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	e8 16       	cp	r14, r24
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	f8 06       	cpc	r15, r24
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	08 07       	cpc	r16, r24
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	18 07       	cpc	r17, r24
     878:	28 f0       	brcs	.+10     	; 0x884 <__clzsi2+0x5c>
     87a:	88 e1       	ldi	r24, 0x18	; 24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	a0 e0       	ldi	r26, 0x00	; 0
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	04 c0       	rjmp	.+8      	; 0x88c <__clzsi2+0x64>
     884:	80 e1       	ldi	r24, 0x10	; 16
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	20 e2       	ldi	r18, 0x20	; 32
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	28 1b       	sub	r18, r24
     896:	39 0b       	sbc	r19, r25
     898:	4a 0b       	sbc	r20, r26
     89a:	5b 0b       	sbc	r21, r27
     89c:	04 c0       	rjmp	.+8      	; 0x8a6 <__clzsi2+0x7e>
     89e:	16 95       	lsr	r17
     8a0:	07 95       	ror	r16
     8a2:	f7 94       	ror	r15
     8a4:	e7 94       	ror	r14
     8a6:	8a 95       	dec	r24
     8a8:	d2 f7       	brpl	.-12     	; 0x89e <__clzsi2+0x76>
     8aa:	f7 01       	movw	r30, r14
     8ac:	ec 5d       	subi	r30, 0xDC	; 220
     8ae:	fd 4f       	sbci	r31, 0xFD	; 253
     8b0:	80 81       	ld	r24, Z
     8b2:	28 1b       	sub	r18, r24
     8b4:	31 09       	sbc	r19, r1
     8b6:	41 09       	sbc	r20, r1
     8b8:	51 09       	sbc	r21, r1
     8ba:	c9 01       	movw	r24, r18
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	08 95       	ret

000008c6 <__pack_f>:
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	fc 01       	movw	r30, r24
     8d2:	e4 80       	ldd	r14, Z+4	; 0x04
     8d4:	f5 80       	ldd	r15, Z+5	; 0x05
     8d6:	06 81       	ldd	r16, Z+6	; 0x06
     8d8:	17 81       	ldd	r17, Z+7	; 0x07
     8da:	d1 80       	ldd	r13, Z+1	; 0x01
     8dc:	80 81       	ld	r24, Z
     8de:	82 30       	cpi	r24, 0x02	; 2
     8e0:	48 f4       	brcc	.+18     	; 0x8f4 <__pack_f+0x2e>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e1       	ldi	r26, 0x10	; 16
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e8 2a       	or	r14, r24
     8ec:	f9 2a       	or	r15, r25
     8ee:	0a 2b       	or	r16, r26
     8f0:	1b 2b       	or	r17, r27
     8f2:	a5 c0       	rjmp	.+330    	; 0xa3e <__pack_f+0x178>
     8f4:	84 30       	cpi	r24, 0x04	; 4
     8f6:	09 f4       	brne	.+2      	; 0x8fa <__pack_f+0x34>
     8f8:	9f c0       	rjmp	.+318    	; 0xa38 <__pack_f+0x172>
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	21 f4       	brne	.+8      	; 0x906 <__pack_f+0x40>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	05 c0       	rjmp	.+10     	; 0x910 <__pack_f+0x4a>
     906:	e1 14       	cp	r14, r1
     908:	f1 04       	cpc	r15, r1
     90a:	01 05       	cpc	r16, r1
     90c:	11 05       	cpc	r17, r1
     90e:	19 f4       	brne	.+6      	; 0x916 <__pack_f+0x50>
     910:	e0 e0       	ldi	r30, 0x00	; 0
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	96 c0       	rjmp	.+300    	; 0xa42 <__pack_f+0x17c>
     916:	62 81       	ldd	r22, Z+2	; 0x02
     918:	73 81       	ldd	r23, Z+3	; 0x03
     91a:	9f ef       	ldi	r25, 0xFF	; 255
     91c:	62 38       	cpi	r22, 0x82	; 130
     91e:	79 07       	cpc	r23, r25
     920:	0c f0       	brlt	.+2      	; 0x924 <__pack_f+0x5e>
     922:	5b c0       	rjmp	.+182    	; 0x9da <__pack_f+0x114>
     924:	22 e8       	ldi	r18, 0x82	; 130
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	26 1b       	sub	r18, r22
     92a:	37 0b       	sbc	r19, r23
     92c:	2a 31       	cpi	r18, 0x1A	; 26
     92e:	31 05       	cpc	r19, r1
     930:	2c f0       	brlt	.+10     	; 0x93c <__pack_f+0x76>
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	2a c0       	rjmp	.+84     	; 0x990 <__pack_f+0xca>
     93c:	b8 01       	movw	r22, r16
     93e:	a7 01       	movw	r20, r14
     940:	02 2e       	mov	r0, r18
     942:	04 c0       	rjmp	.+8      	; 0x94c <__pack_f+0x86>
     944:	76 95       	lsr	r23
     946:	67 95       	ror	r22
     948:	57 95       	ror	r21
     94a:	47 95       	ror	r20
     94c:	0a 94       	dec	r0
     94e:	d2 f7       	brpl	.-12     	; 0x944 <__pack_f+0x7e>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	a0 e0       	ldi	r26, 0x00	; 0
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	04 c0       	rjmp	.+8      	; 0x962 <__pack_f+0x9c>
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	aa 1f       	adc	r26, r26
     960:	bb 1f       	adc	r27, r27
     962:	2a 95       	dec	r18
     964:	d2 f7       	brpl	.-12     	; 0x95a <__pack_f+0x94>
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	a1 09       	sbc	r26, r1
     96a:	b1 09       	sbc	r27, r1
     96c:	8e 21       	and	r24, r14
     96e:	9f 21       	and	r25, r15
     970:	a0 23       	and	r26, r16
     972:	b1 23       	and	r27, r17
     974:	00 97       	sbiw	r24, 0x00	; 0
     976:	a1 05       	cpc	r26, r1
     978:	b1 05       	cpc	r27, r1
     97a:	21 f0       	breq	.+8      	; 0x984 <__pack_f+0xbe>
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a0 e0       	ldi	r26, 0x00	; 0
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	9a 01       	movw	r18, r20
     986:	ab 01       	movw	r20, r22
     988:	28 2b       	or	r18, r24
     98a:	39 2b       	or	r19, r25
     98c:	4a 2b       	or	r20, r26
     98e:	5b 2b       	or	r21, r27
     990:	da 01       	movw	r26, r20
     992:	c9 01       	movw	r24, r18
     994:	8f 77       	andi	r24, 0x7F	; 127
     996:	90 70       	andi	r25, 0x00	; 0
     998:	a0 70       	andi	r26, 0x00	; 0
     99a:	b0 70       	andi	r27, 0x00	; 0
     99c:	80 34       	cpi	r24, 0x40	; 64
     99e:	91 05       	cpc	r25, r1
     9a0:	a1 05       	cpc	r26, r1
     9a2:	b1 05       	cpc	r27, r1
     9a4:	39 f4       	brne	.+14     	; 0x9b4 <__pack_f+0xee>
     9a6:	27 ff       	sbrs	r18, 7
     9a8:	09 c0       	rjmp	.+18     	; 0x9bc <__pack_f+0xf6>
     9aa:	20 5c       	subi	r18, 0xC0	; 192
     9ac:	3f 4f       	sbci	r19, 0xFF	; 255
     9ae:	4f 4f       	sbci	r20, 0xFF	; 255
     9b0:	5f 4f       	sbci	r21, 0xFF	; 255
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <__pack_f+0xf6>
     9b4:	21 5c       	subi	r18, 0xC1	; 193
     9b6:	3f 4f       	sbci	r19, 0xFF	; 255
     9b8:	4f 4f       	sbci	r20, 0xFF	; 255
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	e0 e0       	ldi	r30, 0x00	; 0
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	20 30       	cpi	r18, 0x00	; 0
     9c2:	a0 e0       	ldi	r26, 0x00	; 0
     9c4:	3a 07       	cpc	r19, r26
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	4a 07       	cpc	r20, r26
     9ca:	a0 e4       	ldi	r26, 0x40	; 64
     9cc:	5a 07       	cpc	r21, r26
     9ce:	10 f0       	brcs	.+4      	; 0x9d4 <__pack_f+0x10e>
     9d0:	e1 e0       	ldi	r30, 0x01	; 1
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	79 01       	movw	r14, r18
     9d6:	8a 01       	movw	r16, r20
     9d8:	27 c0       	rjmp	.+78     	; 0xa28 <__pack_f+0x162>
     9da:	60 38       	cpi	r22, 0x80	; 128
     9dc:	71 05       	cpc	r23, r1
     9de:	64 f5       	brge	.+88     	; 0xa38 <__pack_f+0x172>
     9e0:	fb 01       	movw	r30, r22
     9e2:	e1 58       	subi	r30, 0x81	; 129
     9e4:	ff 4f       	sbci	r31, 0xFF	; 255
     9e6:	d8 01       	movw	r26, r16
     9e8:	c7 01       	movw	r24, r14
     9ea:	8f 77       	andi	r24, 0x7F	; 127
     9ec:	90 70       	andi	r25, 0x00	; 0
     9ee:	a0 70       	andi	r26, 0x00	; 0
     9f0:	b0 70       	andi	r27, 0x00	; 0
     9f2:	80 34       	cpi	r24, 0x40	; 64
     9f4:	91 05       	cpc	r25, r1
     9f6:	a1 05       	cpc	r26, r1
     9f8:	b1 05       	cpc	r27, r1
     9fa:	39 f4       	brne	.+14     	; 0xa0a <__pack_f+0x144>
     9fc:	e7 fe       	sbrs	r14, 7
     9fe:	0d c0       	rjmp	.+26     	; 0xa1a <__pack_f+0x154>
     a00:	80 e4       	ldi	r24, 0x40	; 64
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	a0 e0       	ldi	r26, 0x00	; 0
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <__pack_f+0x14c>
     a0a:	8f e3       	ldi	r24, 0x3F	; 63
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	e8 0e       	add	r14, r24
     a14:	f9 1e       	adc	r15, r25
     a16:	0a 1f       	adc	r16, r26
     a18:	1b 1f       	adc	r17, r27
     a1a:	17 ff       	sbrs	r17, 7
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <__pack_f+0x162>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	31 96       	adiw	r30, 0x01	; 1
     a28:	87 e0       	ldi	r24, 0x07	; 7
     a2a:	16 95       	lsr	r17
     a2c:	07 95       	ror	r16
     a2e:	f7 94       	ror	r15
     a30:	e7 94       	ror	r14
     a32:	8a 95       	dec	r24
     a34:	d1 f7       	brne	.-12     	; 0xa2a <__pack_f+0x164>
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <__pack_f+0x17c>
     a38:	ee 24       	eor	r14, r14
     a3a:	ff 24       	eor	r15, r15
     a3c:	87 01       	movw	r16, r14
     a3e:	ef ef       	ldi	r30, 0xFF	; 255
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	6e 2f       	mov	r22, r30
     a44:	67 95       	ror	r22
     a46:	66 27       	eor	r22, r22
     a48:	67 95       	ror	r22
     a4a:	90 2f       	mov	r25, r16
     a4c:	9f 77       	andi	r25, 0x7F	; 127
     a4e:	d7 94       	ror	r13
     a50:	dd 24       	eor	r13, r13
     a52:	d7 94       	ror	r13
     a54:	8e 2f       	mov	r24, r30
     a56:	86 95       	lsr	r24
     a58:	49 2f       	mov	r20, r25
     a5a:	46 2b       	or	r20, r22
     a5c:	58 2f       	mov	r21, r24
     a5e:	5d 29       	or	r21, r13
     a60:	b7 01       	movw	r22, r14
     a62:	ca 01       	movw	r24, r20
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	08 95       	ret

00000a70 <__unpack_f>:
     a70:	fc 01       	movw	r30, r24
     a72:	db 01       	movw	r26, r22
     a74:	40 81       	ld	r20, Z
     a76:	51 81       	ldd	r21, Z+1	; 0x01
     a78:	22 81       	ldd	r18, Z+2	; 0x02
     a7a:	62 2f       	mov	r22, r18
     a7c:	6f 77       	andi	r22, 0x7F	; 127
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	22 1f       	adc	r18, r18
     a82:	22 27       	eor	r18, r18
     a84:	22 1f       	adc	r18, r18
     a86:	93 81       	ldd	r25, Z+3	; 0x03
     a88:	89 2f       	mov	r24, r25
     a8a:	88 0f       	add	r24, r24
     a8c:	82 2b       	or	r24, r18
     a8e:	28 2f       	mov	r18, r24
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	99 1f       	adc	r25, r25
     a94:	99 27       	eor	r25, r25
     a96:	99 1f       	adc	r25, r25
     a98:	11 96       	adiw	r26, 0x01	; 1
     a9a:	9c 93       	st	X, r25
     a9c:	11 97       	sbiw	r26, 0x01	; 1
     a9e:	21 15       	cp	r18, r1
     aa0:	31 05       	cpc	r19, r1
     aa2:	a9 f5       	brne	.+106    	; 0xb0e <__unpack_f+0x9e>
     aa4:	41 15       	cp	r20, r1
     aa6:	51 05       	cpc	r21, r1
     aa8:	61 05       	cpc	r22, r1
     aaa:	71 05       	cpc	r23, r1
     aac:	11 f4       	brne	.+4      	; 0xab2 <__unpack_f+0x42>
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	37 c0       	rjmp	.+110    	; 0xb20 <__unpack_f+0xb0>
     ab2:	82 e8       	ldi	r24, 0x82	; 130
     ab4:	9f ef       	ldi	r25, 0xFF	; 255
     ab6:	13 96       	adiw	r26, 0x03	; 3
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	9a 01       	movw	r18, r20
     ac0:	ab 01       	movw	r20, r22
     ac2:	67 e0       	ldi	r22, 0x07	; 7
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	44 1f       	adc	r20, r20
     aca:	55 1f       	adc	r21, r21
     acc:	6a 95       	dec	r22
     ace:	d1 f7       	brne	.-12     	; 0xac4 <__unpack_f+0x54>
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	8c 93       	st	X, r24
     ad4:	0d c0       	rjmp	.+26     	; 0xaf0 <__unpack_f+0x80>
     ad6:	22 0f       	add	r18, r18
     ad8:	33 1f       	adc	r19, r19
     ada:	44 1f       	adc	r20, r20
     adc:	55 1f       	adc	r21, r21
     ade:	12 96       	adiw	r26, 0x02	; 2
     ae0:	8d 91       	ld	r24, X+
     ae2:	9c 91       	ld	r25, X
     ae4:	13 97       	sbiw	r26, 0x03	; 3
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	13 96       	adiw	r26, 0x03	; 3
     aea:	9c 93       	st	X, r25
     aec:	8e 93       	st	-X, r24
     aee:	12 97       	sbiw	r26, 0x02	; 2
     af0:	20 30       	cpi	r18, 0x00	; 0
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	38 07       	cpc	r19, r24
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	48 07       	cpc	r20, r24
     afa:	80 e4       	ldi	r24, 0x40	; 64
     afc:	58 07       	cpc	r21, r24
     afe:	58 f3       	brcs	.-42     	; 0xad6 <__unpack_f+0x66>
     b00:	14 96       	adiw	r26, 0x04	; 4
     b02:	2d 93       	st	X+, r18
     b04:	3d 93       	st	X+, r19
     b06:	4d 93       	st	X+, r20
     b08:	5c 93       	st	X, r21
     b0a:	17 97       	sbiw	r26, 0x07	; 7
     b0c:	08 95       	ret
     b0e:	2f 3f       	cpi	r18, 0xFF	; 255
     b10:	31 05       	cpc	r19, r1
     b12:	79 f4       	brne	.+30     	; 0xb32 <__unpack_f+0xc2>
     b14:	41 15       	cp	r20, r1
     b16:	51 05       	cpc	r21, r1
     b18:	61 05       	cpc	r22, r1
     b1a:	71 05       	cpc	r23, r1
     b1c:	19 f4       	brne	.+6      	; 0xb24 <__unpack_f+0xb4>
     b1e:	84 e0       	ldi	r24, 0x04	; 4
     b20:	8c 93       	st	X, r24
     b22:	08 95       	ret
     b24:	64 ff       	sbrs	r22, 4
     b26:	03 c0       	rjmp	.+6      	; 0xb2e <__unpack_f+0xbe>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	8c 93       	st	X, r24
     b2c:	12 c0       	rjmp	.+36     	; 0xb52 <__unpack_f+0xe2>
     b2e:	1c 92       	st	X, r1
     b30:	10 c0       	rjmp	.+32     	; 0xb52 <__unpack_f+0xe2>
     b32:	2f 57       	subi	r18, 0x7F	; 127
     b34:	30 40       	sbci	r19, 0x00	; 0
     b36:	13 96       	adiw	r26, 0x03	; 3
     b38:	3c 93       	st	X, r19
     b3a:	2e 93       	st	-X, r18
     b3c:	12 97       	sbiw	r26, 0x02	; 2
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	8c 93       	st	X, r24
     b42:	87 e0       	ldi	r24, 0x07	; 7
     b44:	44 0f       	add	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	66 1f       	adc	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	8a 95       	dec	r24
     b4e:	d1 f7       	brne	.-12     	; 0xb44 <__unpack_f+0xd4>
     b50:	70 64       	ori	r23, 0x40	; 64
     b52:	14 96       	adiw	r26, 0x04	; 4
     b54:	4d 93       	st	X+, r20
     b56:	5d 93       	st	X+, r21
     b58:	6d 93       	st	X+, r22
     b5a:	7c 93       	st	X, r23
     b5c:	17 97       	sbiw	r26, 0x07	; 7
     b5e:	08 95       	ret

00000b60 <__fpcmp_parts_f>:
     b60:	1f 93       	push	r17
     b62:	dc 01       	movw	r26, r24
     b64:	fb 01       	movw	r30, r22
     b66:	9c 91       	ld	r25, X
     b68:	92 30       	cpi	r25, 0x02	; 2
     b6a:	08 f4       	brcc	.+2      	; 0xb6e <__fpcmp_parts_f+0xe>
     b6c:	47 c0       	rjmp	.+142    	; 0xbfc <__fpcmp_parts_f+0x9c>
     b6e:	80 81       	ld	r24, Z
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	08 f4       	brcc	.+2      	; 0xb76 <__fpcmp_parts_f+0x16>
     b74:	43 c0       	rjmp	.+134    	; 0xbfc <__fpcmp_parts_f+0x9c>
     b76:	94 30       	cpi	r25, 0x04	; 4
     b78:	51 f4       	brne	.+20     	; 0xb8e <__fpcmp_parts_f+0x2e>
     b7a:	11 96       	adiw	r26, 0x01	; 1
     b7c:	1c 91       	ld	r17, X
     b7e:	84 30       	cpi	r24, 0x04	; 4
     b80:	99 f5       	brne	.+102    	; 0xbe8 <__fpcmp_parts_f+0x88>
     b82:	81 81       	ldd	r24, Z+1	; 0x01
     b84:	68 2f       	mov	r22, r24
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	61 1b       	sub	r22, r17
     b8a:	71 09       	sbc	r23, r1
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <__fpcmp_parts_f+0xac>
     b8e:	84 30       	cpi	r24, 0x04	; 4
     b90:	21 f0       	breq	.+8      	; 0xb9a <__fpcmp_parts_f+0x3a>
     b92:	92 30       	cpi	r25, 0x02	; 2
     b94:	31 f4       	brne	.+12     	; 0xba2 <__fpcmp_parts_f+0x42>
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	b9 f1       	breq	.+110    	; 0xc08 <__fpcmp_parts_f+0xa8>
     b9a:	81 81       	ldd	r24, Z+1	; 0x01
     b9c:	88 23       	and	r24, r24
     b9e:	89 f1       	breq	.+98     	; 0xc02 <__fpcmp_parts_f+0xa2>
     ba0:	2d c0       	rjmp	.+90     	; 0xbfc <__fpcmp_parts_f+0x9c>
     ba2:	11 96       	adiw	r26, 0x01	; 1
     ba4:	1c 91       	ld	r17, X
     ba6:	11 97       	sbiw	r26, 0x01	; 1
     ba8:	82 30       	cpi	r24, 0x02	; 2
     baa:	f1 f0       	breq	.+60     	; 0xbe8 <__fpcmp_parts_f+0x88>
     bac:	81 81       	ldd	r24, Z+1	; 0x01
     bae:	18 17       	cp	r17, r24
     bb0:	d9 f4       	brne	.+54     	; 0xbe8 <__fpcmp_parts_f+0x88>
     bb2:	12 96       	adiw	r26, 0x02	; 2
     bb4:	2d 91       	ld	r18, X+
     bb6:	3c 91       	ld	r19, X
     bb8:	13 97       	sbiw	r26, 0x03	; 3
     bba:	82 81       	ldd	r24, Z+2	; 0x02
     bbc:	93 81       	ldd	r25, Z+3	; 0x03
     bbe:	82 17       	cp	r24, r18
     bc0:	93 07       	cpc	r25, r19
     bc2:	94 f0       	brlt	.+36     	; 0xbe8 <__fpcmp_parts_f+0x88>
     bc4:	28 17       	cp	r18, r24
     bc6:	39 07       	cpc	r19, r25
     bc8:	bc f0       	brlt	.+46     	; 0xbf8 <__fpcmp_parts_f+0x98>
     bca:	14 96       	adiw	r26, 0x04	; 4
     bcc:	8d 91       	ld	r24, X+
     bce:	9d 91       	ld	r25, X+
     bd0:	0d 90       	ld	r0, X+
     bd2:	bc 91       	ld	r27, X
     bd4:	a0 2d       	mov	r26, r0
     bd6:	24 81       	ldd	r18, Z+4	; 0x04
     bd8:	35 81       	ldd	r19, Z+5	; 0x05
     bda:	46 81       	ldd	r20, Z+6	; 0x06
     bdc:	57 81       	ldd	r21, Z+7	; 0x07
     bde:	28 17       	cp	r18, r24
     be0:	39 07       	cpc	r19, r25
     be2:	4a 07       	cpc	r20, r26
     be4:	5b 07       	cpc	r21, r27
     be6:	18 f4       	brcc	.+6      	; 0xbee <__fpcmp_parts_f+0x8e>
     be8:	11 23       	and	r17, r17
     bea:	41 f0       	breq	.+16     	; 0xbfc <__fpcmp_parts_f+0x9c>
     bec:	0a c0       	rjmp	.+20     	; 0xc02 <__fpcmp_parts_f+0xa2>
     bee:	82 17       	cp	r24, r18
     bf0:	93 07       	cpc	r25, r19
     bf2:	a4 07       	cpc	r26, r20
     bf4:	b5 07       	cpc	r27, r21
     bf6:	40 f4       	brcc	.+16     	; 0xc08 <__fpcmp_parts_f+0xa8>
     bf8:	11 23       	and	r17, r17
     bfa:	19 f0       	breq	.+6      	; 0xc02 <__fpcmp_parts_f+0xa2>
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <__fpcmp_parts_f+0xac>
     c02:	6f ef       	ldi	r22, 0xFF	; 255
     c04:	7f ef       	ldi	r23, 0xFF	; 255
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <__fpcmp_parts_f+0xac>
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	cb 01       	movw	r24, r22
     c0e:	1f 91       	pop	r17
     c10:	08 95       	ret

00000c12 <__vector_25>:
#include "uart.h"

/* Global variables to hold the address of the call back function in the application */
static volatile void (*int_callBackPtr)(void) = NULL_PTR;

ISR(USART0_RX_vect){
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	00 90 5b 00 	lds	r0, 0x005B
     c1e:	0f 92       	push	r0
     c20:	11 24       	eor	r1, r1
     c22:	2f 93       	push	r18
     c24:	3f 93       	push	r19
     c26:	4f 93       	push	r20
     c28:	5f 93       	push	r21
     c2a:	6f 93       	push	r22
     c2c:	7f 93       	push	r23
     c2e:	8f 93       	push	r24
     c30:	9f 93       	push	r25
     c32:	af 93       	push	r26
     c34:	bf 93       	push	r27
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
	if(int_callBackPtr != NULL_PTR)
     c42:	80 91 3c 03 	lds	r24, 0x033C
     c46:	90 91 3d 03 	lds	r25, 0x033D
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	29 f0       	breq	.+10     	; 0xc58 <__vector_25+0x46>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*int_callBackPtr)();
     c4e:	e0 91 3c 03 	lds	r30, 0x033C
     c52:	f0 91 3d 03 	lds	r31, 0x033D
     c56:	19 95       	eicall
	}
}
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	00 92 5b 00 	sts	0x005B, r0
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <USART_INT_EN>:

void USART_INT_EN(){
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= (1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data
     c8c:	a1 ec       	ldi	r26, 0xC1	; 193
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e1 ec       	ldi	r30, 0xC1	; 193
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	80 68       	ori	r24, 0x80	; 128
     c98:	8c 93       	st	X, r24
}
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <USART_INT_DIS>:
void USART_INT_DIS(){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &= ~(1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data
     ca8:	a1 ec       	ldi	r26, 0xC1	; 193
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e1 ec       	ldi	r30, 0xC1	; 193
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	8c 93       	st	X, r24
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <uart_start>:
void uart_start(void) {
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
  UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //transmit side of hardware
     cc4:	a1 ec       	ldi	r26, 0xC1	; 193
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 ec       	ldi	r30, 0xC1	; 193
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	88 61       	ori	r24, 0x18	; 24
     cd0:	8c 93       	st	X, r24
  UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //receive side of hardware
     cd2:	a2 ec       	ldi	r26, 0xC2	; 194
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e2 ec       	ldi	r30, 0xC2	; 194
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	86 60       	ori	r24, 0x06	; 6
     cde:	8c 93       	st	X, r24

  UBRR0L = BAUD_PRESCALE; //set the baud to 9600, have to split it into the two registers
     ce0:	e4 ec       	ldi	r30, 0xC4	; 196
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	83 e3       	ldi	r24, 0x33	; 51
     ce6:	80 83       	st	Z, r24
  UBRR0H = (BAUD_PRESCALE >> 8); //high end of baud register
     ce8:	e5 ec       	ldi	r30, 0xC5	; 197
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	10 82       	st	Z, r1

  USART_INT_DIS();
     cee:	0e 94 50 06 	call	0xca0	; 0xca0 <USART_INT_DIS>

  #if DEBUG
    uart_sendstr("0x04 - UART is up...");
  #endif
}
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <uart_sendint>:

void uart_sendint(uint8_t data) {
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	0f 92       	push	r0
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	89 83       	std	Y+1, r24	; 0x01
    /*
    Use this to send a 8bit long piece of data
    */
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     d04:	e0 ec       	ldi	r30, 0xC0	; 192
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	88 2f       	mov	r24, r24
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	80 72       	andi	r24, 0x20	; 32
     d10:	90 70       	andi	r25, 0x00	; 0
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	b9 f3       	breq	.-18     	; 0xd04 <uart_sendint+0xc>
    UDR0 = data; //send the data
     d16:	e6 ec       	ldi	r30, 0xC6	; 198
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	80 83       	st	Z, r24
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     d1e:	e0 ec       	ldi	r30, 0xC0	; 192
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	80 72       	andi	r24, 0x20	; 32
     d2a:	90 70       	andi	r25, 0x00	; 0
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	b9 f3       	breq	.-18     	; 0xd1e <uart_sendint+0x26>
    UDR0 = '\r';//send a new line just to be sure
     d30:	e6 ec       	ldi	r30, 0xC6	; 198
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	8d e0       	ldi	r24, 0x0D	; 13
     d36:	80 83       	st	Z, r24
}
     d38:	0f 90       	pop	r0
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <uart_sendint16>:

void uart_sendint16(uint16_t data) {
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	0f 92       	push	r0
     d46:	0f 92       	push	r0
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	9a 83       	std	Y+2, r25	; 0x02
     d4e:	89 83       	std	Y+1, r24	; 0x01
    /*
    Use this to send a 16bit long piece of data
    */
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     d50:	e0 ec       	ldi	r30, 0xC0	; 192
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	80 72       	andi	r24, 0x20	; 32
     d5c:	90 70       	andi	r25, 0x00	; 0
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	b9 f3       	breq	.-18     	; 0xd50 <uart_sendint16+0x10>
    UDR0 = data;//send the lower bits
     d62:	e6 ec       	ldi	r30, 0xC6	; 198
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	80 83       	st	Z, r24
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     d6a:	e0 ec       	ldi	r30, 0xC0	; 192
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	80 72       	andi	r24, 0x20	; 32
     d76:	90 70       	andi	r25, 0x00	; 0
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	b9 f3       	breq	.-18     	; 0xd6a <uart_sendint16+0x2a>
    UDR0 = (data >> 8); //send the higher bits
     d7c:	e6 ec       	ldi	r30, 0xC6	; 198
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	89 2f       	mov	r24, r25
     d86:	99 27       	eor	r25, r25
     d88:	80 83       	st	Z, r24
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     d8a:	e0 ec       	ldi	r30, 0xC0	; 192
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	80 72       	andi	r24, 0x20	; 32
     d96:	90 70       	andi	r25, 0x00	; 0
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	b9 f3       	breq	.-18     	; 0xd8a <uart_sendint16+0x4a>
    UDR0 = '\n';//send a new line just to be sure
     d9c:	e6 ec       	ldi	r30, 0xC6	; 198
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	80 83       	st	Z, r24
}
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <uart_sendstr>:

void uart_sendstr(char *data) {
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	0f 92       	push	r0
     db4:	0f 92       	push	r0
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	14 c0       	rjmp	.+40     	; 0xde8 <uart_sendstr+0x3a>
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
    while (*data) {
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     dc0:	e0 ec       	ldi	r30, 0xC0	; 192
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	80 72       	andi	r24, 0x20	; 32
     dcc:	90 70       	andi	r25, 0x00	; 0
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	b9 f3       	breq	.-18     	; 0xdc0 <uart_sendstr+0x12>
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
     dd2:	a6 ec       	ldi	r26, 0xC6	; 198
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e9 81       	ldd	r30, Y+1	; 0x01
     dd8:	fa 81       	ldd	r31, Y+2	; 0x02
     dda:	80 81       	ld	r24, Z
     ddc:	8c 93       	st	X, r24
        data += 1;//go to new bit in string
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
void uart_sendstr(char *data) {
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
    while (*data) {
     de8:	e9 81       	ldd	r30, Y+1	; 0x01
     dea:	fa 81       	ldd	r31, Y+2	; 0x02
     dec:	80 81       	ld	r24, Z
     dee:	88 23       	and	r24, r24
     df0:	39 f7       	brne	.-50     	; 0xdc0 <uart_sendstr+0x12>
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
        data += 1;//go to new bit in string
    }
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     df2:	e0 ec       	ldi	r30, 0xC0	; 192
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	80 72       	andi	r24, 0x20	; 32
     dfe:	90 70       	andi	r25, 0x00	; 0
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	b9 f3       	breq	.-18     	; 0xdf2 <uart_sendstr+0x44>
    UDR0 = '\r';//send a new line just to be sure
     e04:	e6 ec       	ldi	r30, 0xC6	; 198
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	8d e0       	ldi	r24, 0x0D	; 13
     e0a:	80 83       	st	Z, r24
}
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <USART_Receive>:
//	*******************************************************************/
//}
//
//
unsigned char USART_Receive( void )
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSR0A,RXC0)){}
     e1e:	e0 ec       	ldi	r30, 0xC0	; 192
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	88 23       	and	r24, r24
     e26:	dc f7       	brge	.-10     	; 0xe1e <USART_Receive+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR0;
     e28:	e6 ec       	ldi	r30, 0xC6	; 198
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
}
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <int_setCallBack>:

void int_setCallBack(void(*a_ptr)(void))
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	0f 92       	push	r0
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	int_callBackPtr = a_ptr;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	90 93 3d 03 	sts	0x033D, r25
     e4c:	80 93 3c 03 	sts	0x033C, r24
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <TIMER2_voidStartTimer>:
 * Description : Start Timer2 counter register
 * Arguments   : void
 * return      : void
 **************************************************************************************/
 void TIMER2_voidStartTimer(void)
 {
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	 /*Start TCNT2 Reg counting by loading it's value*/
	 TCCR2A = TIMER2_uint8_tTCCR2A_Value;
     e62:	e0 eb       	ldi	r30, 0xB0	; 176
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 91 3e 03 	lds	r24, 0x033E
     e6a:	80 83       	st	Z, r24
	 TCCR2B = TIMER2_uint8_tTCCR2B_Value;
     e6c:	e1 eb       	ldi	r30, 0xB1	; 177
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 91 3f 03 	lds	r24, 0x033F
     e74:	80 83       	st	Z, r24

 }
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <TIMER2_voidStopTimer>:
 * Description : Stop Timer2 counter register
 * Arguments   : void
 * return      : void
 **************************************************************************************/
 void TIMER2_voidStopTimer(void)
 {
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62

	 /*Stop TCNT2 Reg counting by loading zeros in CS20,CS21,CS22*/
 	 TCCR2B = TIMER2_uint8_tTCCR2B_Value & TIMER2_STOP_MASK;
     e84:	e1 eb       	ldi	r30, 0xB1	; 177
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 91 3f 03 	lds	r24, 0x033F
     e8c:	88 7f       	andi	r24, 0xF8	; 248
     e8e:	80 83       	st	Z, r24


 }
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <TIMER2_voidInitializeTimer2>:
 * Description : Initialize Timer2 with pre configured values in cofig file
 * Arguments   : void
 * return      : void
 ***********************************************************************************/
 void TIMER2_voidInitializeTimer2(void)
 {
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	0f 92       	push	r0
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
	 TCNT2=0;
     ea0:	e2 eb       	ldi	r30, 0xB2	; 178
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	10 82       	st	Z, r1

	/*TCCR2B Prescaler value is stored temporarily in TIMER2_uint8_tTCCR2B_Value variable*/
	/*Initialize TCCR2B_ value*/
	/*Reset first 3 BITS*/
	TIMER2_uint8_tTCCR2B_Value &= TIMER2_TCCR2B_MASK;
     ea6:	80 91 3f 03 	lds	r24, 0x033F
     eaa:	88 7f       	andi	r24, 0xF8	; 248
     eac:	80 93 3f 03 	sts	0x033F, r24


	/*Mask Prescaler value*/
	TIMER2_uint8_tTCCR2B_Value |= TIMER2_PRESCALER;
     eb0:	80 91 3f 03 	lds	r24, 0x033F
     eb4:	85 60       	ori	r24, 0x05	; 5
     eb6:	80 93 3f 03 	sts	0x033F, r24


	/*====================================================================
	 * calculate Prescaler value that will be used later in equations
	 *====================================================================*/
	TIMER2_u16Prescaler = 1;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	90 93 25 03 	sts	0x0325, r25
     ec2:	80 93 24 03 	sts	0x0324, r24
		TIMER2_u16Prescaler = 8;

	#elif (TIMER2_PRESCALER>Prescaller_8 && TIMER2_PRESCALER<=Prescaller_1024)

		/*caclulate prescaler = 2^(2*Prescaller)*/
		for (uint8_t i=0;i<(TIMER2_PRESCALER*2);i++)
     ec6:	19 82       	std	Y+1, r1	; 0x01
     ec8:	0d c0       	rjmp	.+26     	; 0xee4 <TIMER2_voidInitializeTimer2+0x4e>
		{
			TIMER2_u16Prescaler *= 2;
     eca:	80 91 24 03 	lds	r24, 0x0324
     ece:	90 91 25 03 	lds	r25, 0x0325
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	90 93 25 03 	sts	0x0325, r25
     eda:	80 93 24 03 	sts	0x0324, r24
		TIMER2_u16Prescaler = 8;

	#elif (TIMER2_PRESCALER>Prescaller_8 && TIMER2_PRESCALER<=Prescaller_1024)

		/*caclulate prescaler = 2^(2*Prescaller)*/
		for (uint8_t i=0;i<(TIMER2_PRESCALER*2);i++)
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	8a 30       	cpi	r24, 0x0A	; 10
     ee8:	80 f3       	brcs	.-32     	; 0xeca <TIMER2_voidInitializeTimer2+0x34>
	#elif (TIMER2_MODE==TIMER2_FAST_PWM_MODE)



		/*Choose Fast PWM mode*/
		SET_BIT(TIMER2_uint8_tTCCR2A_Value,TIMER2_WGM20);
     eea:	80 91 3e 03 	lds	r24, 0x033E
     eee:	81 60       	ori	r24, 0x01	; 1
     ef0:	80 93 3e 03 	sts	0x033E, r24
		SET_BIT(TIMER2_uint8_tTCCR2A_Value,TIMER2_WGM21);
     ef4:	80 91 3e 03 	lds	r24, 0x033E
     ef8:	82 60       	ori	r24, 0x02	; 2
     efa:	80 93 3e 03 	sts	0x033E, r24
		SET_BIT(TIMER2_uint8_tTCCR2B_Value,TIMER2_WGM22);
     efe:	80 91 3f 03 	lds	r24, 0x033F
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	80 93 3f 03 	sts	0x033F, r24
		//SET_BIT(DDRB_OC2A,4);
		OCR2A = TIMER2_OCR2A_VALUE;
     f08:	e3 eb       	ldi	r30, 0xB3	; 179
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	8b e9       	ldi	r24, 0x9B	; 155
     f0e:	80 83       	st	Z, r24
#if Timer2_ChannalB
		SET_BIT(DDRH_OC2B,6);
     f10:	a1 e0       	ldi	r26, 0x01	; 1
     f12:	b1 e0       	ldi	r27, 0x01	; 1
     f14:	e1 e0       	ldi	r30, 0x01	; 1
     f16:	f1 e0       	ldi	r31, 0x01	; 1
     f18:	80 81       	ld	r24, Z
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	8c 93       	st	X, r24
	#endif


	/*Choose OC2A, OC2B Pin Mode*/
	/*mask COM2A0,COM2A1,COM2B0,COM2B1 bits with zeros*/
	TIMER2_uint8_tTCCR2A_Value &= TIMER2_COM_MASK;
     f1e:	80 91 3e 03 	lds	r24, 0x033E
     f22:	8f 70       	andi	r24, 0x0F	; 15
     f24:	80 93 3e 03 	sts	0x033E, r24
	/*Put mode in COM2A0,COM2A1 bits*/
	TIMER2_uint8_tTCCR2A_Value |= (Timer2_OC2A_MODE<<6) ;
     f28:	80 91 3e 03 	lds	r24, 0x033E
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	80 93 3e 03 	sts	0x033E, r24
	/*Put mode in COM2B0,COM2B1 bits*/
	TIMER2_uint8_tTCCR2A_Value |= (Timer2_OC2B_MODE<<4) ;
     f32:	80 91 3e 03 	lds	r24, 0x033E
     f36:	80 62       	ori	r24, 0x20	; 32
     f38:	80 93 3e 03 	sts	0x033E, r24



 }/*TIMER2_voidInitializeTimer2*/
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <TIMER2_voidFastPWM>:
 * Description : output Fast PWM on OC0 pin with duty cycle of Copy_uint8_tDutyCycle
 * Arguments   : DutyCycle: determine PWM duty cycle from 0 to 100
 * return      : void
 */
 void TIMER2_voidFastPWM(uint8_t Copy_uint8_tDutyCycle)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	89 83       	std	Y+1, r24	; 0x01
//		// OCR2A = (Copy_uint8_tDutyCycle*TIMER2_REG_CAPACITY)/100;
//	 }
	 //else if(channel == Channel_B2){
		 /*configure PWM Duty Cycle*/
		 //OCR2B = (Copy_uint8_tDutyCycle*TIMER2_REG_CAPACITY)/100;
		 OCR2B = Copy_uint8_tDutyCycle;
     f50:	e4 eb       	ldi	r30, 0xB4	; 180
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	80 83       	st	Z, r24
	 //}else return;
	 /*Start PWM*/
	 TIMER2_voidStartTimer();
     f58:	0e 94 2d 07 	call	0xe5a	; 0xe5a <TIMER2_voidStartTimer>

}/*end of TIMER2_voidFastPWM()*/
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <TIMER0_voidStartTimer>:
 * Description : Start TIMER0 counter register
 * Arguments   : void
 * return      : void
 **************************************************************************************/
 void TIMER0_voidStartTimer(void)
 {
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	 /*Start TCNT2 Reg counting by loading it's value*/
	 TCCR0A = TIMER0_uint8_tTCCR0A_Value;
     f6c:	e4 e4       	ldi	r30, 0x44	; 68
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 91 40 03 	lds	r24, 0x0340
     f74:	80 83       	st	Z, r24
	 TCCR0B = TIMER0_uint8_tTCCR0B_Value;
     f76:	e5 e4       	ldi	r30, 0x45	; 69
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 91 41 03 	lds	r24, 0x0341
     f7e:	80 83       	st	Z, r24

 }
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <TIMER0_voidStopTimer>:
 * Description : Stop TIMER0 counter register
 * Arguments   : void
 * return      : void
 **************************************************************************************/
 void TIMER0_voidStopTimer(void)
 {
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62

	 /*Stop TCNT0 Reg counting by loading zeros in CS00,CS01,CS02*/
 	 TCCR0B = TIMER0_uint8_tTCCR0B_Value & TIMER0_STOP_MASK;
     f8e:	e5 e4       	ldi	r30, 0x45	; 69
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 91 41 03 	lds	r24, 0x0341
     f96:	88 7f       	andi	r24, 0xF8	; 248
     f98:	80 83       	st	Z, r24


 }
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <TIMER0_voidInitializeTIMER0>:
 * Description : Initialize TIMER0 with pre configured values in cofig file
 * Arguments   : void
 * return      : void
 ***********************************************************************************/
 void TIMER0_voidInitializeTIMER0(void)
 {
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	0f 92       	push	r0
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	 TCNT0=0;
     faa:	e6 e4       	ldi	r30, 0x46	; 70
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	10 82       	st	Z, r1

	/*TCCR2B Prescaler value is stored temporarily in TIMER0_uint8_tTCCR0B_Value variable*/
	/*Initialize TCCR2B_ value*/
	/*Reset first 3 BITS*/
	TIMER0_uint8_tTCCR0B_Value &= TIMER0_TCCR0B_MASK;
     fb0:	80 91 41 03 	lds	r24, 0x0341
     fb4:	88 7f       	andi	r24, 0xF8	; 248
     fb6:	80 93 41 03 	sts	0x0341, r24


	/*Mask Prescaler value*/
	TIMER0_uint8_tTCCR0B_Value |= TIMER0_PRESCALER;
     fba:	80 91 41 03 	lds	r24, 0x0341
     fbe:	85 60       	ori	r24, 0x05	; 5
     fc0:	80 93 41 03 	sts	0x0341, r24


	/*====================================================================
	 * calculate Prescaler value that will be used later in equations
	 *====================================================================*/
	TIMER0_u16Prescaler = 1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	90 93 27 03 	sts	0x0327, r25
     fcc:	80 93 26 03 	sts	0x0326, r24
		TIMER0_u16Prescaler = 8;

	#elif (TIMER0_PRESCALER>Prescaller_8 && TIMER0_PRESCALER<=Prescaller_1024)

		/*caclulate prescaler = 2^(2*Prescaller)*/
		for (uint8_t i=0;i<(TIMER0_PRESCALER*2);i++)
     fd0:	19 82       	std	Y+1, r1	; 0x01
     fd2:	0d c0       	rjmp	.+26     	; 0xfee <TIMER0_voidInitializeTIMER0+0x4e>
		{
			TIMER0_u16Prescaler *= 2;
     fd4:	80 91 26 03 	lds	r24, 0x0326
     fd8:	90 91 27 03 	lds	r25, 0x0327
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	90 93 27 03 	sts	0x0327, r25
     fe4:	80 93 26 03 	sts	0x0326, r24
		TIMER0_u16Prescaler = 8;

	#elif (TIMER0_PRESCALER>Prescaller_8 && TIMER0_PRESCALER<=Prescaller_1024)

		/*caclulate prescaler = 2^(2*Prescaller)*/
		for (uint8_t i=0;i<(TIMER0_PRESCALER*2);i++)
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	8a 30       	cpi	r24, 0x0A	; 10
     ff2:	80 f3       	brcs	.-32     	; 0xfd4 <TIMER0_voidInitializeTIMER0+0x34>
		CLEAR_BIT(TIMER0_uint8_tTCCR0B_Value,TIMER0_WGM22);

	#elif (TIMER0_MODE==TIMER0_FAST_PWM_MODE)

		/*Choose Fast PWM mode*/
		SET_BIT(TIMER0_uint8_tTCCR0A_Value,TIMER0_WGM00);
     ff4:	80 91 40 03 	lds	r24, 0x0340
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	80 93 40 03 	sts	0x0340, r24
		SET_BIT(TIMER0_uint8_tTCCR0A_Value,TIMER0_WGM01);
     ffe:	80 91 40 03 	lds	r24, 0x0340
    1002:	82 60       	ori	r24, 0x02	; 2
    1004:	80 93 40 03 	sts	0x0340, r24
		SET_BIT(TIMER0_uint8_tTCCR0B_Value,TIMER0_WGM02);
    1008:	80 91 41 03 	lds	r24, 0x0341
    100c:	88 60       	ori	r24, 0x08	; 8
    100e:	80 93 41 03 	sts	0x0341, r24
		//SET_BIT(DDRB_OCA0,7);
		OCR0A = TIMER0_OCR0A_VALUE;
    1012:	e7 e4       	ldi	r30, 0x47	; 71
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	8b e9       	ldi	r24, 0x9B	; 155
    1018:	80 83       	st	Z, r24
#if TIMER0_ChannalB
		SET_BIT(DDRG_OCB0,5);
    101a:	a3 e3       	ldi	r26, 0x33	; 51
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e3       	ldi	r30, 0x33	; 51
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 62       	ori	r24, 0x20	; 32
    1026:	8c 93       	st	X, r24
	#endif


	/*Choose OC0A, OC0B Pin Mode*/
	/*mask COM.A0,COM0A1,COM0B0,COM0B1 bits with zeros*/
	TIMER0_uint8_tTCCR0A_Value &= TIMER0_COM_MASK;
    1028:	80 91 40 03 	lds	r24, 0x0340
    102c:	8f 70       	andi	r24, 0x0F	; 15
    102e:	80 93 40 03 	sts	0x0340, r24
	/*Put mode in COM2A0,COM2A1 bits*/
	TIMER0_uint8_tTCCR0A_Value |= (TIMER0_OC0A_MODE<<6) ;
    1032:	80 91 40 03 	lds	r24, 0x0340
    1036:	80 68       	ori	r24, 0x80	; 128
    1038:	80 93 40 03 	sts	0x0340, r24
	/*Put mode in COM2B0,COM2B1 bits*/
	TIMER0_uint8_tTCCR0A_Value |= (TIMER0_OC0B_MODE<<4) ;
    103c:	80 91 40 03 	lds	r24, 0x0340
    1040:	80 62       	ori	r24, 0x20	; 32
    1042:	80 93 40 03 	sts	0x0340, r24



 }/*TIMER0_voidInitializeTIMER0*/
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <TIMER0_voidFastPWM>:
 * Description : output Fast PWM on OC0 pin with duty cycle of Copy_uint8_tDutyCycle
 * Arguments   : DutyCycle: determine PWM duty cycle from 0 to 100
 * return      : void
 */
 void TIMER0_voidFastPWM(uint8_t Copy_uint8_tDutyCycle)
  {
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01
// 		 //OCR0A = (Copy_uint8_tDutyCycle*TIMER0_REG_CAPACITY)/100;
// 	 }
 	 //else if(channel == Channel_B){
 		 /*configure PWM Duty Cycle*/
 		 //OCR0B = (Copy_uint8_tDutyCycle*TIMER0_OCR0A_VALUE)/100;
 		OCR0B = Copy_uint8_tDutyCycle;
    105a:	e8 e4       	ldi	r30, 0x48	; 72
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	80 83       	st	Z, r24
 	 //}else return;
 	 /*Start PWM*/
 	 TIMER0_voidStartTimer();
    1062:	0e 94 b2 07 	call	0xf64	; 0xf64 <TIMER0_voidStartTimer>

  }/*end of TIMER0_voidFastPWM()*/
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <pin_init>:
 */

#include "DIO.h"


void pin_init(PIN_Config_t * Pin) {
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <pin_init+0x6>
    1074:	0f 92       	push	r0
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01

	switch(Pin -> port){
    107e:	e9 81       	ldd	r30, Y+1	; 0x01
    1080:	fa 81       	ldd	r31, Y+2	; 0x02
    1082:	83 81       	ldd	r24, Z+3	; 0x03
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3c 83       	std	Y+4, r19	; 0x04
    108a:	2b 83       	std	Y+3, r18	; 0x03
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	85 30       	cpi	r24, 0x05	; 5
    1092:	91 05       	cpc	r25, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <pin_init+0x2a>
    1096:	47 c1       	rjmp	.+654    	; 0x1326 <pin_init+0x2b8>
    1098:	2b 81       	ldd	r18, Y+3	; 0x03
    109a:	3c 81       	ldd	r19, Y+4	; 0x04
    109c:	26 30       	cpi	r18, 0x06	; 6
    109e:	31 05       	cpc	r19, r1
    10a0:	1c f5       	brge	.+70     	; 0x10e8 <pin_init+0x7a>
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <pin_init+0x40>
    10ac:	a6 c0       	rjmp	.+332    	; 0x11fa <pin_init+0x18c>
    10ae:	2b 81       	ldd	r18, Y+3	; 0x03
    10b0:	3c 81       	ldd	r19, Y+4	; 0x04
    10b2:	23 30       	cpi	r18, 0x03	; 3
    10b4:	31 05       	cpc	r19, r1
    10b6:	5c f4       	brge	.+22     	; 0x10ce <pin_init+0x60>
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	c9 f1       	breq	.+114    	; 0x1132 <pin_init+0xc4>
    10c0:	2b 81       	ldd	r18, Y+3	; 0x03
    10c2:	3c 81       	ldd	r19, Y+4	; 0x04
    10c4:	21 30       	cpi	r18, 0x01	; 1
    10c6:	31 05       	cpc	r19, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <pin_init+0x5e>
    10ca:	65 c0       	rjmp	.+202    	; 0x1196 <pin_init+0x128>
    10cc:	57 c2       	rjmp	.+1198   	; 0x157c <pin_init+0x50e>
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	91 05       	cpc	r25, r1
    10d6:	09 f4       	brne	.+2      	; 0x10da <pin_init+0x6c>
    10d8:	c2 c0       	rjmp	.+388    	; 0x125e <pin_init+0x1f0>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	24 30       	cpi	r18, 0x04	; 4
    10e0:	31 05       	cpc	r19, r1
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <pin_init+0x78>
    10e4:	ee c0       	rjmp	.+476    	; 0x12c2 <pin_init+0x254>
    10e6:	4a c2       	rjmp	.+1172   	; 0x157c <pin_init+0x50e>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	88 30       	cpi	r24, 0x08	; 8
    10ee:	91 05       	cpc	r25, r1
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <pin_init+0x86>
    10f2:	af c1       	rjmp	.+862    	; 0x1452 <pin_init+0x3e4>
    10f4:	2b 81       	ldd	r18, Y+3	; 0x03
    10f6:	3c 81       	ldd	r19, Y+4	; 0x04
    10f8:	29 30       	cpi	r18, 0x09	; 9
    10fa:	31 05       	cpc	r19, r1
    10fc:	6c f4       	brge	.+26     	; 0x1118 <pin_init+0xaa>
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	86 30       	cpi	r24, 0x06	; 6
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <pin_init+0x9c>
    1108:	40 c1       	rjmp	.+640    	; 0x138a <pin_init+0x31c>
    110a:	2b 81       	ldd	r18, Y+3	; 0x03
    110c:	3c 81       	ldd	r19, Y+4	; 0x04
    110e:	27 30       	cpi	r18, 0x07	; 7
    1110:	31 05       	cpc	r19, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <pin_init+0xa8>
    1114:	6c c1       	rjmp	.+728    	; 0x13ee <pin_init+0x380>
    1116:	32 c2       	rjmp	.+1124   	; 0x157c <pin_init+0x50e>
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	89 30       	cpi	r24, 0x09	; 9
    111e:	91 05       	cpc	r25, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <pin_init+0xb6>
    1122:	c9 c1       	rjmp	.+914    	; 0x14b6 <pin_init+0x448>
    1124:	2b 81       	ldd	r18, Y+3	; 0x03
    1126:	3c 81       	ldd	r19, Y+4	; 0x04
    1128:	2a 30       	cpi	r18, 0x0A	; 10
    112a:	31 05       	cpc	r19, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <pin_init+0xc2>
    112e:	f5 c1       	rjmp	.+1002   	; 0x151a <pin_init+0x4ac>
    1130:	25 c2       	rjmp	.+1098   	; 0x157c <pin_init+0x50e>
	case A:
		if(Pin->direction){
    1132:	e9 81       	ldd	r30, Y+1	; 0x01
    1134:	fa 81       	ldd	r31, Y+2	; 0x02
    1136:	80 81       	ld	r24, Z
    1138:	88 23       	and	r24, r24
    113a:	b1 f0       	breq	.+44     	; 0x1168 <pin_init+0xfa>
			SET_BIT(DIR_A, Pin->pin_num);
    113c:	a1 e2       	ldi	r26, 0x21	; 33
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e1 e2       	ldi	r30, 0x21	; 33
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	81 81       	ldd	r24, Z+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <pin_init+0xf0>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <pin_init+0xec>
    1162:	84 2b       	or	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	0a c2       	rjmp	.+1044   	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_A, Pin->pin_num);
    1168:	a1 e2       	ldi	r26, 0x21	; 33
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e1 e2       	ldi	r30, 0x21	; 33
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	e9 81       	ldd	r30, Y+1	; 0x01
    1176:	fa 81       	ldd	r31, Y+2	; 0x02
    1178:	81 81       	ldd	r24, Z+1	; 0x01
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <pin_init+0x11c>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <pin_init+0x118>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	f3 c1       	rjmp	.+998    	; 0x157c <pin_init+0x50e>
		}
		break;
	case B:
		if(Pin->direction){
    1196:	e9 81       	ldd	r30, Y+1	; 0x01
    1198:	fa 81       	ldd	r31, Y+2	; 0x02
    119a:	80 81       	ld	r24, Z
    119c:	88 23       	and	r24, r24
    119e:	b1 f0       	breq	.+44     	; 0x11cc <pin_init+0x15e>
			SET_BIT(DIR_B, Pin->pin_num);
    11a0:	a4 e2       	ldi	r26, 0x24	; 36
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e4 e2       	ldi	r30, 0x24	; 36
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	81 81       	ldd	r24, Z+1	; 0x01
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <pin_init+0x154>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <pin_init+0x150>
    11c6:	84 2b       	or	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	d8 c1       	rjmp	.+944    	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_B, Pin->pin_num);
    11cc:	a4 e2       	ldi	r26, 0x24	; 36
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e4 e2       	ldi	r30, 0x24	; 36
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	e9 81       	ldd	r30, Y+1	; 0x01
    11da:	fa 81       	ldd	r31, Y+2	; 0x02
    11dc:	81 81       	ldd	r24, Z+1	; 0x01
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <pin_init+0x180>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <pin_init+0x17c>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	c1 c1       	rjmp	.+898    	; 0x157c <pin_init+0x50e>
		}
		break;
		break;
	case C:
		if(Pin->direction){
    11fa:	e9 81       	ldd	r30, Y+1	; 0x01
    11fc:	fa 81       	ldd	r31, Y+2	; 0x02
    11fe:	80 81       	ld	r24, Z
    1200:	88 23       	and	r24, r24
    1202:	b1 f0       	breq	.+44     	; 0x1230 <pin_init+0x1c2>
			SET_BIT(DIR_C, Pin->pin_num);
    1204:	a7 e2       	ldi	r26, 0x27	; 39
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e7 e2       	ldi	r30, 0x27	; 39
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	e9 81       	ldd	r30, Y+1	; 0x01
    1212:	fa 81       	ldd	r31, Y+2	; 0x02
    1214:	81 81       	ldd	r24, Z+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <pin_init+0x1b8>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <pin_init+0x1b4>
    122a:	84 2b       	or	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	a6 c1       	rjmp	.+844    	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_C, Pin->pin_num);
    1230:	a7 e2       	ldi	r26, 0x27	; 39
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e7 e2       	ldi	r30, 0x27	; 39
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	e9 81       	ldd	r30, Y+1	; 0x01
    123e:	fa 81       	ldd	r31, Y+2	; 0x02
    1240:	81 81       	ldd	r24, Z+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <pin_init+0x1e4>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <pin_init+0x1e0>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	8f c1       	rjmp	.+798    	; 0x157c <pin_init+0x50e>
		}
		break;
	case D:
		if(Pin->direction){
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	fa 81       	ldd	r31, Y+2	; 0x02
    1262:	80 81       	ld	r24, Z
    1264:	88 23       	and	r24, r24
    1266:	b1 f0       	breq	.+44     	; 0x1294 <pin_init+0x226>
			SET_BIT(DIR_D, Pin->pin_num);
    1268:	aa e2       	ldi	r26, 0x2A	; 42
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ea e2       	ldi	r30, 0x2A	; 42
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	81 81       	ldd	r24, Z+1	; 0x01
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <pin_init+0x21c>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <pin_init+0x218>
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	74 c1       	rjmp	.+744    	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_D, Pin->pin_num);
    1294:	aa e2       	ldi	r26, 0x2A	; 42
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ea e2       	ldi	r30, 0x2A	; 42
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	e9 81       	ldd	r30, Y+1	; 0x01
    12a2:	fa 81       	ldd	r31, Y+2	; 0x02
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <pin_init+0x248>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <pin_init+0x244>
    12ba:	80 95       	com	r24
    12bc:	84 23       	and	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	5d c1       	rjmp	.+698    	; 0x157c <pin_init+0x50e>
		}
		break;
	case E:
		if(Pin->direction){
    12c2:	e9 81       	ldd	r30, Y+1	; 0x01
    12c4:	fa 81       	ldd	r31, Y+2	; 0x02
    12c6:	80 81       	ld	r24, Z
    12c8:	88 23       	and	r24, r24
    12ca:	b1 f0       	breq	.+44     	; 0x12f8 <pin_init+0x28a>
			SET_BIT(DIR_E, Pin->pin_num);
    12cc:	ad e2       	ldi	r26, 0x2D	; 45
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ed e2       	ldi	r30, 0x2D	; 45
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	81 81       	ldd	r24, Z+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <pin_init+0x280>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <pin_init+0x27c>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	42 c1       	rjmp	.+644    	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_E, Pin->pin_num);
    12f8:	ad e2       	ldi	r26, 0x2D	; 45
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ed e2       	ldi	r30, 0x2D	; 45
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	e9 81       	ldd	r30, Y+1	; 0x01
    1306:	fa 81       	ldd	r31, Y+2	; 0x02
    1308:	81 81       	ldd	r24, Z+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <pin_init+0x2ac>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <pin_init+0x2a8>
    131e:	80 95       	com	r24
    1320:	84 23       	and	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	2b c1       	rjmp	.+598    	; 0x157c <pin_init+0x50e>
		}
		break;
	case F:
		if(Pin->direction){
    1326:	e9 81       	ldd	r30, Y+1	; 0x01
    1328:	fa 81       	ldd	r31, Y+2	; 0x02
    132a:	80 81       	ld	r24, Z
    132c:	88 23       	and	r24, r24
    132e:	b1 f0       	breq	.+44     	; 0x135c <pin_init+0x2ee>
			SET_BIT(DIR_F, Pin->pin_num);
    1330:	a0 e3       	ldi	r26, 0x30	; 48
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e0 e3       	ldi	r30, 0x30	; 48
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	e9 81       	ldd	r30, Y+1	; 0x01
    133e:	fa 81       	ldd	r31, Y+2	; 0x02
    1340:	81 81       	ldd	r24, Z+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <pin_init+0x2e4>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <pin_init+0x2e0>
    1356:	84 2b       	or	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	10 c1       	rjmp	.+544    	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_F, Pin->pin_num);
    135c:	a0 e3       	ldi	r26, 0x30	; 48
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e0 e3       	ldi	r30, 0x30	; 48
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	e9 81       	ldd	r30, Y+1	; 0x01
    136a:	fa 81       	ldd	r31, Y+2	; 0x02
    136c:	81 81       	ldd	r24, Z+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <pin_init+0x310>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <pin_init+0x30c>
    1382:	80 95       	com	r24
    1384:	84 23       	and	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	f9 c0       	rjmp	.+498    	; 0x157c <pin_init+0x50e>
		}
		break;
	case G:
		if(Pin->direction){
    138a:	e9 81       	ldd	r30, Y+1	; 0x01
    138c:	fa 81       	ldd	r31, Y+2	; 0x02
    138e:	80 81       	ld	r24, Z
    1390:	88 23       	and	r24, r24
    1392:	b1 f0       	breq	.+44     	; 0x13c0 <pin_init+0x352>
			SET_BIT(DIR_G, Pin->pin_num);
    1394:	a3 e3       	ldi	r26, 0x33	; 51
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e3 e3       	ldi	r30, 0x33	; 51
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	e9 81       	ldd	r30, Y+1	; 0x01
    13a2:	fa 81       	ldd	r31, Y+2	; 0x02
    13a4:	81 81       	ldd	r24, Z+1	; 0x01
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <pin_init+0x348>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <pin_init+0x344>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	de c0       	rjmp	.+444    	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_G, Pin->pin_num);
    13c0:	a3 e3       	ldi	r26, 0x33	; 51
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e3 e3       	ldi	r30, 0x33	; 51
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	e9 81       	ldd	r30, Y+1	; 0x01
    13ce:	fa 81       	ldd	r31, Y+2	; 0x02
    13d0:	81 81       	ldd	r24, Z+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <pin_init+0x374>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <pin_init+0x370>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	c7 c0       	rjmp	.+398    	; 0x157c <pin_init+0x50e>
		}
		break;
	case H:
		if(Pin->direction){
    13ee:	e9 81       	ldd	r30, Y+1	; 0x01
    13f0:	fa 81       	ldd	r31, Y+2	; 0x02
    13f2:	80 81       	ld	r24, Z
    13f4:	88 23       	and	r24, r24
    13f6:	b1 f0       	breq	.+44     	; 0x1424 <pin_init+0x3b6>
			SET_BIT(DIR_H, Pin->pin_num);
    13f8:	a1 e0       	ldi	r26, 0x01	; 1
    13fa:	b1 e0       	ldi	r27, 0x01	; 1
    13fc:	e1 e0       	ldi	r30, 0x01	; 1
    13fe:	f1 e0       	ldi	r31, 0x01	; 1
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	e9 81       	ldd	r30, Y+1	; 0x01
    1406:	fa 81       	ldd	r31, Y+2	; 0x02
    1408:	81 81       	ldd	r24, Z+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <pin_init+0x3ac>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <pin_init+0x3a8>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	ac c0       	rjmp	.+344    	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_H, Pin->pin_num);
    1424:	a1 e0       	ldi	r26, 0x01	; 1
    1426:	b1 e0       	ldi	r27, 0x01	; 1
    1428:	e1 e0       	ldi	r30, 0x01	; 1
    142a:	f1 e0       	ldi	r31, 0x01	; 1
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	e9 81       	ldd	r30, Y+1	; 0x01
    1432:	fa 81       	ldd	r31, Y+2	; 0x02
    1434:	81 81       	ldd	r24, Z+1	; 0x01
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <pin_init+0x3d8>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <pin_init+0x3d4>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	95 c0       	rjmp	.+298    	; 0x157c <pin_init+0x50e>
		}
		break;
	case J:
		if(Pin->direction){
    1452:	e9 81       	ldd	r30, Y+1	; 0x01
    1454:	fa 81       	ldd	r31, Y+2	; 0x02
    1456:	80 81       	ld	r24, Z
    1458:	88 23       	and	r24, r24
    145a:	b1 f0       	breq	.+44     	; 0x1488 <pin_init+0x41a>
			SET_BIT(DIR_J, Pin->pin_num);
    145c:	a4 e0       	ldi	r26, 0x04	; 4
    145e:	b1 e0       	ldi	r27, 0x01	; 1
    1460:	e4 e0       	ldi	r30, 0x04	; 4
    1462:	f1 e0       	ldi	r31, 0x01	; 1
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	e9 81       	ldd	r30, Y+1	; 0x01
    146a:	fa 81       	ldd	r31, Y+2	; 0x02
    146c:	81 81       	ldd	r24, Z+1	; 0x01
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <pin_init+0x410>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <pin_init+0x40c>
    1482:	84 2b       	or	r24, r20
    1484:	8c 93       	st	X, r24
    1486:	7a c0       	rjmp	.+244    	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_J, Pin->pin_num);
    1488:	a4 e0       	ldi	r26, 0x04	; 4
    148a:	b1 e0       	ldi	r27, 0x01	; 1
    148c:	e4 e0       	ldi	r30, 0x04	; 4
    148e:	f1 e0       	ldi	r31, 0x01	; 1
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	81 81       	ldd	r24, Z+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <pin_init+0x43c>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <pin_init+0x438>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	63 c0       	rjmp	.+198    	; 0x157c <pin_init+0x50e>
		}
		break;
	case K:
		if(Pin->direction){
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	80 81       	ld	r24, Z
    14bc:	88 23       	and	r24, r24
    14be:	b1 f0       	breq	.+44     	; 0x14ec <pin_init+0x47e>
			SET_BIT(DIR_K, Pin->pin_num);
    14c0:	a7 e0       	ldi	r26, 0x07	; 7
    14c2:	b1 e0       	ldi	r27, 0x01	; 1
    14c4:	e7 e0       	ldi	r30, 0x07	; 7
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	e9 81       	ldd	r30, Y+1	; 0x01
    14ce:	fa 81       	ldd	r31, Y+2	; 0x02
    14d0:	81 81       	ldd	r24, Z+1	; 0x01
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <pin_init+0x474>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <pin_init+0x470>
    14e6:	84 2b       	or	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	48 c0       	rjmp	.+144    	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_K, Pin->pin_num);
    14ec:	a7 e0       	ldi	r26, 0x07	; 7
    14ee:	b1 e0       	ldi	r27, 0x01	; 1
    14f0:	e7 e0       	ldi	r30, 0x07	; 7
    14f2:	f1 e0       	ldi	r31, 0x01	; 1
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	e9 81       	ldd	r30, Y+1	; 0x01
    14fa:	fa 81       	ldd	r31, Y+2	; 0x02
    14fc:	81 81       	ldd	r24, Z+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <pin_init+0x4a0>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <pin_init+0x49c>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	31 c0       	rjmp	.+98     	; 0x157c <pin_init+0x50e>
		}
		break;
	case L:
		if(Pin->direction){
    151a:	e9 81       	ldd	r30, Y+1	; 0x01
    151c:	fa 81       	ldd	r31, Y+2	; 0x02
    151e:	80 81       	ld	r24, Z
    1520:	88 23       	and	r24, r24
    1522:	b1 f0       	breq	.+44     	; 0x1550 <pin_init+0x4e2>
			SET_BIT(DIR_L, Pin->pin_num);
    1524:	aa e0       	ldi	r26, 0x0A	; 10
    1526:	b1 e0       	ldi	r27, 0x01	; 1
    1528:	ea e0       	ldi	r30, 0x0A	; 10
    152a:	f1 e0       	ldi	r31, 0x01	; 1
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	81 81       	ldd	r24, Z+1	; 0x01
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <pin_init+0x4d8>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <pin_init+0x4d4>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	16 c0       	rjmp	.+44     	; 0x157c <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_L, Pin->pin_num);
    1550:	aa e0       	ldi	r26, 0x0A	; 10
    1552:	b1 e0       	ldi	r27, 0x01	; 1
    1554:	ea e0       	ldi	r30, 0x0A	; 10
    1556:	f1 e0       	ldi	r31, 0x01	; 1
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	e9 81       	ldd	r30, Y+1	; 0x01
    155e:	fa 81       	ldd	r31, Y+2	; 0x02
    1560:	81 81       	ldd	r24, Z+1	; 0x01
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <pin_init+0x504>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <pin_init+0x500>
    1576:	80 95       	com	r24
    1578:	84 23       	and	r24, r20
    157a:	8c 93       	st	X, r24
		}
		break;
	}
}
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <port_init>:

void port_init(PORT_Config_t * Port) {
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <port_init+0x6>
    1590:	0f 92       	push	r0
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01
	switch(Port -> port){
    159a:	e9 81       	ldd	r30, Y+1	; 0x01
    159c:	fa 81       	ldd	r31, Y+2	; 0x02
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	3c 83       	std	Y+4, r19	; 0x04
    15a6:	2b 83       	std	Y+3, r18	; 0x03
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	85 30       	cpi	r24, 0x05	; 5
    15ae:	91 05       	cpc	r25, r1
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <port_init+0x2a>
    15b2:	6f c0       	rjmp	.+222    	; 0x1692 <port_init+0x108>
    15b4:	2b 81       	ldd	r18, Y+3	; 0x03
    15b6:	3c 81       	ldd	r19, Y+4	; 0x04
    15b8:	26 30       	cpi	r18, 0x06	; 6
    15ba:	31 05       	cpc	r19, r1
    15bc:	14 f5       	brge	.+68     	; 0x1602 <port_init+0x78>
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	82 30       	cpi	r24, 0x02	; 2
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <port_init+0x40>
    15c8:	4f c0       	rjmp	.+158    	; 0x1668 <port_init+0xde>
    15ca:	2b 81       	ldd	r18, Y+3	; 0x03
    15cc:	3c 81       	ldd	r19, Y+4	; 0x04
    15ce:	23 30       	cpi	r18, 0x03	; 3
    15d0:	31 05       	cpc	r19, r1
    15d2:	54 f4       	brge	.+20     	; 0x15e8 <port_init+0x5e>
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	c1 f1       	breq	.+112    	; 0x164c <port_init+0xc2>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	21 30       	cpi	r18, 0x01	; 1
    15e2:	31 05       	cpc	r19, r1
    15e4:	d1 f1       	breq	.+116    	; 0x165a <port_init+0xd0>
    15e6:	7e c0       	rjmp	.+252    	; 0x16e4 <port_init+0x15a>
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <port_init+0x6a>
    15f2:	41 c0       	rjmp	.+130    	; 0x1676 <port_init+0xec>
    15f4:	2b 81       	ldd	r18, Y+3	; 0x03
    15f6:	3c 81       	ldd	r19, Y+4	; 0x04
    15f8:	24 30       	cpi	r18, 0x04	; 4
    15fa:	31 05       	cpc	r19, r1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <port_init+0x76>
    15fe:	42 c0       	rjmp	.+132    	; 0x1684 <port_init+0xfa>
    1600:	71 c0       	rjmp	.+226    	; 0x16e4 <port_init+0x15a>
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	88 30       	cpi	r24, 0x08	; 8
    1608:	91 05       	cpc	r25, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <port_init+0x84>
    160c:	57 c0       	rjmp	.+174    	; 0x16bc <port_init+0x132>
    160e:	2b 81       	ldd	r18, Y+3	; 0x03
    1610:	3c 81       	ldd	r19, Y+4	; 0x04
    1612:	29 30       	cpi	r18, 0x09	; 9
    1614:	31 05       	cpc	r19, r1
    1616:	6c f4       	brge	.+26     	; 0x1632 <port_init+0xa8>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	86 30       	cpi	r24, 0x06	; 6
    161e:	91 05       	cpc	r25, r1
    1620:	09 f4       	brne	.+2      	; 0x1624 <port_init+0x9a>
    1622:	3e c0       	rjmp	.+124    	; 0x16a0 <port_init+0x116>
    1624:	2b 81       	ldd	r18, Y+3	; 0x03
    1626:	3c 81       	ldd	r19, Y+4	; 0x04
    1628:	27 30       	cpi	r18, 0x07	; 7
    162a:	31 05       	cpc	r19, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <port_init+0xa6>
    162e:	3f c0       	rjmp	.+126    	; 0x16ae <port_init+0x124>
    1630:	59 c0       	rjmp	.+178    	; 0x16e4 <port_init+0x15a>
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	89 30       	cpi	r24, 0x09	; 9
    1638:	91 05       	cpc	r25, r1
    163a:	09 f4       	brne	.+2      	; 0x163e <port_init+0xb4>
    163c:	46 c0       	rjmp	.+140    	; 0x16ca <port_init+0x140>
    163e:	2b 81       	ldd	r18, Y+3	; 0x03
    1640:	3c 81       	ldd	r19, Y+4	; 0x04
    1642:	2a 30       	cpi	r18, 0x0A	; 10
    1644:	31 05       	cpc	r19, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <port_init+0xc0>
    1648:	47 c0       	rjmp	.+142    	; 0x16d8 <port_init+0x14e>
    164a:	4c c0       	rjmp	.+152    	; 0x16e4 <port_init+0x15a>
		case A:
			DIR_A = Port->direction;
    164c:	e1 e2       	ldi	r30, 0x21	; 33
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	a9 81       	ldd	r26, Y+1	; 0x01
    1652:	ba 81       	ldd	r27, Y+2	; 0x02
    1654:	8c 91       	ld	r24, X
    1656:	80 83       	st	Z, r24
    1658:	45 c0       	rjmp	.+138    	; 0x16e4 <port_init+0x15a>
			break;
		case B:
			DIR_B = Port->direction;
    165a:	e4 e2       	ldi	r30, 0x24	; 36
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	a9 81       	ldd	r26, Y+1	; 0x01
    1660:	ba 81       	ldd	r27, Y+2	; 0x02
    1662:	8c 91       	ld	r24, X
    1664:	80 83       	st	Z, r24
    1666:	3e c0       	rjmp	.+124    	; 0x16e4 <port_init+0x15a>
			break;
		case C:
			DIR_C = Port->direction;
    1668:	e7 e2       	ldi	r30, 0x27	; 39
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	a9 81       	ldd	r26, Y+1	; 0x01
    166e:	ba 81       	ldd	r27, Y+2	; 0x02
    1670:	8c 91       	ld	r24, X
    1672:	80 83       	st	Z, r24
    1674:	37 c0       	rjmp	.+110    	; 0x16e4 <port_init+0x15a>
			break;
		case D:
			DIR_D = Port->direction;
    1676:	ea e2       	ldi	r30, 0x2A	; 42
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	a9 81       	ldd	r26, Y+1	; 0x01
    167c:	ba 81       	ldd	r27, Y+2	; 0x02
    167e:	8c 91       	ld	r24, X
    1680:	80 83       	st	Z, r24
    1682:	30 c0       	rjmp	.+96     	; 0x16e4 <port_init+0x15a>
			break;
		case E:
			DIR_E = Port->direction;
    1684:	ed e2       	ldi	r30, 0x2D	; 45
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	a9 81       	ldd	r26, Y+1	; 0x01
    168a:	ba 81       	ldd	r27, Y+2	; 0x02
    168c:	8c 91       	ld	r24, X
    168e:	80 83       	st	Z, r24
    1690:	29 c0       	rjmp	.+82     	; 0x16e4 <port_init+0x15a>
			break;
		case F:
			DIR_F = Port->direction;
    1692:	e0 e3       	ldi	r30, 0x30	; 48
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	a9 81       	ldd	r26, Y+1	; 0x01
    1698:	ba 81       	ldd	r27, Y+2	; 0x02
    169a:	8c 91       	ld	r24, X
    169c:	80 83       	st	Z, r24
    169e:	22 c0       	rjmp	.+68     	; 0x16e4 <port_init+0x15a>
			break;
		case G:
			DIR_G = Port->direction;
    16a0:	e3 e3       	ldi	r30, 0x33	; 51
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	a9 81       	ldd	r26, Y+1	; 0x01
    16a6:	ba 81       	ldd	r27, Y+2	; 0x02
    16a8:	8c 91       	ld	r24, X
    16aa:	80 83       	st	Z, r24
    16ac:	1b c0       	rjmp	.+54     	; 0x16e4 <port_init+0x15a>
			break;
		case H:
			DIR_H = Port->direction;
    16ae:	e1 e0       	ldi	r30, 0x01	; 1
    16b0:	f1 e0       	ldi	r31, 0x01	; 1
    16b2:	a9 81       	ldd	r26, Y+1	; 0x01
    16b4:	ba 81       	ldd	r27, Y+2	; 0x02
    16b6:	8c 91       	ld	r24, X
    16b8:	80 83       	st	Z, r24
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <port_init+0x15a>
			break;
		case J:
			DIR_J = Port->direction;
    16bc:	e4 e0       	ldi	r30, 0x04	; 4
    16be:	f1 e0       	ldi	r31, 0x01	; 1
    16c0:	a9 81       	ldd	r26, Y+1	; 0x01
    16c2:	ba 81       	ldd	r27, Y+2	; 0x02
    16c4:	8c 91       	ld	r24, X
    16c6:	80 83       	st	Z, r24
    16c8:	0d c0       	rjmp	.+26     	; 0x16e4 <port_init+0x15a>
			break;
		case K:
			DIR_K = Port->direction;
    16ca:	e7 e0       	ldi	r30, 0x07	; 7
    16cc:	f1 e0       	ldi	r31, 0x01	; 1
    16ce:	a9 81       	ldd	r26, Y+1	; 0x01
    16d0:	ba 81       	ldd	r27, Y+2	; 0x02
    16d2:	8c 91       	ld	r24, X
    16d4:	80 83       	st	Z, r24
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <port_init+0x15a>
			break;
		case L:
			DIR_L = Port->direction;
    16d8:	ea e0       	ldi	r30, 0x0A	; 10
    16da:	f1 e0       	ldi	r31, 0x01	; 1
    16dc:	a9 81       	ldd	r26, Y+1	; 0x01
    16de:	ba 81       	ldd	r27, Y+2	; 0x02
    16e0:	8c 91       	ld	r24, X
    16e2:	80 83       	st	Z, r24
			break;
		}
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <pin_read>:

uint8_t pin_read(PIN_Config_t * Pin) {
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <pin_read+0x6>
    16f8:	0f 92       	push	r0
    16fa:	0f 92       	push	r0
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
	switch(Pin -> port){
    1704:	e9 81       	ldd	r30, Y+1	; 0x01
    1706:	fa 81       	ldd	r31, Y+2	; 0x02
    1708:	83 81       	ldd	r24, Z+3	; 0x03
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3d 83       	std	Y+5, r19	; 0x05
    1710:	2c 83       	std	Y+4, r18	; 0x04
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	85 30       	cpi	r24, 0x05	; 5
    1718:	91 05       	cpc	r25, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <pin_read+0x2c>
    171c:	b1 c0       	rjmp	.+354    	; 0x1880 <pin_read+0x18e>
    171e:	2c 81       	ldd	r18, Y+4	; 0x04
    1720:	3d 81       	ldd	r19, Y+5	; 0x05
    1722:	26 30       	cpi	r18, 0x06	; 6
    1724:	31 05       	cpc	r19, r1
    1726:	1c f5       	brge	.+70     	; 0x176e <pin_read+0x7c>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	82 30       	cpi	r24, 0x02	; 2
    172e:	91 05       	cpc	r25, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <pin_read+0x42>
    1732:	6a c0       	rjmp	.+212    	; 0x1808 <pin_read+0x116>
    1734:	2c 81       	ldd	r18, Y+4	; 0x04
    1736:	3d 81       	ldd	r19, Y+5	; 0x05
    1738:	23 30       	cpi	r18, 0x03	; 3
    173a:	31 05       	cpc	r19, r1
    173c:	5c f4       	brge	.+22     	; 0x1754 <pin_read+0x62>
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	c9 f1       	breq	.+114    	; 0x17b8 <pin_read+0xc6>
    1746:	2c 81       	ldd	r18, Y+4	; 0x04
    1748:	3d 81       	ldd	r19, Y+5	; 0x05
    174a:	21 30       	cpi	r18, 0x01	; 1
    174c:	31 05       	cpc	r19, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <pin_read+0x60>
    1750:	47 c0       	rjmp	.+142    	; 0x17e0 <pin_read+0xee>
    1752:	0e c1       	rjmp	.+540    	; 0x1970 <pin_read+0x27e>
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	9d 81       	ldd	r25, Y+5	; 0x05
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <pin_read+0x6e>
    175e:	68 c0       	rjmp	.+208    	; 0x1830 <pin_read+0x13e>
    1760:	2c 81       	ldd	r18, Y+4	; 0x04
    1762:	3d 81       	ldd	r19, Y+5	; 0x05
    1764:	24 30       	cpi	r18, 0x04	; 4
    1766:	31 05       	cpc	r19, r1
    1768:	09 f4       	brne	.+2      	; 0x176c <pin_read+0x7a>
    176a:	76 c0       	rjmp	.+236    	; 0x1858 <pin_read+0x166>
    176c:	01 c1       	rjmp	.+514    	; 0x1970 <pin_read+0x27e>
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	88 30       	cpi	r24, 0x08	; 8
    1774:	91 05       	cpc	r25, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <pin_read+0x88>
    1778:	bf c0       	rjmp	.+382    	; 0x18f8 <pin_read+0x206>
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	29 30       	cpi	r18, 0x09	; 9
    1780:	31 05       	cpc	r19, r1
    1782:	6c f4       	brge	.+26     	; 0x179e <pin_read+0xac>
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	86 30       	cpi	r24, 0x06	; 6
    178a:	91 05       	cpc	r25, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <pin_read+0x9e>
    178e:	8c c0       	rjmp	.+280    	; 0x18a8 <pin_read+0x1b6>
    1790:	2c 81       	ldd	r18, Y+4	; 0x04
    1792:	3d 81       	ldd	r19, Y+5	; 0x05
    1794:	27 30       	cpi	r18, 0x07	; 7
    1796:	31 05       	cpc	r19, r1
    1798:	09 f4       	brne	.+2      	; 0x179c <pin_read+0xaa>
    179a:	9a c0       	rjmp	.+308    	; 0x18d0 <pin_read+0x1de>
    179c:	e9 c0       	rjmp	.+466    	; 0x1970 <pin_read+0x27e>
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	9d 81       	ldd	r25, Y+5	; 0x05
    17a2:	89 30       	cpi	r24, 0x09	; 9
    17a4:	91 05       	cpc	r25, r1
    17a6:	09 f4       	brne	.+2      	; 0x17aa <pin_read+0xb8>
    17a8:	bb c0       	rjmp	.+374    	; 0x1920 <pin_read+0x22e>
    17aa:	2c 81       	ldd	r18, Y+4	; 0x04
    17ac:	3d 81       	ldd	r19, Y+5	; 0x05
    17ae:	2a 30       	cpi	r18, 0x0A	; 10
    17b0:	31 05       	cpc	r19, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <pin_read+0xc4>
    17b4:	c9 c0       	rjmp	.+402    	; 0x1948 <pin_read+0x256>
    17b6:	dc c0       	rjmp	.+440    	; 0x1970 <pin_read+0x27e>
	case A:
		return BIT_IS_SET(BASE_A, Pin -> pin_num);
    17b8:	e2 e2       	ldi	r30, 0x22	; 34
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	e9 81       	ldd	r30, Y+1	; 0x01
    17c2:	fa 81       	ldd	r31, Y+2	; 0x02
    17c4:	81 81       	ldd	r24, Z+1	; 0x01
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <pin_read+0xe4>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <pin_read+0xe0>
    17da:	84 23       	and	r24, r20
    17dc:	8b 83       	std	Y+3, r24	; 0x03
    17de:	ca c0       	rjmp	.+404    	; 0x1974 <pin_read+0x282>
	case B:
		return BIT_IS_SET(BASE_B, Pin -> pin_num);
    17e0:	e5 e2       	ldi	r30, 0x25	; 37
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ea:	fa 81       	ldd	r31, Y+2	; 0x02
    17ec:	81 81       	ldd	r24, Z+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <pin_read+0x10c>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <pin_read+0x108>
    1802:	84 23       	and	r24, r20
    1804:	8b 83       	std	Y+3, r24	; 0x03
    1806:	b6 c0       	rjmp	.+364    	; 0x1974 <pin_read+0x282>
	case C:
		return BIT_IS_SET(BASE_C, Pin -> pin_num);
    1808:	e8 e2       	ldi	r30, 0x28	; 40
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	e9 81       	ldd	r30, Y+1	; 0x01
    1812:	fa 81       	ldd	r31, Y+2	; 0x02
    1814:	81 81       	ldd	r24, Z+1	; 0x01
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <pin_read+0x134>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <pin_read+0x130>
    182a:	84 23       	and	r24, r20
    182c:	8b 83       	std	Y+3, r24	; 0x03
    182e:	a2 c0       	rjmp	.+324    	; 0x1974 <pin_read+0x282>
	case D:
		return BIT_IS_SET(BASE_D, Pin -> pin_num);
    1830:	eb e2       	ldi	r30, 0x2B	; 43
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	e9 81       	ldd	r30, Y+1	; 0x01
    183a:	fa 81       	ldd	r31, Y+2	; 0x02
    183c:	81 81       	ldd	r24, Z+1	; 0x01
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <pin_read+0x15c>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <pin_read+0x158>
    1852:	84 23       	and	r24, r20
    1854:	8b 83       	std	Y+3, r24	; 0x03
    1856:	8e c0       	rjmp	.+284    	; 0x1974 <pin_read+0x282>
	case E:
		return BIT_IS_SET(BASE_E, Pin -> pin_num);
    1858:	ee e2       	ldi	r30, 0x2E	; 46
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	e9 81       	ldd	r30, Y+1	; 0x01
    1862:	fa 81       	ldd	r31, Y+2	; 0x02
    1864:	81 81       	ldd	r24, Z+1	; 0x01
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <pin_read+0x184>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <pin_read+0x180>
    187a:	84 23       	and	r24, r20
    187c:	8b 83       	std	Y+3, r24	; 0x03
    187e:	7a c0       	rjmp	.+244    	; 0x1974 <pin_read+0x282>
	case F:
		return BIT_IS_SET(BASE_F, Pin -> pin_num);
    1880:	e1 e3       	ldi	r30, 0x31	; 49
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	e9 81       	ldd	r30, Y+1	; 0x01
    188a:	fa 81       	ldd	r31, Y+2	; 0x02
    188c:	81 81       	ldd	r24, Z+1	; 0x01
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <pin_read+0x1ac>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <pin_read+0x1a8>
    18a2:	84 23       	and	r24, r20
    18a4:	8b 83       	std	Y+3, r24	; 0x03
    18a6:	66 c0       	rjmp	.+204    	; 0x1974 <pin_read+0x282>
	case G:
		return BIT_IS_SET(BASE_G, Pin -> pin_num);
    18a8:	e4 e3       	ldi	r30, 0x34	; 52
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	e9 81       	ldd	r30, Y+1	; 0x01
    18b2:	fa 81       	ldd	r31, Y+2	; 0x02
    18b4:	81 81       	ldd	r24, Z+1	; 0x01
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <pin_read+0x1d4>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <pin_read+0x1d0>
    18ca:	84 23       	and	r24, r20
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	52 c0       	rjmp	.+164    	; 0x1974 <pin_read+0x282>
	case H:
		return BIT_IS_SET(BASE_H, Pin -> pin_num);
    18d0:	e2 e0       	ldi	r30, 0x02	; 2
    18d2:	f1 e0       	ldi	r31, 0x01	; 1
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	e9 81       	ldd	r30, Y+1	; 0x01
    18da:	fa 81       	ldd	r31, Y+2	; 0x02
    18dc:	81 81       	ldd	r24, Z+1	; 0x01
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <pin_read+0x1fc>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <pin_read+0x1f8>
    18f2:	84 23       	and	r24, r20
    18f4:	8b 83       	std	Y+3, r24	; 0x03
    18f6:	3e c0       	rjmp	.+124    	; 0x1974 <pin_read+0x282>
	case J:
		return BIT_IS_SET(BASE_J, Pin -> pin_num);
    18f8:	e5 e0       	ldi	r30, 0x05	; 5
    18fa:	f1 e0       	ldi	r31, 0x01	; 1
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	e9 81       	ldd	r30, Y+1	; 0x01
    1902:	fa 81       	ldd	r31, Y+2	; 0x02
    1904:	81 81       	ldd	r24, Z+1	; 0x01
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <pin_read+0x224>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <pin_read+0x220>
    191a:	84 23       	and	r24, r20
    191c:	8b 83       	std	Y+3, r24	; 0x03
    191e:	2a c0       	rjmp	.+84     	; 0x1974 <pin_read+0x282>
	case K:
		return BIT_IS_SET(BASE_K, Pin -> pin_num);
    1920:	e8 e0       	ldi	r30, 0x08	; 8
    1922:	f1 e0       	ldi	r31, 0x01	; 1
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	e9 81       	ldd	r30, Y+1	; 0x01
    192a:	fa 81       	ldd	r31, Y+2	; 0x02
    192c:	81 81       	ldd	r24, Z+1	; 0x01
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <pin_read+0x24c>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <pin_read+0x248>
    1942:	84 23       	and	r24, r20
    1944:	8b 83       	std	Y+3, r24	; 0x03
    1946:	16 c0       	rjmp	.+44     	; 0x1974 <pin_read+0x282>
	case L:
		return BIT_IS_SET(BASE_L, Pin -> pin_num);
    1948:	eb e0       	ldi	r30, 0x0B	; 11
    194a:	f1 e0       	ldi	r31, 0x01	; 1
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	81 81       	ldd	r24, Z+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <pin_read+0x274>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <pin_read+0x270>
    196a:	84 23       	and	r24, r20
    196c:	8b 83       	std	Y+3, r24	; 0x03
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <pin_read+0x282>
	}
	return 1;
    1970:	31 e0       	ldi	r19, 0x01	; 1
    1972:	3b 83       	std	Y+3, r19	; 0x03
    1974:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <Write_Pin>:
void Write_Pin(PORT_t port, uint8_t pin, uint8_t Data){
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	00 d0       	rcall	.+0      	; 0x198c <Write_Pin+0x6>
    198c:	0f 92       	push	r0
    198e:	0f 92       	push	r0
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	6a 83       	std	Y+2, r22	; 0x02
    1998:	4b 83       	std	Y+3, r20	; 0x03
	switch(port){
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3d 83       	std	Y+5, r19	; 0x05
    19a2:	2c 83       	std	Y+4, r18	; 0x04
    19a4:	6c 81       	ldd	r22, Y+4	; 0x04
    19a6:	7d 81       	ldd	r23, Y+5	; 0x05
    19a8:	65 30       	cpi	r22, 0x05	; 5
    19aa:	71 05       	cpc	r23, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <Write_Pin+0x2a>
    19ae:	06 c1       	rjmp	.+524    	; 0x1bbc <Write_Pin+0x236>
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	86 30       	cpi	r24, 0x06	; 6
    19b6:	91 05       	cpc	r25, r1
    19b8:	1c f5       	brge	.+70     	; 0x1a00 <Write_Pin+0x7a>
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	22 30       	cpi	r18, 0x02	; 2
    19c0:	31 05       	cpc	r19, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <Write_Pin+0x40>
    19c4:	8c c0       	rjmp	.+280    	; 0x1ade <Write_Pin+0x158>
    19c6:	6c 81       	ldd	r22, Y+4	; 0x04
    19c8:	7d 81       	ldd	r23, Y+5	; 0x05
    19ca:	63 30       	cpi	r22, 0x03	; 3
    19cc:	71 05       	cpc	r23, r1
    19ce:	5c f4       	brge	.+22     	; 0x19e6 <Write_Pin+0x60>
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	9d 81       	ldd	r25, Y+5	; 0x05
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	c9 f1       	breq	.+114    	; 0x1a4a <Write_Pin+0xc4>
    19d8:	2c 81       	ldd	r18, Y+4	; 0x04
    19da:	3d 81       	ldd	r19, Y+5	; 0x05
    19dc:	21 30       	cpi	r18, 0x01	; 1
    19de:	31 05       	cpc	r19, r1
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <Write_Pin+0x5e>
    19e2:	58 c0       	rjmp	.+176    	; 0x1a94 <Write_Pin+0x10e>
    19e4:	c8 c1       	rjmp	.+912    	; 0x1d76 <Write_Pin+0x3f0>
    19e6:	6c 81       	ldd	r22, Y+4	; 0x04
    19e8:	7d 81       	ldd	r23, Y+5	; 0x05
    19ea:	63 30       	cpi	r22, 0x03	; 3
    19ec:	71 05       	cpc	r23, r1
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <Write_Pin+0x6c>
    19f0:	9b c0       	rjmp	.+310    	; 0x1b28 <Write_Pin+0x1a2>
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	9d 81       	ldd	r25, Y+5	; 0x05
    19f6:	84 30       	cpi	r24, 0x04	; 4
    19f8:	91 05       	cpc	r25, r1
    19fa:	09 f4       	brne	.+2      	; 0x19fe <Write_Pin+0x78>
    19fc:	ba c0       	rjmp	.+372    	; 0x1b72 <Write_Pin+0x1ec>
    19fe:	bb c1       	rjmp	.+886    	; 0x1d76 <Write_Pin+0x3f0>
    1a00:	2c 81       	ldd	r18, Y+4	; 0x04
    1a02:	3d 81       	ldd	r19, Y+5	; 0x05
    1a04:	28 30       	cpi	r18, 0x08	; 8
    1a06:	31 05       	cpc	r19, r1
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <Write_Pin+0x86>
    1a0a:	47 c1       	rjmp	.+654    	; 0x1c9a <Write_Pin+0x314>
    1a0c:	6c 81       	ldd	r22, Y+4	; 0x04
    1a0e:	7d 81       	ldd	r23, Y+5	; 0x05
    1a10:	69 30       	cpi	r22, 0x09	; 9
    1a12:	71 05       	cpc	r23, r1
    1a14:	6c f4       	brge	.+26     	; 0x1a30 <Write_Pin+0xaa>
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1a:	86 30       	cpi	r24, 0x06	; 6
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <Write_Pin+0x9c>
    1a20:	f2 c0       	rjmp	.+484    	; 0x1c06 <Write_Pin+0x280>
    1a22:	2c 81       	ldd	r18, Y+4	; 0x04
    1a24:	3d 81       	ldd	r19, Y+5	; 0x05
    1a26:	27 30       	cpi	r18, 0x07	; 7
    1a28:	31 05       	cpc	r19, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <Write_Pin+0xa8>
    1a2c:	11 c1       	rjmp	.+546    	; 0x1c50 <Write_Pin+0x2ca>
    1a2e:	a3 c1       	rjmp	.+838    	; 0x1d76 <Write_Pin+0x3f0>
    1a30:	6c 81       	ldd	r22, Y+4	; 0x04
    1a32:	7d 81       	ldd	r23, Y+5	; 0x05
    1a34:	69 30       	cpi	r22, 0x09	; 9
    1a36:	71 05       	cpc	r23, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <Write_Pin+0xb6>
    1a3a:	54 c1       	rjmp	.+680    	; 0x1ce4 <Write_Pin+0x35e>
    1a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a40:	8a 30       	cpi	r24, 0x0A	; 10
    1a42:	91 05       	cpc	r25, r1
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <Write_Pin+0xc2>
    1a46:	73 c1       	rjmp	.+742    	; 0x1d2e <Write_Pin+0x3a8>
    1a48:	96 c1       	rjmp	.+812    	; 0x1d76 <Write_Pin+0x3f0>
	case A:
		BASE_A = (BASE_A & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1a4a:	a2 e2       	ldi	r26, 0x22	; 34
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e2 e2       	ldi	r30, 0x22	; 34
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <Write_Pin+0xe0>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	2a 95       	dec	r18
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <Write_Pin+0xdc>
    1a6a:	80 95       	com	r24
    1a6c:	48 23       	and	r20, r24
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9c 01       	movw	r18, r24
    1a76:	21 70       	andi	r18, 0x01	; 1
    1a78:	30 70       	andi	r19, 0x00	; 0
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	88 2f       	mov	r24, r24
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	b9 01       	movw	r22, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <Write_Pin+0x102>
    1a84:	66 0f       	add	r22, r22
    1a86:	77 1f       	adc	r23, r23
    1a88:	8a 95       	dec	r24
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <Write_Pin+0xfe>
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	84 2b       	or	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	71 c1       	rjmp	.+738    	; 0x1d76 <Write_Pin+0x3f0>
		break;
	case B:
		BASE_B = (BASE_B & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1a94:	a5 e2       	ldi	r26, 0x25	; 37
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e5 e2       	ldi	r30, 0x25	; 37
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <Write_Pin+0x12a>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	2a 95       	dec	r18
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <Write_Pin+0x126>
    1ab4:	80 95       	com	r24
    1ab6:	48 23       	and	r20, r24
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9c 01       	movw	r18, r24
    1ac0:	21 70       	andi	r18, 0x01	; 1
    1ac2:	30 70       	andi	r19, 0x00	; 0
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	b9 01       	movw	r22, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <Write_Pin+0x14c>
    1ace:	66 0f       	add	r22, r22
    1ad0:	77 1f       	adc	r23, r23
    1ad2:	8a 95       	dec	r24
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <Write_Pin+0x148>
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	84 2b       	or	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	4c c1       	rjmp	.+664    	; 0x1d76 <Write_Pin+0x3f0>
		break;
	case C:
		BASE_C = (BASE_C & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1ade:	a8 e2       	ldi	r26, 0x28	; 40
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e8 e2       	ldi	r30, 0x28	; 40
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <Write_Pin+0x174>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	2a 95       	dec	r18
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <Write_Pin+0x170>
    1afe:	80 95       	com	r24
    1b00:	48 23       	and	r20, r24
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9c 01       	movw	r18, r24
    1b0a:	21 70       	andi	r18, 0x01	; 1
    1b0c:	30 70       	andi	r19, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	b9 01       	movw	r22, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <Write_Pin+0x196>
    1b18:	66 0f       	add	r22, r22
    1b1a:	77 1f       	adc	r23, r23
    1b1c:	8a 95       	dec	r24
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <Write_Pin+0x192>
    1b20:	cb 01       	movw	r24, r22
    1b22:	84 2b       	or	r24, r20
    1b24:	8c 93       	st	X, r24
    1b26:	27 c1       	rjmp	.+590    	; 0x1d76 <Write_Pin+0x3f0>
		break;
	case D:
		BASE_D = (BASE_D & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1b28:	ab e2       	ldi	r26, 0x2B	; 43
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	eb e2       	ldi	r30, 0x2B	; 43
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <Write_Pin+0x1be>
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	2a 95       	dec	r18
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <Write_Pin+0x1ba>
    1b48:	80 95       	com	r24
    1b4a:	48 23       	and	r20, r24
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9c 01       	movw	r18, r24
    1b54:	21 70       	andi	r18, 0x01	; 1
    1b56:	30 70       	andi	r19, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	b9 01       	movw	r22, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <Write_Pin+0x1e0>
    1b62:	66 0f       	add	r22, r22
    1b64:	77 1f       	adc	r23, r23
    1b66:	8a 95       	dec	r24
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <Write_Pin+0x1dc>
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	02 c1       	rjmp	.+516    	; 0x1d76 <Write_Pin+0x3f0>
		break;
	case E:
		BASE_E = (BASE_E & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1b72:	ae e2       	ldi	r26, 0x2E	; 46
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ee e2       	ldi	r30, 0x2E	; 46
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <Write_Pin+0x208>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	2a 95       	dec	r18
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <Write_Pin+0x204>
    1b92:	80 95       	com	r24
    1b94:	48 23       	and	r20, r24
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9c 01       	movw	r18, r24
    1b9e:	21 70       	andi	r18, 0x01	; 1
    1ba0:	30 70       	andi	r19, 0x00	; 0
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	b9 01       	movw	r22, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <Write_Pin+0x22a>
    1bac:	66 0f       	add	r22, r22
    1bae:	77 1f       	adc	r23, r23
    1bb0:	8a 95       	dec	r24
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <Write_Pin+0x226>
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	84 2b       	or	r24, r20
    1bb8:	8c 93       	st	X, r24
    1bba:	dd c0       	rjmp	.+442    	; 0x1d76 <Write_Pin+0x3f0>
		break;
	case F:
		BASE_F = (BASE_F & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1bbc:	a1 e3       	ldi	r26, 0x31	; 49
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e1 e3       	ldi	r30, 0x31	; 49
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <Write_Pin+0x252>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	2a 95       	dec	r18
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <Write_Pin+0x24e>
    1bdc:	80 95       	com	r24
    1bde:	48 23       	and	r20, r24
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c 01       	movw	r18, r24
    1be8:	21 70       	andi	r18, 0x01	; 1
    1bea:	30 70       	andi	r19, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <Write_Pin+0x274>
    1bf6:	66 0f       	add	r22, r22
    1bf8:	77 1f       	adc	r23, r23
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <Write_Pin+0x270>
    1bfe:	cb 01       	movw	r24, r22
    1c00:	84 2b       	or	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	b8 c0       	rjmp	.+368    	; 0x1d76 <Write_Pin+0x3f0>
		break;
	case G:
		BASE_G = (BASE_G & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1c06:	a4 e3       	ldi	r26, 0x34	; 52
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e4 e3       	ldi	r30, 0x34	; 52
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	48 2f       	mov	r20, r24
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <Write_Pin+0x29c>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	2a 95       	dec	r18
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <Write_Pin+0x298>
    1c26:	80 95       	com	r24
    1c28:	48 23       	and	r20, r24
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9c 01       	movw	r18, r24
    1c32:	21 70       	andi	r18, 0x01	; 1
    1c34:	30 70       	andi	r19, 0x00	; 0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	b9 01       	movw	r22, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <Write_Pin+0x2be>
    1c40:	66 0f       	add	r22, r22
    1c42:	77 1f       	adc	r23, r23
    1c44:	8a 95       	dec	r24
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <Write_Pin+0x2ba>
    1c48:	cb 01       	movw	r24, r22
    1c4a:	84 2b       	or	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	93 c0       	rjmp	.+294    	; 0x1d76 <Write_Pin+0x3f0>
		break;
	case H:
		BASE_H = (BASE_H & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1c50:	a2 e0       	ldi	r26, 0x02	; 2
    1c52:	b1 e0       	ldi	r27, 0x01	; 1
    1c54:	e2 e0       	ldi	r30, 0x02	; 2
    1c56:	f1 e0       	ldi	r31, 0x01	; 1
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <Write_Pin+0x2e6>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	2a 95       	dec	r18
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <Write_Pin+0x2e2>
    1c70:	80 95       	com	r24
    1c72:	48 23       	and	r20, r24
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	88 2f       	mov	r24, r24
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9c 01       	movw	r18, r24
    1c7c:	21 70       	andi	r18, 0x01	; 1
    1c7e:	30 70       	andi	r19, 0x00	; 0
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	b9 01       	movw	r22, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <Write_Pin+0x308>
    1c8a:	66 0f       	add	r22, r22
    1c8c:	77 1f       	adc	r23, r23
    1c8e:	8a 95       	dec	r24
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <Write_Pin+0x304>
    1c92:	cb 01       	movw	r24, r22
    1c94:	84 2b       	or	r24, r20
    1c96:	8c 93       	st	X, r24
    1c98:	6e c0       	rjmp	.+220    	; 0x1d76 <Write_Pin+0x3f0>
		break;
	case J:
		BASE_J = (BASE_J & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1c9a:	a5 e0       	ldi	r26, 0x05	; 5
    1c9c:	b1 e0       	ldi	r27, 0x01	; 1
    1c9e:	e5 e0       	ldi	r30, 0x05	; 5
    1ca0:	f1 e0       	ldi	r31, 0x01	; 1
    1ca2:	80 81       	ld	r24, Z
    1ca4:	48 2f       	mov	r20, r24
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <Write_Pin+0x330>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	2a 95       	dec	r18
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <Write_Pin+0x32c>
    1cba:	80 95       	com	r24
    1cbc:	48 23       	and	r20, r24
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c 01       	movw	r18, r24
    1cc6:	21 70       	andi	r18, 0x01	; 1
    1cc8:	30 70       	andi	r19, 0x00	; 0
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	b9 01       	movw	r22, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <Write_Pin+0x352>
    1cd4:	66 0f       	add	r22, r22
    1cd6:	77 1f       	adc	r23, r23
    1cd8:	8a 95       	dec	r24
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <Write_Pin+0x34e>
    1cdc:	cb 01       	movw	r24, r22
    1cde:	84 2b       	or	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	49 c0       	rjmp	.+146    	; 0x1d76 <Write_Pin+0x3f0>
		break;
	case K:
		BASE_K = (BASE_K & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1ce4:	a8 e0       	ldi	r26, 0x08	; 8
    1ce6:	b1 e0       	ldi	r27, 0x01	; 1
    1ce8:	e8 e0       	ldi	r30, 0x08	; 8
    1cea:	f1 e0       	ldi	r31, 0x01	; 1
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <Write_Pin+0x37a>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	2a 95       	dec	r18
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <Write_Pin+0x376>
    1d04:	80 95       	com	r24
    1d06:	48 23       	and	r20, r24
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9c 01       	movw	r18, r24
    1d10:	21 70       	andi	r18, 0x01	; 1
    1d12:	30 70       	andi	r19, 0x00	; 0
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	88 2f       	mov	r24, r24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	b9 01       	movw	r22, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <Write_Pin+0x39c>
    1d1e:	66 0f       	add	r22, r22
    1d20:	77 1f       	adc	r23, r23
    1d22:	8a 95       	dec	r24
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <Write_Pin+0x398>
    1d26:	cb 01       	movw	r24, r22
    1d28:	84 2b       	or	r24, r20
    1d2a:	8c 93       	st	X, r24
    1d2c:	24 c0       	rjmp	.+72     	; 0x1d76 <Write_Pin+0x3f0>
		break;
	case L:
		BASE_L = (BASE_L & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1d2e:	ab e0       	ldi	r26, 0x0B	; 11
    1d30:	b1 e0       	ldi	r27, 0x01	; 1
    1d32:	eb e0       	ldi	r30, 0x0B	; 11
    1d34:	f1 e0       	ldi	r31, 0x01	; 1
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <Write_Pin+0x3c4>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	2a 95       	dec	r18
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <Write_Pin+0x3c0>
    1d4e:	80 95       	com	r24
    1d50:	48 23       	and	r20, r24
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9c 01       	movw	r18, r24
    1d5a:	21 70       	andi	r18, 0x01	; 1
    1d5c:	30 70       	andi	r19, 0x00	; 0
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	b9 01       	movw	r22, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <Write_Pin+0x3e6>
    1d68:	66 0f       	add	r22, r22
    1d6a:	77 1f       	adc	r23, r23
    1d6c:	8a 95       	dec	r24
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <Write_Pin+0x3e2>
    1d70:	cb 01       	movw	r24, r22
    1d72:	84 2b       	or	r24, r20
    1d74:	8c 93       	st	X, r24
		break;
	}
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <pin_write>:

void pin_write(PIN_Config_t* Pin, uint8_t val) {
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <pin_write+0x6>
    1d8c:	0f 92       	push	r0
    1d8e:	0f 92       	push	r0
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	6b 83       	std	Y+3, r22	; 0x03
	switch(Pin -> port){
    1d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9e:	83 81       	ldd	r24, Z+3	; 0x03
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	3d 83       	std	Y+5, r19	; 0x05
    1da6:	2c 83       	std	Y+4, r18	; 0x04
    1da8:	8c 81       	ldd	r24, Y+4	; 0x04
    1daa:	9d 81       	ldd	r25, Y+5	; 0x05
    1dac:	85 30       	cpi	r24, 0x05	; 5
    1dae:	91 05       	cpc	r25, r1
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <pin_write+0x2e>
    1db2:	3d c1       	rjmp	.+634    	; 0x202e <pin_write+0x2a8>
    1db4:	2c 81       	ldd	r18, Y+4	; 0x04
    1db6:	3d 81       	ldd	r19, Y+5	; 0x05
    1db8:	26 30       	cpi	r18, 0x06	; 6
    1dba:	31 05       	cpc	r19, r1
    1dbc:	1c f5       	brge	.+70     	; 0x1e04 <pin_write+0x7e>
    1dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc2:	82 30       	cpi	r24, 0x02	; 2
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <pin_write+0x44>
    1dc8:	a2 c0       	rjmp	.+324    	; 0x1f0e <pin_write+0x188>
    1dca:	2c 81       	ldd	r18, Y+4	; 0x04
    1dcc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dce:	23 30       	cpi	r18, 0x03	; 3
    1dd0:	31 05       	cpc	r19, r1
    1dd2:	5c f4       	brge	.+22     	; 0x1dea <pin_write+0x64>
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	c9 f1       	breq	.+114    	; 0x1e4e <pin_write+0xc8>
    1ddc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dde:	3d 81       	ldd	r19, Y+5	; 0x05
    1de0:	21 30       	cpi	r18, 0x01	; 1
    1de2:	31 05       	cpc	r19, r1
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <pin_write+0x62>
    1de6:	63 c0       	rjmp	.+198    	; 0x1eae <pin_write+0x128>
    1de8:	41 c2       	rjmp	.+1154   	; 0x226c <__stack+0x6d>
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	9d 81       	ldd	r25, Y+5	; 0x05
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	91 05       	cpc	r25, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <pin_write+0x70>
    1df4:	bc c0       	rjmp	.+376    	; 0x1f6e <pin_write+0x1e8>
    1df6:	2c 81       	ldd	r18, Y+4	; 0x04
    1df8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfa:	24 30       	cpi	r18, 0x04	; 4
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <pin_write+0x7c>
    1e00:	e6 c0       	rjmp	.+460    	; 0x1fce <pin_write+0x248>
    1e02:	34 c2       	rjmp	.+1128   	; 0x226c <__stack+0x6d>
    1e04:	8c 81       	ldd	r24, Y+4	; 0x04
    1e06:	9d 81       	ldd	r25, Y+5	; 0x05
    1e08:	88 30       	cpi	r24, 0x08	; 8
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <pin_write+0x8a>
    1e0e:	9f c1       	rjmp	.+830    	; 0x214e <pin_write+0x3c8>
    1e10:	2c 81       	ldd	r18, Y+4	; 0x04
    1e12:	3d 81       	ldd	r19, Y+5	; 0x05
    1e14:	29 30       	cpi	r18, 0x09	; 9
    1e16:	31 05       	cpc	r19, r1
    1e18:	6c f4       	brge	.+26     	; 0x1e34 <pin_write+0xae>
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1e:	86 30       	cpi	r24, 0x06	; 6
    1e20:	91 05       	cpc	r25, r1
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <pin_write+0xa0>
    1e24:	34 c1       	rjmp	.+616    	; 0x208e <pin_write+0x308>
    1e26:	2c 81       	ldd	r18, Y+4	; 0x04
    1e28:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2a:	27 30       	cpi	r18, 0x07	; 7
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <pin_write+0xac>
    1e30:	5e c1       	rjmp	.+700    	; 0x20ee <pin_write+0x368>
    1e32:	1c c2       	rjmp	.+1080   	; 0x226c <__stack+0x6d>
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	9d 81       	ldd	r25, Y+5	; 0x05
    1e38:	89 30       	cpi	r24, 0x09	; 9
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <pin_write+0xba>
    1e3e:	b7 c1       	rjmp	.+878    	; 0x21ae <pin_write+0x428>
    1e40:	2c 81       	ldd	r18, Y+4	; 0x04
    1e42:	3d 81       	ldd	r19, Y+5	; 0x05
    1e44:	2a 30       	cpi	r18, 0x0A	; 10
    1e46:	31 05       	cpc	r19, r1
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <pin_write+0xc6>
    1e4a:	e1 c1       	rjmp	.+962    	; 0x220e <__stack+0xf>
    1e4c:	0f c2       	rjmp	.+1054   	; 0x226c <__stack+0x6d>
	case A:
		if(val){
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	88 23       	and	r24, r24
    1e52:	b1 f0       	breq	.+44     	; 0x1e80 <pin_write+0xfa>
			SET_BIT(BASE_A, Pin -> pin_num);
    1e54:	a2 e2       	ldi	r26, 0x22	; 34
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e2 e2       	ldi	r30, 0x22	; 34
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	e9 81       	ldd	r30, Y+1	; 0x01
    1e62:	fa 81       	ldd	r31, Y+2	; 0x02
    1e64:	81 81       	ldd	r24, Z+1	; 0x01
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <pin_write+0xf0>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <pin_write+0xec>
    1e7a:	84 2b       	or	r24, r20
    1e7c:	8c 93       	st	X, r24
    1e7e:	f6 c1       	rjmp	.+1004   	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_A, Pin -> pin_num);
    1e80:	a2 e2       	ldi	r26, 0x22	; 34
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e2 e2       	ldi	r30, 0x22	; 34
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	81 81       	ldd	r24, Z+1	; 0x01
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <pin_write+0x11c>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <pin_write+0x118>
    1ea6:	80 95       	com	r24
    1ea8:	84 23       	and	r24, r20
    1eaa:	8c 93       	st	X, r24
    1eac:	df c1       	rjmp	.+958    	; 0x226c <__stack+0x6d>
		}
		break;
	case B:
		if(val){
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	88 23       	and	r24, r24
    1eb2:	b1 f0       	breq	.+44     	; 0x1ee0 <pin_write+0x15a>
			SET_BIT(BASE_B, Pin -> pin_num);
    1eb4:	a5 e2       	ldi	r26, 0x25	; 37
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e5 e2       	ldi	r30, 0x25	; 37
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	48 2f       	mov	r20, r24
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	81 81       	ldd	r24, Z+1	; 0x01
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	02 2e       	mov	r0, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <pin_write+0x150>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	0a 94       	dec	r0
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <pin_write+0x14c>
    1eda:	84 2b       	or	r24, r20
    1edc:	8c 93       	st	X, r24
    1ede:	c6 c1       	rjmp	.+908    	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_B, Pin -> pin_num);
    1ee0:	a5 e2       	ldi	r26, 0x25	; 37
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e5 e2       	ldi	r30, 0x25	; 37
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	48 2f       	mov	r20, r24
    1eec:	e9 81       	ldd	r30, Y+1	; 0x01
    1eee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef0:	81 81       	ldd	r24, Z+1	; 0x01
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 2e       	mov	r0, r18
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <pin_write+0x17c>
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	0a 94       	dec	r0
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <pin_write+0x178>
    1f06:	80 95       	com	r24
    1f08:	84 23       	and	r24, r20
    1f0a:	8c 93       	st	X, r24
    1f0c:	af c1       	rjmp	.+862    	; 0x226c <__stack+0x6d>
		}
		break;
	case C:
		if(val){
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	88 23       	and	r24, r24
    1f12:	b1 f0       	breq	.+44     	; 0x1f40 <pin_write+0x1ba>
			SET_BIT(BASE_C, Pin -> pin_num);
    1f14:	a8 e2       	ldi	r26, 0x28	; 40
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e8 e2       	ldi	r30, 0x28	; 40
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	e9 81       	ldd	r30, Y+1	; 0x01
    1f22:	fa 81       	ldd	r31, Y+2	; 0x02
    1f24:	81 81       	ldd	r24, Z+1	; 0x01
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	02 2e       	mov	r0, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <pin_write+0x1b0>
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	0a 94       	dec	r0
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <pin_write+0x1ac>
    1f3a:	84 2b       	or	r24, r20
    1f3c:	8c 93       	st	X, r24
    1f3e:	96 c1       	rjmp	.+812    	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_C, Pin -> pin_num);
    1f40:	a8 e2       	ldi	r26, 0x28	; 40
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e8 e2       	ldi	r30, 0x28	; 40
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f50:	81 81       	ldd	r24, Z+1	; 0x01
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	02 2e       	mov	r0, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <pin_write+0x1dc>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	0a 94       	dec	r0
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <pin_write+0x1d8>
    1f66:	80 95       	com	r24
    1f68:	84 23       	and	r24, r20
    1f6a:	8c 93       	st	X, r24
    1f6c:	7f c1       	rjmp	.+766    	; 0x226c <__stack+0x6d>
		}
		break;
	case D:
		if(val){
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	88 23       	and	r24, r24
    1f72:	b1 f0       	breq	.+44     	; 0x1fa0 <pin_write+0x21a>
			SET_BIT(BASE_D, Pin -> pin_num);
    1f74:	ab e2       	ldi	r26, 0x2B	; 43
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	eb e2       	ldi	r30, 0x2B	; 43
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	48 2f       	mov	r20, r24
    1f80:	e9 81       	ldd	r30, Y+1	; 0x01
    1f82:	fa 81       	ldd	r31, Y+2	; 0x02
    1f84:	81 81       	ldd	r24, Z+1	; 0x01
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	02 2e       	mov	r0, r18
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <pin_write+0x210>
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	0a 94       	dec	r0
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <pin_write+0x20c>
    1f9a:	84 2b       	or	r24, r20
    1f9c:	8c 93       	st	X, r24
    1f9e:	66 c1       	rjmp	.+716    	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_D, Pin -> pin_num);
    1fa0:	ab e2       	ldi	r26, 0x2B	; 43
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	eb e2       	ldi	r30, 0x2B	; 43
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	48 2f       	mov	r20, r24
    1fac:	e9 81       	ldd	r30, Y+1	; 0x01
    1fae:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb0:	81 81       	ldd	r24, Z+1	; 0x01
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <pin_write+0x23c>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <pin_write+0x238>
    1fc6:	80 95       	com	r24
    1fc8:	84 23       	and	r24, r20
    1fca:	8c 93       	st	X, r24
    1fcc:	4f c1       	rjmp	.+670    	; 0x226c <__stack+0x6d>
		}
		break;
	case E:
		if(val){
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	88 23       	and	r24, r24
    1fd2:	b1 f0       	breq	.+44     	; 0x2000 <pin_write+0x27a>
			SET_BIT(BASE_E, Pin -> pin_num);
    1fd4:	ae e2       	ldi	r26, 0x2E	; 46
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	ee e2       	ldi	r30, 0x2E	; 46
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	48 2f       	mov	r20, r24
    1fe0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe4:	81 81       	ldd	r24, Z+1	; 0x01
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 2e       	mov	r0, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <pin_write+0x270>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	0a 94       	dec	r0
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <pin_write+0x26c>
    1ffa:	84 2b       	or	r24, r20
    1ffc:	8c 93       	st	X, r24
    1ffe:	36 c1       	rjmp	.+620    	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_E, Pin -> pin_num);
    2000:	ae e2       	ldi	r26, 0x2E	; 46
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	ee e2       	ldi	r30, 0x2E	; 46
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	48 2f       	mov	r20, r24
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	81 81       	ldd	r24, Z+1	; 0x01
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	02 2e       	mov	r0, r18
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <pin_write+0x29c>
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	0a 94       	dec	r0
    2024:	e2 f7       	brpl	.-8      	; 0x201e <pin_write+0x298>
    2026:	80 95       	com	r24
    2028:	84 23       	and	r24, r20
    202a:	8c 93       	st	X, r24
    202c:	1f c1       	rjmp	.+574    	; 0x226c <__stack+0x6d>
		}
		break;
	case F:
		if(val){
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	88 23       	and	r24, r24
    2032:	b1 f0       	breq	.+44     	; 0x2060 <pin_write+0x2da>
			SET_BIT(BASE_F, Pin -> pin_num);
    2034:	a1 e3       	ldi	r26, 0x31	; 49
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e1 e3       	ldi	r30, 0x31	; 49
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	48 2f       	mov	r20, r24
    2040:	e9 81       	ldd	r30, Y+1	; 0x01
    2042:	fa 81       	ldd	r31, Y+2	; 0x02
    2044:	81 81       	ldd	r24, Z+1	; 0x01
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	02 2e       	mov	r0, r18
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <pin_write+0x2d0>
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	0a 94       	dec	r0
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <pin_write+0x2cc>
    205a:	84 2b       	or	r24, r20
    205c:	8c 93       	st	X, r24
    205e:	06 c1       	rjmp	.+524    	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_F, Pin -> pin_num);
    2060:	a1 e3       	ldi	r26, 0x31	; 49
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e1 e3       	ldi	r30, 0x31	; 49
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	48 2f       	mov	r20, r24
    206c:	e9 81       	ldd	r30, Y+1	; 0x01
    206e:	fa 81       	ldd	r31, Y+2	; 0x02
    2070:	81 81       	ldd	r24, Z+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	02 2e       	mov	r0, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <pin_write+0x2fc>
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	0a 94       	dec	r0
    2084:	e2 f7       	brpl	.-8      	; 0x207e <pin_write+0x2f8>
    2086:	80 95       	com	r24
    2088:	84 23       	and	r24, r20
    208a:	8c 93       	st	X, r24
    208c:	ef c0       	rjmp	.+478    	; 0x226c <__stack+0x6d>
		}
		break;
	case G:
		if(val){
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	88 23       	and	r24, r24
    2092:	b1 f0       	breq	.+44     	; 0x20c0 <pin_write+0x33a>
			SET_BIT(BASE_G, Pin -> pin_num);
    2094:	a4 e3       	ldi	r26, 0x34	; 52
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e4 e3       	ldi	r30, 0x34	; 52
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	e9 81       	ldd	r30, Y+1	; 0x01
    20a2:	fa 81       	ldd	r31, Y+2	; 0x02
    20a4:	81 81       	ldd	r24, Z+1	; 0x01
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 2e       	mov	r0, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <pin_write+0x330>
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <pin_write+0x32c>
    20ba:	84 2b       	or	r24, r20
    20bc:	8c 93       	st	X, r24
    20be:	d6 c0       	rjmp	.+428    	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_G, Pin -> pin_num);
    20c0:	a4 e3       	ldi	r26, 0x34	; 52
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e4 e3       	ldi	r30, 0x34	; 52
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	e9 81       	ldd	r30, Y+1	; 0x01
    20ce:	fa 81       	ldd	r31, Y+2	; 0x02
    20d0:	81 81       	ldd	r24, Z+1	; 0x01
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	02 2e       	mov	r0, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <pin_write+0x35c>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	0a 94       	dec	r0
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <pin_write+0x358>
    20e6:	80 95       	com	r24
    20e8:	84 23       	and	r24, r20
    20ea:	8c 93       	st	X, r24
    20ec:	bf c0       	rjmp	.+382    	; 0x226c <__stack+0x6d>
		}
		break;
	case H:
		if(val){
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	88 23       	and	r24, r24
    20f2:	b1 f0       	breq	.+44     	; 0x2120 <pin_write+0x39a>
			SET_BIT(BASE_H, Pin -> pin_num);
    20f4:	a2 e0       	ldi	r26, 0x02	; 2
    20f6:	b1 e0       	ldi	r27, 0x01	; 1
    20f8:	e2 e0       	ldi	r30, 0x02	; 2
    20fa:	f1 e0       	ldi	r31, 0x01	; 1
    20fc:	80 81       	ld	r24, Z
    20fe:	48 2f       	mov	r20, r24
    2100:	e9 81       	ldd	r30, Y+1	; 0x01
    2102:	fa 81       	ldd	r31, Y+2	; 0x02
    2104:	81 81       	ldd	r24, Z+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 2e       	mov	r0, r18
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <pin_write+0x390>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <pin_write+0x38c>
    211a:	84 2b       	or	r24, r20
    211c:	8c 93       	st	X, r24
    211e:	a6 c0       	rjmp	.+332    	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_H, Pin -> pin_num);
    2120:	a2 e0       	ldi	r26, 0x02	; 2
    2122:	b1 e0       	ldi	r27, 0x01	; 1
    2124:	e2 e0       	ldi	r30, 0x02	; 2
    2126:	f1 e0       	ldi	r31, 0x01	; 1
    2128:	80 81       	ld	r24, Z
    212a:	48 2f       	mov	r20, r24
    212c:	e9 81       	ldd	r30, Y+1	; 0x01
    212e:	fa 81       	ldd	r31, Y+2	; 0x02
    2130:	81 81       	ldd	r24, Z+1	; 0x01
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	02 2e       	mov	r0, r18
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <pin_write+0x3bc>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	0a 94       	dec	r0
    2144:	e2 f7       	brpl	.-8      	; 0x213e <pin_write+0x3b8>
    2146:	80 95       	com	r24
    2148:	84 23       	and	r24, r20
    214a:	8c 93       	st	X, r24
    214c:	8f c0       	rjmp	.+286    	; 0x226c <__stack+0x6d>
		}
		break;
	case J:
		if(val){
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	88 23       	and	r24, r24
    2152:	b1 f0       	breq	.+44     	; 0x2180 <pin_write+0x3fa>
			SET_BIT(BASE_J, Pin -> pin_num);
    2154:	a5 e0       	ldi	r26, 0x05	; 5
    2156:	b1 e0       	ldi	r27, 0x01	; 1
    2158:	e5 e0       	ldi	r30, 0x05	; 5
    215a:	f1 e0       	ldi	r31, 0x01	; 1
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	e9 81       	ldd	r30, Y+1	; 0x01
    2162:	fa 81       	ldd	r31, Y+2	; 0x02
    2164:	81 81       	ldd	r24, Z+1	; 0x01
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	02 2e       	mov	r0, r18
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <pin_write+0x3f0>
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	0a 94       	dec	r0
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <pin_write+0x3ec>
    217a:	84 2b       	or	r24, r20
    217c:	8c 93       	st	X, r24
    217e:	76 c0       	rjmp	.+236    	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_J, Pin -> pin_num);
    2180:	a5 e0       	ldi	r26, 0x05	; 5
    2182:	b1 e0       	ldi	r27, 0x01	; 1
    2184:	e5 e0       	ldi	r30, 0x05	; 5
    2186:	f1 e0       	ldi	r31, 0x01	; 1
    2188:	80 81       	ld	r24, Z
    218a:	48 2f       	mov	r20, r24
    218c:	e9 81       	ldd	r30, Y+1	; 0x01
    218e:	fa 81       	ldd	r31, Y+2	; 0x02
    2190:	81 81       	ldd	r24, Z+1	; 0x01
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	02 2e       	mov	r0, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <pin_write+0x41c>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <pin_write+0x418>
    21a6:	80 95       	com	r24
    21a8:	84 23       	and	r24, r20
    21aa:	8c 93       	st	X, r24
    21ac:	5f c0       	rjmp	.+190    	; 0x226c <__stack+0x6d>
		}
		break;
	case K:
		if(val){
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	88 23       	and	r24, r24
    21b2:	b1 f0       	breq	.+44     	; 0x21e0 <pin_write+0x45a>
			SET_BIT(BASE_K, Pin -> pin_num);
    21b4:	a8 e0       	ldi	r26, 0x08	; 8
    21b6:	b1 e0       	ldi	r27, 0x01	; 1
    21b8:	e8 e0       	ldi	r30, 0x08	; 8
    21ba:	f1 e0       	ldi	r31, 0x01	; 1
    21bc:	80 81       	ld	r24, Z
    21be:	48 2f       	mov	r20, r24
    21c0:	e9 81       	ldd	r30, Y+1	; 0x01
    21c2:	fa 81       	ldd	r31, Y+2	; 0x02
    21c4:	81 81       	ldd	r24, Z+1	; 0x01
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	02 2e       	mov	r0, r18
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <pin_write+0x450>
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	0a 94       	dec	r0
    21d8:	e2 f7       	brpl	.-8      	; 0x21d2 <pin_write+0x44c>
    21da:	84 2b       	or	r24, r20
    21dc:	8c 93       	st	X, r24
    21de:	46 c0       	rjmp	.+140    	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_K, Pin -> pin_num);
    21e0:	a8 e0       	ldi	r26, 0x08	; 8
    21e2:	b1 e0       	ldi	r27, 0x01	; 1
    21e4:	e8 e0       	ldi	r30, 0x08	; 8
    21e6:	f1 e0       	ldi	r31, 0x01	; 1
    21e8:	80 81       	ld	r24, Z
    21ea:	48 2f       	mov	r20, r24
    21ec:	e9 81       	ldd	r30, Y+1	; 0x01
    21ee:	fa 81       	ldd	r31, Y+2	; 0x02
    21f0:	81 81       	ldd	r24, Z+1	; 0x01
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	02 2e       	mov	r0, r18
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <__stack+0x3>
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	0a 94       	dec	r0
    2204:	e2 f7       	brpl	.-8      	; 0x21fe <pin_write+0x478>
    2206:	80 95       	com	r24
    2208:	84 23       	and	r24, r20
    220a:	8c 93       	st	X, r24
    220c:	2f c0       	rjmp	.+94     	; 0x226c <__stack+0x6d>
		}
		break;
	case L:
		if(val){
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	88 23       	and	r24, r24
    2212:	b1 f0       	breq	.+44     	; 0x2240 <__stack+0x41>
			SET_BIT(BASE_L, Pin -> pin_num);
    2214:	ab e0       	ldi	r26, 0x0B	; 11
    2216:	b1 e0       	ldi	r27, 0x01	; 1
    2218:	eb e0       	ldi	r30, 0x0B	; 11
    221a:	f1 e0       	ldi	r31, 0x01	; 1
    221c:	80 81       	ld	r24, Z
    221e:	48 2f       	mov	r20, r24
    2220:	e9 81       	ldd	r30, Y+1	; 0x01
    2222:	fa 81       	ldd	r31, Y+2	; 0x02
    2224:	81 81       	ldd	r24, Z+1	; 0x01
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	02 2e       	mov	r0, r18
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <__stack+0x37>
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	0a 94       	dec	r0
    2238:	e2 f7       	brpl	.-8      	; 0x2232 <__stack+0x33>
    223a:	84 2b       	or	r24, r20
    223c:	8c 93       	st	X, r24
    223e:	16 c0       	rjmp	.+44     	; 0x226c <__stack+0x6d>
		}else{
			CLEAR_BIT(BASE_L, Pin -> pin_num);
    2240:	ab e0       	ldi	r26, 0x0B	; 11
    2242:	b1 e0       	ldi	r27, 0x01	; 1
    2244:	eb e0       	ldi	r30, 0x0B	; 11
    2246:	f1 e0       	ldi	r31, 0x01	; 1
    2248:	80 81       	ld	r24, Z
    224a:	48 2f       	mov	r20, r24
    224c:	e9 81       	ldd	r30, Y+1	; 0x01
    224e:	fa 81       	ldd	r31, Y+2	; 0x02
    2250:	81 81       	ldd	r24, Z+1	; 0x01
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	02 2e       	mov	r0, r18
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <__stack+0x63>
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	0a 94       	dec	r0
    2264:	e2 f7       	brpl	.-8      	; 0x225e <__stack+0x5f>
    2266:	80 95       	com	r24
    2268:	84 23       	and	r24, r20
    226a:	8c 93       	st	X, r24
		}
		break;
	}

}
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <port_read>:
uint8_t port_read(PORT_Config_t * Port) {
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	00 d0       	rcall	.+0      	; 0x2282 <port_read+0x6>
    2282:	0f 92       	push	r0
    2284:	0f 92       	push	r0
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	9a 83       	std	Y+2, r25	; 0x02
    228c:	89 83       	std	Y+1, r24	; 0x01
	switch(Port -> port){
    228e:	e9 81       	ldd	r30, Y+1	; 0x01
    2290:	fa 81       	ldd	r31, Y+2	; 0x02
    2292:	82 81       	ldd	r24, Z+2	; 0x02
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	3d 83       	std	Y+5, r19	; 0x05
    229a:	2c 83       	std	Y+4, r18	; 0x04
    229c:	8c 81       	ldd	r24, Y+4	; 0x04
    229e:	9d 81       	ldd	r25, Y+5	; 0x05
    22a0:	85 30       	cpi	r24, 0x05	; 5
    22a2:	91 05       	cpc	r25, r1
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <port_read+0x2c>
    22a6:	5f c0       	rjmp	.+190    	; 0x2366 <port_read+0xea>
    22a8:	2c 81       	ldd	r18, Y+4	; 0x04
    22aa:	3d 81       	ldd	r19, Y+5	; 0x05
    22ac:	26 30       	cpi	r18, 0x06	; 6
    22ae:	31 05       	cpc	r19, r1
    22b0:	04 f5       	brge	.+64     	; 0x22f2 <port_read+0x76>
    22b2:	8c 81       	ldd	r24, Y+4	; 0x04
    22b4:	9d 81       	ldd	r25, Y+5	; 0x05
    22b6:	82 30       	cpi	r24, 0x02	; 2
    22b8:	91 05       	cpc	r25, r1
    22ba:	09 f4       	brne	.+2      	; 0x22be <port_read+0x42>
    22bc:	45 c0       	rjmp	.+138    	; 0x2348 <port_read+0xcc>
    22be:	2c 81       	ldd	r18, Y+4	; 0x04
    22c0:	3d 81       	ldd	r19, Y+5	; 0x05
    22c2:	23 30       	cpi	r18, 0x03	; 3
    22c4:	31 05       	cpc	r19, r1
    22c6:	54 f4       	brge	.+20     	; 0x22dc <port_read+0x60>
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	9d 81       	ldd	r25, Y+5	; 0x05
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	91 f1       	breq	.+100    	; 0x2334 <port_read+0xb8>
    22d0:	2c 81       	ldd	r18, Y+4	; 0x04
    22d2:	3d 81       	ldd	r19, Y+5	; 0x05
    22d4:	21 30       	cpi	r18, 0x01	; 1
    22d6:	31 05       	cpc	r19, r1
    22d8:	91 f1       	breq	.+100    	; 0x233e <port_read+0xc2>
    22da:	63 c0       	rjmp	.+198    	; 0x23a2 <port_read+0x126>
    22dc:	8c 81       	ldd	r24, Y+4	; 0x04
    22de:	9d 81       	ldd	r25, Y+5	; 0x05
    22e0:	83 30       	cpi	r24, 0x03	; 3
    22e2:	91 05       	cpc	r25, r1
    22e4:	b1 f1       	breq	.+108    	; 0x2352 <port_read+0xd6>
    22e6:	2c 81       	ldd	r18, Y+4	; 0x04
    22e8:	3d 81       	ldd	r19, Y+5	; 0x05
    22ea:	24 30       	cpi	r18, 0x04	; 4
    22ec:	31 05       	cpc	r19, r1
    22ee:	b1 f1       	breq	.+108    	; 0x235c <port_read+0xe0>
    22f0:	58 c0       	rjmp	.+176    	; 0x23a2 <port_read+0x126>
    22f2:	8c 81       	ldd	r24, Y+4	; 0x04
    22f4:	9d 81       	ldd	r25, Y+5	; 0x05
    22f6:	88 30       	cpi	r24, 0x08	; 8
    22f8:	91 05       	cpc	r25, r1
    22fa:	09 f4       	brne	.+2      	; 0x22fe <port_read+0x82>
    22fc:	43 c0       	rjmp	.+134    	; 0x2384 <port_read+0x108>
    22fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2300:	3d 81       	ldd	r19, Y+5	; 0x05
    2302:	29 30       	cpi	r18, 0x09	; 9
    2304:	31 05       	cpc	r19, r1
    2306:	5c f4       	brge	.+22     	; 0x231e <port_read+0xa2>
    2308:	8c 81       	ldd	r24, Y+4	; 0x04
    230a:	9d 81       	ldd	r25, Y+5	; 0x05
    230c:	86 30       	cpi	r24, 0x06	; 6
    230e:	91 05       	cpc	r25, r1
    2310:	79 f1       	breq	.+94     	; 0x2370 <port_read+0xf4>
    2312:	2c 81       	ldd	r18, Y+4	; 0x04
    2314:	3d 81       	ldd	r19, Y+5	; 0x05
    2316:	27 30       	cpi	r18, 0x07	; 7
    2318:	31 05       	cpc	r19, r1
    231a:	79 f1       	breq	.+94     	; 0x237a <port_read+0xfe>
    231c:	42 c0       	rjmp	.+132    	; 0x23a2 <port_read+0x126>
    231e:	8c 81       	ldd	r24, Y+4	; 0x04
    2320:	9d 81       	ldd	r25, Y+5	; 0x05
    2322:	89 30       	cpi	r24, 0x09	; 9
    2324:	91 05       	cpc	r25, r1
    2326:	99 f1       	breq	.+102    	; 0x238e <port_read+0x112>
    2328:	2c 81       	ldd	r18, Y+4	; 0x04
    232a:	3d 81       	ldd	r19, Y+5	; 0x05
    232c:	2a 30       	cpi	r18, 0x0A	; 10
    232e:	31 05       	cpc	r19, r1
    2330:	99 f1       	breq	.+102    	; 0x2398 <port_read+0x11c>
    2332:	37 c0       	rjmp	.+110    	; 0x23a2 <port_read+0x126>
	case A:
		return BASE_A;
    2334:	e2 e2       	ldi	r30, 0x22	; 34
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	30 81       	ld	r19, Z
    233a:	3b 83       	std	Y+3, r19	; 0x03
    233c:	34 c0       	rjmp	.+104    	; 0x23a6 <port_read+0x12a>
	case B:
		return BASE_B;
    233e:	e5 e2       	ldi	r30, 0x25	; 37
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	8b 83       	std	Y+3, r24	; 0x03
    2346:	2f c0       	rjmp	.+94     	; 0x23a6 <port_read+0x12a>
	case C:
		return BASE_C;
    2348:	e8 e2       	ldi	r30, 0x28	; 40
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	90 81       	ld	r25, Z
    234e:	9b 83       	std	Y+3, r25	; 0x03
    2350:	2a c0       	rjmp	.+84     	; 0x23a6 <port_read+0x12a>
	case D:
		return BASE_D;
    2352:	eb e2       	ldi	r30, 0x2B	; 43
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	20 81       	ld	r18, Z
    2358:	2b 83       	std	Y+3, r18	; 0x03
    235a:	25 c0       	rjmp	.+74     	; 0x23a6 <port_read+0x12a>
	case E:
		return BASE_E;
    235c:	ee e2       	ldi	r30, 0x2E	; 46
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	30 81       	ld	r19, Z
    2362:	3b 83       	std	Y+3, r19	; 0x03
    2364:	20 c0       	rjmp	.+64     	; 0x23a6 <port_read+0x12a>
	case F:
		return BASE_F;
    2366:	e1 e3       	ldi	r30, 0x31	; 49
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	8b 83       	std	Y+3, r24	; 0x03
    236e:	1b c0       	rjmp	.+54     	; 0x23a6 <port_read+0x12a>
	case G:
		return BASE_G;
    2370:	e4 e3       	ldi	r30, 0x34	; 52
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	90 81       	ld	r25, Z
    2376:	9b 83       	std	Y+3, r25	; 0x03
    2378:	16 c0       	rjmp	.+44     	; 0x23a6 <port_read+0x12a>
	case H:
		return BASE_H;
    237a:	e2 e0       	ldi	r30, 0x02	; 2
    237c:	f1 e0       	ldi	r31, 0x01	; 1
    237e:	20 81       	ld	r18, Z
    2380:	2b 83       	std	Y+3, r18	; 0x03
    2382:	11 c0       	rjmp	.+34     	; 0x23a6 <port_read+0x12a>
	case J:
		return BASE_J;
    2384:	e5 e0       	ldi	r30, 0x05	; 5
    2386:	f1 e0       	ldi	r31, 0x01	; 1
    2388:	30 81       	ld	r19, Z
    238a:	3b 83       	std	Y+3, r19	; 0x03
    238c:	0c c0       	rjmp	.+24     	; 0x23a6 <port_read+0x12a>
	case K:
		return BASE_K;
    238e:	e8 e0       	ldi	r30, 0x08	; 8
    2390:	f1 e0       	ldi	r31, 0x01	; 1
    2392:	80 81       	ld	r24, Z
    2394:	8b 83       	std	Y+3, r24	; 0x03
    2396:	07 c0       	rjmp	.+14     	; 0x23a6 <port_read+0x12a>
	case L:
		return BASE_L;
    2398:	eb e0       	ldi	r30, 0x0B	; 11
    239a:	f1 e0       	ldi	r31, 0x01	; 1
    239c:	90 81       	ld	r25, Z
    239e:	9b 83       	std	Y+3, r25	; 0x03
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <port_read+0x12a>
	}
	return 1;
    23a2:	21 e0       	ldi	r18, 0x01	; 1
    23a4:	2b 83       	std	Y+3, r18	; 0x03
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <port_write>:

void port_write(PORT_Config_t * Port, uint8_t val) {
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <port_write+0x6>
    23be:	0f 92       	push	r0
    23c0:	0f 92       	push	r0
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	6b 83       	std	Y+3, r22	; 0x03
	switch(Port -> port){
    23cc:	e9 81       	ldd	r30, Y+1	; 0x01
    23ce:	fa 81       	ldd	r31, Y+2	; 0x02
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	3d 83       	std	Y+5, r19	; 0x05
    23d8:	2c 83       	std	Y+4, r18	; 0x04
    23da:	8c 81       	ldd	r24, Y+4	; 0x04
    23dc:	9d 81       	ldd	r25, Y+5	; 0x05
    23de:	85 30       	cpi	r24, 0x05	; 5
    23e0:	91 05       	cpc	r25, r1
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <port_write+0x2e>
    23e4:	5f c0       	rjmp	.+190    	; 0x24a4 <port_write+0xec>
    23e6:	2c 81       	ldd	r18, Y+4	; 0x04
    23e8:	3d 81       	ldd	r19, Y+5	; 0x05
    23ea:	26 30       	cpi	r18, 0x06	; 6
    23ec:	31 05       	cpc	r19, r1
    23ee:	04 f5       	brge	.+64     	; 0x2430 <port_write+0x78>
    23f0:	8c 81       	ldd	r24, Y+4	; 0x04
    23f2:	9d 81       	ldd	r25, Y+5	; 0x05
    23f4:	82 30       	cpi	r24, 0x02	; 2
    23f6:	91 05       	cpc	r25, r1
    23f8:	09 f4       	brne	.+2      	; 0x23fc <port_write+0x44>
    23fa:	45 c0       	rjmp	.+138    	; 0x2486 <port_write+0xce>
    23fc:	2c 81       	ldd	r18, Y+4	; 0x04
    23fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2400:	23 30       	cpi	r18, 0x03	; 3
    2402:	31 05       	cpc	r19, r1
    2404:	54 f4       	brge	.+20     	; 0x241a <port_write+0x62>
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	9d 81       	ldd	r25, Y+5	; 0x05
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	91 f1       	breq	.+100    	; 0x2472 <port_write+0xba>
    240e:	2c 81       	ldd	r18, Y+4	; 0x04
    2410:	3d 81       	ldd	r19, Y+5	; 0x05
    2412:	21 30       	cpi	r18, 0x01	; 1
    2414:	31 05       	cpc	r19, r1
    2416:	91 f1       	breq	.+100    	; 0x247c <port_write+0xc4>
    2418:	62 c0       	rjmp	.+196    	; 0x24de <port_write+0x126>
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	83 30       	cpi	r24, 0x03	; 3
    2420:	91 05       	cpc	r25, r1
    2422:	b1 f1       	breq	.+108    	; 0x2490 <port_write+0xd8>
    2424:	2c 81       	ldd	r18, Y+4	; 0x04
    2426:	3d 81       	ldd	r19, Y+5	; 0x05
    2428:	24 30       	cpi	r18, 0x04	; 4
    242a:	31 05       	cpc	r19, r1
    242c:	b1 f1       	breq	.+108    	; 0x249a <port_write+0xe2>
    242e:	57 c0       	rjmp	.+174    	; 0x24de <port_write+0x126>
    2430:	8c 81       	ldd	r24, Y+4	; 0x04
    2432:	9d 81       	ldd	r25, Y+5	; 0x05
    2434:	88 30       	cpi	r24, 0x08	; 8
    2436:	91 05       	cpc	r25, r1
    2438:	09 f4       	brne	.+2      	; 0x243c <port_write+0x84>
    243a:	43 c0       	rjmp	.+134    	; 0x24c2 <port_write+0x10a>
    243c:	2c 81       	ldd	r18, Y+4	; 0x04
    243e:	3d 81       	ldd	r19, Y+5	; 0x05
    2440:	29 30       	cpi	r18, 0x09	; 9
    2442:	31 05       	cpc	r19, r1
    2444:	5c f4       	brge	.+22     	; 0x245c <port_write+0xa4>
    2446:	8c 81       	ldd	r24, Y+4	; 0x04
    2448:	9d 81       	ldd	r25, Y+5	; 0x05
    244a:	86 30       	cpi	r24, 0x06	; 6
    244c:	91 05       	cpc	r25, r1
    244e:	79 f1       	breq	.+94     	; 0x24ae <port_write+0xf6>
    2450:	2c 81       	ldd	r18, Y+4	; 0x04
    2452:	3d 81       	ldd	r19, Y+5	; 0x05
    2454:	27 30       	cpi	r18, 0x07	; 7
    2456:	31 05       	cpc	r19, r1
    2458:	79 f1       	breq	.+94     	; 0x24b8 <port_write+0x100>
    245a:	41 c0       	rjmp	.+130    	; 0x24de <port_write+0x126>
    245c:	8c 81       	ldd	r24, Y+4	; 0x04
    245e:	9d 81       	ldd	r25, Y+5	; 0x05
    2460:	89 30       	cpi	r24, 0x09	; 9
    2462:	91 05       	cpc	r25, r1
    2464:	99 f1       	breq	.+102    	; 0x24cc <port_write+0x114>
    2466:	2c 81       	ldd	r18, Y+4	; 0x04
    2468:	3d 81       	ldd	r19, Y+5	; 0x05
    246a:	2a 30       	cpi	r18, 0x0A	; 10
    246c:	31 05       	cpc	r19, r1
    246e:	99 f1       	breq	.+102    	; 0x24d6 <port_write+0x11e>
    2470:	36 c0       	rjmp	.+108    	; 0x24de <port_write+0x126>
		case A:
			BASE_A = val;
    2472:	e2 e2       	ldi	r30, 0x22	; 34
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	80 83       	st	Z, r24
    247a:	31 c0       	rjmp	.+98     	; 0x24de <port_write+0x126>
			break;
		case B:
			BASE_B = val;
    247c:	e5 e2       	ldi	r30, 0x25	; 37
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	80 83       	st	Z, r24
    2484:	2c c0       	rjmp	.+88     	; 0x24de <port_write+0x126>
			break;
		case C:
			BASE_C = val;
    2486:	e8 e2       	ldi	r30, 0x28	; 40
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	80 83       	st	Z, r24
    248e:	27 c0       	rjmp	.+78     	; 0x24de <port_write+0x126>
			break;
		case D:
			BASE_D = val;
    2490:	eb e2       	ldi	r30, 0x2B	; 43
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	80 83       	st	Z, r24
    2498:	22 c0       	rjmp	.+68     	; 0x24de <port_write+0x126>
			break;
		case E:
			BASE_E = val;
    249a:	ee e2       	ldi	r30, 0x2E	; 46
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	80 83       	st	Z, r24
    24a2:	1d c0       	rjmp	.+58     	; 0x24de <port_write+0x126>
			break;
		case F:
			BASE_F = val;
    24a4:	e1 e3       	ldi	r30, 0x31	; 49
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	80 83       	st	Z, r24
    24ac:	18 c0       	rjmp	.+48     	; 0x24de <port_write+0x126>
			break;
		case G:
			BASE_G = val;
    24ae:	e4 e3       	ldi	r30, 0x34	; 52
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	80 83       	st	Z, r24
    24b6:	13 c0       	rjmp	.+38     	; 0x24de <port_write+0x126>
			break;
		case H:
			BASE_H = val;
    24b8:	e2 e0       	ldi	r30, 0x02	; 2
    24ba:	f1 e0       	ldi	r31, 0x01	; 1
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	80 83       	st	Z, r24
    24c0:	0e c0       	rjmp	.+28     	; 0x24de <port_write+0x126>
			break;
		case J:
			BASE_J = val;
    24c2:	e5 e0       	ldi	r30, 0x05	; 5
    24c4:	f1 e0       	ldi	r31, 0x01	; 1
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	80 83       	st	Z, r24
    24ca:	09 c0       	rjmp	.+18     	; 0x24de <port_write+0x126>
			break;
		case K:
			BASE_K = val;
    24cc:	e8 e0       	ldi	r30, 0x08	; 8
    24ce:	f1 e0       	ldi	r31, 0x01	; 1
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	80 83       	st	Z, r24
    24d4:	04 c0       	rjmp	.+8      	; 0x24de <port_write+0x126>
			break;
		case L:
			BASE_L = val;
    24d6:	eb e0       	ldi	r30, 0x0B	; 11
    24d8:	f1 e0       	ldi	r31, 0x01	; 1
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	80 83       	st	Z, r24
			break;
		}
}
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <__vector_29>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
void __vector_29 (void) __attribute__ ((signal,used));//Declaration
void __vector_29(void)/*ADC ISR*/ //Definition
{
    24ee:	1f 92       	push	r1
    24f0:	0f 92       	push	r0
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	0f 92       	push	r0
    24f6:	00 90 5b 00 	lds	r0, 0x005B
    24fa:	0f 92       	push	r0
    24fc:	11 24       	eor	r1, r1
    24fe:	2f 93       	push	r18
    2500:	3f 93       	push	r19
    2502:	4f 93       	push	r20
    2504:	5f 93       	push	r21
    2506:	6f 93       	push	r22
    2508:	7f 93       	push	r23
    250a:	8f 93       	push	r24
    250c:	9f 93       	push	r25
    250e:	af 93       	push	r26
    2510:	bf 93       	push	r27
    2512:	ef 93       	push	r30
    2514:	ff 93       	push	r31
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
	/* Read ADC Data after conversion complete */
	g_adcResult = ADC;
    251e:	e8 e7       	ldi	r30, 0x78	; 120
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	91 81       	ldd	r25, Z+1	; 0x01
    2526:	90 93 43 03 	sts	0x0343, r25
    252a:	80 93 42 03 	sts	0x0342, r24
	if(ADC_callBackPtr != NULL_PTR)
    252e:	80 91 44 03 	lds	r24, 0x0344
    2532:	90 91 45 03 	lds	r25, 0x0345
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	29 f0       	breq	.+10     	; 0x2544 <__vector_29+0x56>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*ADC_callBackPtr)();
    253a:	e0 91 44 03 	lds	r30, 0x0344
    253e:	f0 91 45 03 	lds	r31, 0x0345
    2542:	19 95       	eicall
	}



}/*end of __vector_29()*/
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	ff 91       	pop	r31
    254a:	ef 91       	pop	r30
    254c:	bf 91       	pop	r27
    254e:	af 91       	pop	r26
    2550:	9f 91       	pop	r25
    2552:	8f 91       	pop	r24
    2554:	7f 91       	pop	r23
    2556:	6f 91       	pop	r22
    2558:	5f 91       	pop	r21
    255a:	4f 91       	pop	r20
    255c:	3f 91       	pop	r19
    255e:	2f 91       	pop	r18
    2560:	0f 90       	pop	r0
    2562:	00 92 5b 00 	sts	0x005B, r0
    2566:	0f 90       	pop	r0
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	0f 90       	pop	r0
    256c:	1f 90       	pop	r1
    256e:	18 95       	reti

00002570 <ADC_INT_EN>:


/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void ADC_INT_EN(){
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADIE);
    2578:	aa e7       	ldi	r26, 0x7A	; 122
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	ea e7       	ldi	r30, 0x7A	; 122
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	88 60       	ori	r24, 0x08	; 8
    2584:	8c 93       	st	X, r24
}
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <ADC_INT_DIS>:
void ADC_INT_DIS(){
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~(1<<ADIE);
    2594:	aa e7       	ldi	r26, 0x7A	; 122
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	ea e7       	ldi	r30, 0x7A	; 122
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	87 7f       	andi	r24, 0xF7	; 247
    25a0:	8c 93       	st	X, r24
}
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <ADC_init>:
void ADC_init(void)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    25b0:	ec e7       	ldi	r30, 0x7C	; 124
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	10 82       	st	Z, r1
	CLEAR_BIT(ADCSRB, MUX5);
    25b6:	ab e7       	ldi	r26, 0x7B	; 123
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	eb e7       	ldi	r30, 0x7B	; 123
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	87 7f       	andi	r24, 0xF7	; 247
    25c2:	8c 93       	st	X, r24
	DDRF =0;
    25c4:	e0 e3       	ldi	r30, 0x30	; 48
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 1 Enable ADC Interrupt ----  | (1<<ADIE)
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN)  | (1<<ADPS1) | (1<<ADPS0);
    25ca:	ea e7       	ldi	r30, 0x7A	; 122
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	83 e8       	ldi	r24, 0x83	; 131
    25d0:	80 83       	st	Z, r24
	DIDR0 = 1<<ADC0D | 1<<ADC1D | 1<<ADC2D;
    25d2:	ee e7       	ldi	r30, 0x7E	; 126
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	87 e0       	ldi	r24, 0x07	; 7
    25d8:	80 83       	st	Z, r24
}
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <ADC_readChannel>:

uint32_t ADC_readChannel(uint8_t channel_num)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	0f 92       	push	r0
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; 			/* channel number must be from 0 --> 7 */
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	87 70       	andi	r24, 0x07	; 7
    25f0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; 					/* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    25f2:	ac e7       	ldi	r26, 0x7C	; 124
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	ec e7       	ldi	r30, 0x7C	; 124
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	80 7e       	andi	r24, 0xE0	; 224
    25fe:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; 	/* choose the correct channel by setting the channel number in MUX4:0 bits */
    2600:	ac e7       	ldi	r26, 0x7C	; 124
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	ec e7       	ldi	r30, 0x7C	; 124
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	90 81       	ld	r25, Z
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	89 2b       	or	r24, r25
    260e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); 			/* start conversion write '1' to ADSC */
    2610:	aa e7       	ldi	r26, 0x7A	; 122
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	ea e7       	ldi	r30, 0x7A	; 122
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	80 64       	ori	r24, 0x40	; 64
    261c:	8c 93       	st	X, r24
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
    261e:	ea e7       	ldi	r30, 0x7A	; 122
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	80 71       	andi	r24, 0x10	; 16
    262a:	90 70       	andi	r25, 0x00	; 0
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	b9 f3       	breq	.-18     	; 0x261e <ADC_readChannel+0x3e>
	g_adcResult = ADC;
    2630:	e8 e7       	ldi	r30, 0x78	; 120
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	90 93 43 03 	sts	0x0343, r25
    263c:	80 93 42 03 	sts	0x0342, r24
	return ((uint32_t)g_adcResult*150*5)/(1023*1.5);
    2640:	80 91 42 03 	lds	r24, 0x0342
    2644:	90 91 43 03 	lds	r25, 0x0343
    2648:	cc 01       	movw	r24, r24
    264a:	a0 e0       	ldi	r26, 0x00	; 0
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	2e ee       	ldi	r18, 0xEE	; 238
    2650:	32 e0       	ldi	r19, 0x02	; 2
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	bc 01       	movw	r22, r24
    2658:	cd 01       	movw	r24, r26
    265a:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsi3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	bc 01       	movw	r22, r24
    2664:	cd 01       	movw	r24, r26
    2666:	0e 94 9b 03 	call	0x736	; 0x736 <__floatunsisf>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 ed       	ldi	r19, 0xD0	; 208
    2676:	4f eb       	ldi	r20, 0xBF	; 191
    2678:	54 e4       	ldi	r21, 0x44	; 68
    267a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__divsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 95 00 	call	0x12a	; 0x12a <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
}
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0f 90       	pop	r0
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <ADC_setCallBack>:

void ADC_setCallBack(void(*a_ptr)(void))
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	0f 92       	push	r0
    26a0:	0f 92       	push	r0
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	ADC_callBackPtr = a_ptr;
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	9a 81       	ldd	r25, Y+2	; 0x02
    26ae:	90 93 45 03 	sts	0x0345, r25
    26b2:	80 93 44 03 	sts	0x0344, r24
}
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <Compare_Action>:
#include "voice.h"
#include "stdlib.h"

extern uint8_t auto_state;

void Compare_Action(){
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	2d 97       	sbiw	r28, 0x0d	; 13
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
	char String[5];
	Bluetooth_Write_String("ADC");
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	92 e0       	ldi	r25, 0x02	; 2
    26d8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Bluetooth_Write_String>
	ADC_INT_DIS();
    26dc:	0e 94 c6 12 	call	0x258c	; 0x258c <ADC_INT_DIS>

	uint32_t SR1 = ADC_readChannel(SEN1);
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <ADC_readChannel>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8d 83       	std	Y+5, r24	; 0x05
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	af 83       	std	Y+7, r26	; 0x07
    26f0:	b8 87       	std	Y+8, r27	; 0x08
	itoa(SR1,String,10);
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	9e 81       	ldd	r25, Y+6	; 0x06
    26f6:	9e 01       	movw	r18, r28
    26f8:	27 5f       	subi	r18, 0xF7	; 247
    26fa:	3f 4f       	sbci	r19, 0xFF	; 255
    26fc:	b9 01       	movw	r22, r18
    26fe:	4a e0       	ldi	r20, 0x0A	; 10
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
	Bluetooth_Write_String(String);
    2706:	ce 01       	movw	r24, r28
    2708:	09 96       	adiw	r24, 0x09	; 9
    270a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Bluetooth_Write_String>
	Bluetooth_Write('-');
    270e:	8d e2       	ldi	r24, 0x2D	; 45
    2710:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Bluetooth_Write>

	uint32_t SR2 = ADC_readChannel(SEN2);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <ADC_readChannel>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	ab 83       	std	Y+3, r26	; 0x03
    2724:	bc 83       	std	Y+4, r27	; 0x04
	itoa(SR1,String,10);
    2726:	8d 81       	ldd	r24, Y+5	; 0x05
    2728:	9e 81       	ldd	r25, Y+6	; 0x06
    272a:	9e 01       	movw	r18, r28
    272c:	27 5f       	subi	r18, 0xF7	; 247
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	b9 01       	movw	r22, r18
    2732:	4a e0       	ldi	r20, 0x0A	; 10
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
	Bluetooth_Write_String(String);
    273a:	ce 01       	movw	r24, r28
    273c:	09 96       	adiw	r24, 0x09	; 9
    273e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Bluetooth_Write_String>

	if(SR1 > SR2){
    2742:	2d 81       	ldd	r18, Y+5	; 0x05
    2744:	3e 81       	ldd	r19, Y+6	; 0x06
    2746:	4f 81       	ldd	r20, Y+7	; 0x07
    2748:	58 85       	ldd	r21, Y+8	; 0x08
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	ab 81       	ldd	r26, Y+3	; 0x03
    2750:	bc 81       	ldd	r27, Y+4	; 0x04
    2752:	82 17       	cp	r24, r18
    2754:	93 07       	cpc	r25, r19
    2756:	a4 07       	cpc	r26, r20
    2758:	b5 07       	cpc	r27, r21
    275a:	20 f4       	brcc	.+8      	; 0x2764 <Compare_Action+0xa4>
		auto_state = 'R';
    275c:	82 e5       	ldi	r24, 0x52	; 82
    275e:	80 93 3b 03 	sts	0x033B, r24
    2762:	14 c0       	rjmp	.+40     	; 0x278c <Compare_Action+0xcc>
	}
	else if(SR1 == SR2){
    2764:	2d 81       	ldd	r18, Y+5	; 0x05
    2766:	3e 81       	ldd	r19, Y+6	; 0x06
    2768:	4f 81       	ldd	r20, Y+7	; 0x07
    276a:	58 85       	ldd	r21, Y+8	; 0x08
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	ab 81       	ldd	r26, Y+3	; 0x03
    2772:	bc 81       	ldd	r27, Y+4	; 0x04
    2774:	28 17       	cp	r18, r24
    2776:	39 07       	cpc	r19, r25
    2778:	4a 07       	cpc	r20, r26
    277a:	5b 07       	cpc	r21, r27
    277c:	21 f4       	brne	.+8      	; 0x2786 <Compare_Action+0xc6>
		auto_state = 'F';
    277e:	86 e4       	ldi	r24, 0x46	; 70
    2780:	80 93 3b 03 	sts	0x033B, r24
    2784:	03 c0       	rjmp	.+6      	; 0x278c <Compare_Action+0xcc>
	}
	else{
		auto_state = 'L';
    2786:	8c e4       	ldi	r24, 0x4C	; 76
    2788:	80 93 3b 03 	sts	0x033B, r24
	}
}
    278c:	2d 96       	adiw	r28, 0x0d	; 13
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <Voice_Sensor_Init>:

void Voice_Sensor_Init(){
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
    27a6:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <ADC_init>
	ADC_setCallBack(Compare_Action);
    27aa:	80 e6       	ldi	r24, 0x60	; 96
    27ac:	93 e1       	ldi	r25, 0x13	; 19
    27ae:	0e 94 4d 13 	call	0x269a	; 0x269a <ADC_setCallBack>
}
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <sensorRead>:
uint32_t sensorRead(uint8_t v_sensor){
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	0f 92       	push	r0
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	89 83       	std	Y+1, r24	; 0x01
	ADC_readChannel(v_sensor);
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <ADC_readChannel>
	//_delay_ms(30);
	return g_adcResult;
    27ca:	80 91 42 03 	lds	r24, 0x0342
    27ce:	90 91 43 03 	lds	r25, 0x0343
    27d2:	cc 01       	movw	r24, r24
    27d4:	a0 e0       	ldi	r26, 0x00	; 0
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
}
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	0f 90       	pop	r0
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <Servo_Init>:


uint8_t duty_cycle_S1 = 6;
uint8_t duty_cycle_S2 = 6;

void Servo_Init(){
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	2c 97       	sbiw	r28, 0x0c	; 12
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
	//three pins initialization
	PIN_Config_t pc7 = {OUTPUT, 7, 0, C};
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	87 e0       	ldi	r24, 0x07	; 7
    27fe:	8a 83       	std	Y+2, r24	; 0x02
    2800:	1b 82       	std	Y+3, r1	; 0x03
    2802:	82 e0       	ldi	r24, 0x02	; 2
    2804:	8c 83       	std	Y+4, r24	; 0x04
	PIN_Config_t pg5 = {OUTPUT, 5, 0, G};
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	8d 83       	std	Y+5, r24	; 0x05
    280a:	85 e0       	ldi	r24, 0x05	; 5
    280c:	8e 83       	std	Y+6, r24	; 0x06
    280e:	1f 82       	std	Y+7, r1	; 0x07
    2810:	86 e0       	ldi	r24, 0x06	; 6
    2812:	88 87       	std	Y+8, r24	; 0x08
	PIN_Config_t pb4 = {OUTPUT, 4, 0, B};
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	89 87       	std	Y+9, r24	; 0x09
    2818:	84 e0       	ldi	r24, 0x04	; 4
    281a:	8a 87       	std	Y+10, r24	; 0x0a
    281c:	1b 86       	std	Y+11, r1	; 0x0b
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	8c 87       	std	Y+12, r24	; 0x0c
	pin_init(&pc7);
    2822:	ce 01       	movw	r24, r28
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	0e 94 37 08 	call	0x106e	; 0x106e <pin_init>
	pin_init(&pg5);
    282a:	ce 01       	movw	r24, r28
    282c:	05 96       	adiw	r24, 0x05	; 5
    282e:	0e 94 37 08 	call	0x106e	; 0x106e <pin_init>
	pin_init(&pb4);
    2832:	ce 01       	movw	r24, r28
    2834:	09 96       	adiw	r24, 0x09	; 9
    2836:	0e 94 37 08 	call	0x106e	; 0x106e <pin_init>

	TIMER0_voidInitializeTIMER0();
    283a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <TIMER0_voidInitializeTIMER0>
	TIMER2_voidInitializeTimer2();
    283e:	0e 94 4b 07 	call	0xe96	; 0xe96 <TIMER2_voidInitializeTimer2>
	TIMER0_voidFastPWM(duty_cycle_S1);
    2842:	80 91 28 03 	lds	r24, 0x0328
    2846:	0e 94 27 08 	call	0x104e	; 0x104e <TIMER0_voidFastPWM>
	TIMER2_voidFastPWM(duty_cycle_S2);
    284a:	80 91 29 03 	lds	r24, 0x0329
    284e:	88 2f       	mov	r24, r24
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 a2 07 	call	0xf44	; 0xf44 <TIMER2_voidFastPWM>

}
    2856:	2c 96       	adiw	r28, 0x0c	; 12
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <Increase_angle>:

void Increase_angle(servo_num ser_num)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	00 d0       	rcall	.+0      	; 0x286e <Increase_angle+0x6>
    286e:	0f 92       	push	r0
    2870:	0f 92       	push	r0
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	89 83       	std	Y+1, r24	; 0x01
	switch(ser_num){
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	28 2f       	mov	r18, r24
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	3d 83       	std	Y+5, r19	; 0x05
    2880:	2c 83       	std	Y+4, r18	; 0x04
    2882:	8c 81       	ldd	r24, Y+4	; 0x04
    2884:	9d 81       	ldd	r25, Y+5	; 0x05
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	31 f0       	breq	.+12     	; 0x2896 <Increase_angle+0x2e>
    288a:	2c 81       	ldd	r18, Y+4	; 0x04
    288c:	3d 81       	ldd	r19, Y+5	; 0x05
    288e:	21 30       	cpi	r18, 0x01	; 1
    2890:	31 05       	cpc	r19, r1
    2892:	b1 f0       	breq	.+44     	; 0x28c0 <Increase_angle+0x58>
    2894:	2b c0       	rjmp	.+86     	; 0x28ec <Increase_angle+0x84>
	case 0:
		duty_cycle_S1 = duty_cycle_S1 < 15? duty_cycle_S1 +1 : duty_cycle_S1;
    2896:	80 91 28 03 	lds	r24, 0x0328
    289a:	8f 30       	cpi	r24, 0x0F	; 15
    289c:	30 f4       	brcc	.+12     	; 0x28aa <Increase_angle+0x42>
    289e:	80 91 28 03 	lds	r24, 0x0328
    28a2:	38 2f       	mov	r19, r24
    28a4:	3f 5f       	subi	r19, 0xFF	; 255
    28a6:	3b 83       	std	Y+3, r19	; 0x03
    28a8:	03 c0       	rjmp	.+6      	; 0x28b0 <Increase_angle+0x48>
    28aa:	80 91 28 03 	lds	r24, 0x0328
    28ae:	8b 83       	std	Y+3, r24	; 0x03
    28b0:	9b 81       	ldd	r25, Y+3	; 0x03
    28b2:	90 93 28 03 	sts	0x0328, r25
		TIMER0_voidFastPWM(duty_cycle_S1);
    28b6:	80 91 28 03 	lds	r24, 0x0328
    28ba:	0e 94 27 08 	call	0x104e	; 0x104e <TIMER0_voidFastPWM>
    28be:	16 c0       	rjmp	.+44     	; 0x28ec <Increase_angle+0x84>
		break;
	case 1:
		duty_cycle_S2 = duty_cycle_S2 < 15? duty_cycle_S2 +1 : duty_cycle_S2;
    28c0:	80 91 29 03 	lds	r24, 0x0329
    28c4:	8f 30       	cpi	r24, 0x0F	; 15
    28c6:	30 f4       	brcc	.+12     	; 0x28d4 <Increase_angle+0x6c>
    28c8:	80 91 29 03 	lds	r24, 0x0329
    28cc:	28 2f       	mov	r18, r24
    28ce:	2f 5f       	subi	r18, 0xFF	; 255
    28d0:	2a 83       	std	Y+2, r18	; 0x02
    28d2:	03 c0       	rjmp	.+6      	; 0x28da <Increase_angle+0x72>
    28d4:	30 91 29 03 	lds	r19, 0x0329
    28d8:	3a 83       	std	Y+2, r19	; 0x02
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	80 93 29 03 	sts	0x0329, r24
		TIMER2_voidFastPWM(duty_cycle_S2);
    28e0:	80 91 29 03 	lds	r24, 0x0329
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 a2 07 	call	0xf44	; 0xf44 <TIMER2_voidFastPWM>
		break;
//	case 2:
//		TIMER2_voidFastPWM(duty_cycle, Channel_A2);
//		break;
	}
}
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	08 95       	ret

000028fc <Decrease_angle>:


void Decrease_angle(servo_num ser_num)
{
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	00 d0       	rcall	.+0      	; 0x2902 <Decrease_angle+0x6>
    2902:	0f 92       	push	r0
    2904:	0f 92       	push	r0
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	89 83       	std	Y+1, r24	; 0x01
	switch(ser_num){
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	28 2f       	mov	r18, r24
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	3d 83       	std	Y+5, r19	; 0x05
    2914:	2c 83       	std	Y+4, r18	; 0x04
    2916:	8c 81       	ldd	r24, Y+4	; 0x04
    2918:	9d 81       	ldd	r25, Y+5	; 0x05
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	31 f0       	breq	.+12     	; 0x292a <Decrease_angle+0x2e>
    291e:	2c 81       	ldd	r18, Y+4	; 0x04
    2920:	3d 81       	ldd	r19, Y+5	; 0x05
    2922:	21 30       	cpi	r18, 0x01	; 1
    2924:	31 05       	cpc	r19, r1
    2926:	b1 f0       	breq	.+44     	; 0x2954 <Decrease_angle+0x58>
    2928:	2b c0       	rjmp	.+86     	; 0x2980 <Decrease_angle+0x84>
	case 0:
		duty_cycle_S1 = duty_cycle_S1 > 6? duty_cycle_S1 -1 : duty_cycle_S1;
    292a:	80 91 28 03 	lds	r24, 0x0328
    292e:	87 30       	cpi	r24, 0x07	; 7
    2930:	30 f0       	brcs	.+12     	; 0x293e <Decrease_angle+0x42>
    2932:	80 91 28 03 	lds	r24, 0x0328
    2936:	38 2f       	mov	r19, r24
    2938:	31 50       	subi	r19, 0x01	; 1
    293a:	3b 83       	std	Y+3, r19	; 0x03
    293c:	03 c0       	rjmp	.+6      	; 0x2944 <Decrease_angle+0x48>
    293e:	80 91 28 03 	lds	r24, 0x0328
    2942:	8b 83       	std	Y+3, r24	; 0x03
    2944:	9b 81       	ldd	r25, Y+3	; 0x03
    2946:	90 93 28 03 	sts	0x0328, r25
		TIMER0_voidFastPWM(duty_cycle_S1);
    294a:	80 91 28 03 	lds	r24, 0x0328
    294e:	0e 94 27 08 	call	0x104e	; 0x104e <TIMER0_voidFastPWM>
    2952:	16 c0       	rjmp	.+44     	; 0x2980 <Decrease_angle+0x84>
		break;
	case 1:
		duty_cycle_S2 = duty_cycle_S2 > 6? duty_cycle_S2 -1 : duty_cycle_S2;
    2954:	80 91 29 03 	lds	r24, 0x0329
    2958:	87 30       	cpi	r24, 0x07	; 7
    295a:	30 f0       	brcs	.+12     	; 0x2968 <Decrease_angle+0x6c>
    295c:	80 91 29 03 	lds	r24, 0x0329
    2960:	28 2f       	mov	r18, r24
    2962:	21 50       	subi	r18, 0x01	; 1
    2964:	2a 83       	std	Y+2, r18	; 0x02
    2966:	03 c0       	rjmp	.+6      	; 0x296e <Decrease_angle+0x72>
    2968:	30 91 29 03 	lds	r19, 0x0329
    296c:	3a 83       	std	Y+2, r19	; 0x02
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	80 93 29 03 	sts	0x0329, r24
		TIMER2_voidFastPWM(duty_cycle_S2);
    2974:	80 91 29 03 	lds	r24, 0x0329
    2978:	88 2f       	mov	r24, r24
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 a2 07 	call	0xf44	; 0xf44 <TIMER2_voidFastPWM>
		break;
//	case 2:
//		TIMER2_voidFastPWM(duty_cycle, Channel_A2);
//		break;
	}
}
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <motor_init>:
PIN_Config_t pd1 = {OUTPUT, 1, 0, D};
PIN_Config_t pd2 = {OUTPUT, 2, 0, D};
PIN_Config_t pd3 = {OUTPUT, 3, 0, D};

void motor_init()
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	00 d0       	rcall	.+0      	; 0x2996 <motor_init+0x6>
    2996:	0f 92       	push	r0
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62

	pin_init(&pd0);
    299c:	8a e2       	ldi	r24, 0x2A	; 42
    299e:	93 e0       	ldi	r25, 0x03	; 3
    29a0:	0e 94 37 08 	call	0x106e	; 0x106e <pin_init>
	pin_init(&pd1);
    29a4:	8e e2       	ldi	r24, 0x2E	; 46
    29a6:	93 e0       	ldi	r25, 0x03	; 3
    29a8:	0e 94 37 08 	call	0x106e	; 0x106e <pin_init>
	pin_init(&pd2);
    29ac:	82 e3       	ldi	r24, 0x32	; 50
    29ae:	93 e0       	ldi	r25, 0x03	; 3
    29b0:	0e 94 37 08 	call	0x106e	; 0x106e <pin_init>
	pin_init(&pd3);
    29b4:	86 e3       	ldi	r24, 0x36	; 54
    29b6:	93 e0       	ldi	r25, 0x03	; 3
    29b8:	0e 94 37 08 	call	0x106e	; 0x106e <pin_init>
	PIN_Config_t ph6 = {OUTPUT, 6, 0, H};
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	86 e0       	ldi	r24, 0x06	; 6
    29c2:	8a 83       	std	Y+2, r24	; 0x02
    29c4:	1b 82       	std	Y+3, r1	; 0x03
    29c6:	87 e0       	ldi	r24, 0x07	; 7
    29c8:	8c 83       	std	Y+4, r24	; 0x04
	pin_init(&ph6);
    29ca:	ce 01       	movw	r24, r28
    29cc:	01 96       	adiw	r24, 0x01	; 1
    29ce:	0e 94 37 08 	call	0x106e	; 0x106e <pin_init>
	TIMER2_voidInitializeTimer2();
    29d2:	0e 94 4b 07 	call	0xe96	; 0xe96 <TIMER2_voidInitializeTimer2>
}
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <motor_start>:

void motor_start(uint8_t speed, Direction dir)
{
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	0f 92       	push	r0
    29ea:	0f 92       	push	r0
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	6a 83       	std	Y+2, r22	; 0x02
	set_mspeed(speed);
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <set_mspeed>
	set_direction(dir);
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <set_direction>
}
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <set_mspeed>:

void set_mspeed(uint8_t duty_cycle)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	0f 92       	push	r0
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	89 83       	std	Y+1, r24	; 0x01
	//TIMER2_voidFastPWM(duty_cycle, Channel_A2);
	//TIMER2_voidFastPWM(duty_cycle, Channel_B2);
}
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <set_direction>:

void set_direction(uint8_t dir)
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <set_direction+0x6>
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	89 83       	std	Y+1, r24	; 0x01
	switch(dir)
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	28 2f       	mov	r18, r24
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	3b 83       	std	Y+3, r19	; 0x03
    2a32:	2a 83       	std	Y+2, r18	; 0x02
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	9b 81       	ldd	r25, Y+3	; 0x03
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	59 f1       	breq	.+86     	; 0x2a94 <set_direction+0x76>
    2a3e:	2a 81       	ldd	r18, Y+2	; 0x02
    2a40:	3b 81       	ldd	r19, Y+3	; 0x03
    2a42:	22 30       	cpi	r18, 0x02	; 2
    2a44:	31 05       	cpc	r19, r1
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <set_direction+0x34>
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	69 f0       	breq	.+26     	; 0x2a6a <set_direction+0x4c>
    2a50:	66 c0       	rjmp	.+204    	; 0x2b1e <set_direction+0x100>
    2a52:	2a 81       	ldd	r18, Y+2	; 0x02
    2a54:	3b 81       	ldd	r19, Y+3	; 0x03
    2a56:	22 30       	cpi	r18, 0x02	; 2
    2a58:	31 05       	cpc	r19, r1
    2a5a:	89 f1       	breq	.+98     	; 0x2abe <set_direction+0xa0>
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a60:	83 30       	cpi	r24, 0x03	; 3
    2a62:	91 05       	cpc	r25, r1
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <set_direction+0x4a>
    2a66:	47 c0       	rjmp	.+142    	; 0x2af6 <set_direction+0xd8>
    2a68:	5a c0       	rjmp	.+180    	; 0x2b1e <set_direction+0x100>
	{
	case Forward:
		pin_write(&pd0, 0);
    2a6a:	8a e2       	ldi	r24, 0x2A	; 42
    2a6c:	93 e0       	ldi	r25, 0x03	; 3
    2a6e:	60 e0       	ldi	r22, 0x00	; 0
    2a70:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <pin_write>
		pin_write(&pd1, 1);
    2a74:	8e e2       	ldi	r24, 0x2E	; 46
    2a76:	93 e0       	ldi	r25, 0x03	; 3
    2a78:	61 e0       	ldi	r22, 0x01	; 1
    2a7a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <pin_write>
		pin_write(&pd2, 0);
    2a7e:	82 e3       	ldi	r24, 0x32	; 50
    2a80:	93 e0       	ldi	r25, 0x03	; 3
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <pin_write>
		pin_write(&pd3, 1);
    2a88:	86 e3       	ldi	r24, 0x36	; 54
    2a8a:	93 e0       	ldi	r25, 0x03	; 3
    2a8c:	61 e0       	ldi	r22, 0x01	; 1
    2a8e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <pin_write>
    2a92:	45 c0       	rjmp	.+138    	; 0x2b1e <set_direction+0x100>
		break;
	case Backward:
		Write_Pin(D, 0, HIGH);
    2a94:	83 e0       	ldi	r24, 0x03	; 3
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
		Write_Pin(D, 1, low);
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	61 e0       	ldi	r22, 0x01	; 1
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
		Write_Pin(D, 2, HIGH);
    2aa8:	83 e0       	ldi	r24, 0x03	; 3
    2aaa:	62 e0       	ldi	r22, 0x02	; 2
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
		Write_Pin(D, 3, low);
    2ab2:	83 e0       	ldi	r24, 0x03	; 3
    2ab4:	63 e0       	ldi	r22, 0x03	; 3
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
    2abc:	30 c0       	rjmp	.+96     	; 0x2b1e <set_direction+0x100>
		break;
	case Left:
		Write_Pin(D, 0, low);
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
		SET_BIT(BASE_D, 1);
    2ac8:	ab e2       	ldi	r26, 0x2B	; 43
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	eb e2       	ldi	r30, 0x2B	; 43
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	82 60       	ori	r24, 0x02	; 2
    2ad4:	8c 93       	st	X, r24
		Write_Pin(D, 1, HIGH);
    2ad6:	83 e0       	ldi	r24, 0x03	; 3
    2ad8:	61 e0       	ldi	r22, 0x01	; 1
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
		Write_Pin(D, 2, HIGH);
    2ae0:	83 e0       	ldi	r24, 0x03	; 3
    2ae2:	62 e0       	ldi	r22, 0x02	; 2
    2ae4:	41 e0       	ldi	r20, 0x01	; 1
    2ae6:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
		Write_Pin(D, 3, low);
    2aea:	83 e0       	ldi	r24, 0x03	; 3
    2aec:	63 e0       	ldi	r22, 0x03	; 3
    2aee:	40 e0       	ldi	r20, 0x00	; 0
    2af0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
    2af4:	14 c0       	rjmp	.+40     	; 0x2b1e <set_direction+0x100>
		break;
	case Right:
		Write_Pin(D, 0, HIGH);
    2af6:	83 e0       	ldi	r24, 0x03	; 3
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	41 e0       	ldi	r20, 0x01	; 1
    2afc:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
		Write_Pin(D, 1, low);
    2b00:	83 e0       	ldi	r24, 0x03	; 3
    2b02:	61 e0       	ldi	r22, 0x01	; 1
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
		Write_Pin(D, 2, low);
    2b0a:	83 e0       	ldi	r24, 0x03	; 3
    2b0c:	62 e0       	ldi	r22, 0x02	; 2
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
		Write_Pin(D, 3, HIGH);
    2b14:	83 e0       	ldi	r24, 0x03	; 3
    2b16:	63 e0       	ldi	r22, 0x03	; 3
    2b18:	41 e0       	ldi	r20, 0x01	; 1
    2b1a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
		break;
	}
}
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <motor_stop>:

void motor_stop()
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
	Write_Pin(D, 0, low);
    2b32:	83 e0       	ldi	r24, 0x03	; 3
    2b34:	60 e0       	ldi	r22, 0x00	; 0
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
	Write_Pin(D, 1, low);
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	61 e0       	ldi	r22, 0x01	; 1
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
	Write_Pin(D, 2, low);
    2b46:	83 e0       	ldi	r24, 0x03	; 3
    2b48:	62 e0       	ldi	r22, 0x02	; 2
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
	Write_Pin(D, 3, low);
    2b50:	83 e0       	ldi	r24, 0x03	; 3
    2b52:	63 e0       	ldi	r22, 0x03	; 3
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Write_Pin>
}
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <LED_Init>:
#include "../../HAL/LED/LED.h"
typedef unsigned char         uint8_t;

#include "avr/io.h"

void LED_Init(){
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xff;
    2b68:	e1 e2       	ldi	r30, 0x21	; 33
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	80 83       	st	Z, r24
	PORTA = 0;
    2b70:	e2 e2       	ldi	r30, 0x22	; 34
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	10 82       	st	Z, r1
}
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <LED_ON>:

void LED_ON(){
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
	PORTA|= 1;
    2b84:	a2 e2       	ldi	r26, 0x22	; 34
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e2 e2       	ldi	r30, 0x22	; 34
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	81 60       	ori	r24, 0x01	; 1
    2b90:	8c 93       	st	X, r24

}
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <LED_OFF>:
void LED_OFF(){
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
	PORTA &= ~1;
    2ba0:	a2 e2       	ldi	r26, 0x22	; 34
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e2 e2       	ldi	r30, 0x22	; 34
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	8e 7f       	andi	r24, 0xFE	; 254
    2bac:	8c 93       	st	X, r24

}
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <LED2_ON>:
void LED2_ON(){
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	PORTA |= 2;
    2bbc:	a2 e2       	ldi	r26, 0x22	; 34
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e2 e2       	ldi	r30, 0x22	; 34
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	82 60       	ori	r24, 0x02	; 2
    2bc8:	8c 93       	st	X, r24

}
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <LED2_OFF>:
void LED2_OFF(){
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
	PORTA &= ~(1<<2);
    2bd8:	a2 e2       	ldi	r26, 0x22	; 34
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e2 e2       	ldi	r30, 0x22	; 34
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	8b 7f       	andi	r24, 0xFB	; 251
    2be4:	8c 93       	st	X, r24

}
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <Bluetooth_ISR>:
#include "../../MCAL/UART/uart.h"
#include "bluetooth.h"

extern uint8_t system_state;

void Bluetooth_ISR(){
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <Bluetooth_ISR+0x6>
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
	USART_INT_DIS();
    2bf6:	0e 94 50 06 	call	0xca0	; 0xca0 <USART_INT_DIS>
	uint8_t data = USART_Receive();
    2bfa:	0e 94 0b 07 	call	0xe16	; 0xe16 <USART_Receive>
    2bfe:	89 83       	std	Y+1, r24	; 0x01
	switch(system_state){
    2c00:	80 91 3a 03 	lds	r24, 0x033A
    2c04:	28 2f       	mov	r18, r24
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	3b 83       	std	Y+3, r19	; 0x03
    2c0a:	2a 83       	std	Y+2, r18	; 0x02
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c10:	80 33       	cpi	r24, 0x30	; 48
    2c12:	91 05       	cpc	r25, r1
    2c14:	31 f0       	breq	.+12     	; 0x2c22 <Bluetooth_ISR+0x36>
    2c16:	2a 81       	ldd	r18, Y+2	; 0x02
    2c18:	3b 81       	ldd	r19, Y+3	; 0x03
    2c1a:	21 33       	cpi	r18, 0x31	; 49
    2c1c:	31 05       	cpc	r19, r1
    2c1e:	11 f1       	breq	.+68     	; 0x2c64 <Bluetooth_ISR+0x78>
    2c20:	25 c0       	rjmp	.+74     	; 0x2c6c <Bluetooth_ISR+0x80>
	case '0':
		uart_sendstr("autonomus");
    2c22:	84 e0       	ldi	r24, 0x04	; 4
    2c24:	92 e0       	ldi	r25, 0x02	; 2
    2c26:	0e 94 d7 06 	call	0xdae	; 0xdae <uart_sendstr>
		uart_sendint(data);
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <uart_sendint>
		//20 is a magic number
		if(data == 'A'){
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	81 34       	cpi	r24, 0x41	; 65
    2c34:	a1 f4       	brne	.+40     	; 0x2c5e <Bluetooth_ISR+0x72>
			//switch system state & disable interrupt
			system_state = '1';
    2c36:	81 e3       	ldi	r24, 0x31	; 49
    2c38:	80 93 3a 03 	sts	0x033A, r24
			uart_sendint(system_state);
    2c3c:	80 91 3a 03 	lds	r24, 0x033A
    2c40:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <uart_sendint>
			Delay(500);
    2c44:	64 ef       	ldi	r22, 0xF4	; 244
    2c46:	71 e0       	ldi	r23, 0x01	; 1
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Delay>
			uart_sendstr("switch");
    2c50:	8e e0       	ldi	r24, 0x0E	; 14
    2c52:	92 e0       	ldi	r25, 0x02	; 2
    2c54:	0e 94 d7 06 	call	0xdae	; 0xdae <uart_sendstr>

			USART_INT_DIS();
    2c58:	0e 94 50 06 	call	0xca0	; 0xca0 <USART_INT_DIS>
    2c5c:	07 c0       	rjmp	.+14     	; 0x2c6c <Bluetooth_ISR+0x80>

		}else{
			USART_INT_EN();
    2c5e:	0e 94 42 06 	call	0xc84	; 0xc84 <USART_INT_EN>
    2c62:	04 c0       	rjmp	.+8      	; 0x2c6c <Bluetooth_ISR+0x80>
		}
		break;
	case '1':
		uart_sendstr("manual");
    2c64:	85 e1       	ldi	r24, 0x15	; 21
    2c66:	92 e0       	ldi	r25, 0x02	; 2
    2c68:	0e 94 d7 06 	call	0xdae	; 0xdae <uart_sendstr>

		break;
	}
}
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <HC05_init>:
void HC05_init(void)
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
	//USART_Init();
	uart_start();
    2c80:	0e 94 5e 06 	call	0xcbc	; 0xcbc <uart_start>
	int_setCallBack(Bluetooth_ISR);
    2c84:	86 ef       	ldi	r24, 0xF6	; 246
    2c86:	95 e1       	ldi	r25, 0x15	; 21
    2c88:	0e 94 1a 07 	call	0xe34	; 0xe34 <int_setCallBack>

}
    2c8c:	cf 91       	pop	r28
    2c8e:	df 91       	pop	r29
    2c90:	08 95       	ret

00002c92 <Bluetooth_Read>:
char Bluetooth_Read(void)
{
    2c92:	df 93       	push	r29
    2c94:	cf 93       	push	r28
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
	return USART_Receive();
    2c9a:	0e 94 0b 07 	call	0xe16	; 0xe16 <USART_Receive>
}
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	08 95       	ret

00002ca4 <Bluetooth_Write>:


void Bluetooth_Write(unsigned char data)
{
    2ca4:	df 93       	push	r29
    2ca6:	cf 93       	push	r28
    2ca8:	0f 92       	push	r0
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	89 83       	std	Y+1, r24	; 0x01
	//USART_Transmit(data);
	uart_sendint(data);
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <uart_sendint>
}
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <Bluetooth_Write_String>:

void Bluetooth_Write_String(char *str)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	0f 92       	push	r0
    2cc4:	0f 92       	push	r0
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	0b c0       	rjmp	.+22     	; 0x2ce6 <Bluetooth_Write_String+0x28>
  while(*str)
	{
		Bluetooth_Write(*(str++));
    2cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd4:	20 81       	ld	r18, Z
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cda:	01 96       	adiw	r24, 0x01	; 1
    2cdc:	9a 83       	std	Y+2, r25	; 0x02
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	82 2f       	mov	r24, r18
    2ce2:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Bluetooth_Write>
	uart_sendint(data);
}

void Bluetooth_Write_String(char *str)
{
  while(*str)
    2ce6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cea:	80 81       	ld	r24, Z
    2cec:	88 23       	and	r24, r24
    2cee:	81 f7       	brne	.-32     	; 0x2cd0 <Bluetooth_Write_String+0x12>
	{
		Bluetooth_Write(*(str++));
	}
}
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <MainApp>:

uint8_t system_state = '1';
uint8_t auto_state = 'S';


void MainApp(){
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	27 97       	sbiw	r28, 0x07	; 7
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
	sei();
    2d0e:	78 94       	sei
	HC05_init();
    2d10:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <HC05_init>
	motor_init();
    2d14:	0e 94 c8 14 	call	0x2990	; 0x2990 <motor_init>
	Servo_Init();
    2d18:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <Servo_Init>
	ADC_init();
    2d1c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <ADC_init>
	Voice_Sensor_Init();
    2d20:	0e 94 cf 13 	call	0x279e	; 0x279e <Voice_Sensor_Init>
	uint8_t key;
	while(1){
		//Bluetooth_Write(system_state);
		switch(system_state){
    2d24:	80 91 3a 03 	lds	r24, 0x033A
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	3f 83       	std	Y+7, r19	; 0x07
    2d2e:	2e 83       	std	Y+6, r18	; 0x06
    2d30:	8e 81       	ldd	r24, Y+6	; 0x06
    2d32:	9f 81       	ldd	r25, Y+7	; 0x07
    2d34:	80 33       	cpi	r24, 0x30	; 48
    2d36:	91 05       	cpc	r25, r1
    2d38:	31 f0       	breq	.+12     	; 0x2d46 <MainApp+0x4c>
    2d3a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d3c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d3e:	21 33       	cpi	r18, 0x31	; 49
    2d40:	31 05       	cpc	r19, r1
    2d42:	b9 f1       	breq	.+110    	; 0x2db2 <MainApp+0xb8>
    2d44:	ef cf       	rjmp	.-34     	; 0x2d24 <MainApp+0x2a>
		case '0': //auto
			//enable interrupt
			//standby();
//			while(auto_state == 'S');
			switch(auto_state){
    2d46:	80 91 3b 03 	lds	r24, 0x033B
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	3d 83       	std	Y+5, r19	; 0x05
    2d50:	2c 83       	std	Y+4, r18	; 0x04
    2d52:	8c 81       	ldd	r24, Y+4	; 0x04
    2d54:	9d 81       	ldd	r25, Y+5	; 0x05
    2d56:	8c 34       	cpi	r24, 0x4C	; 76
    2d58:	91 05       	cpc	r25, r1
    2d5a:	a1 f0       	breq	.+40     	; 0x2d84 <MainApp+0x8a>
    2d5c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d5e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d60:	22 35       	cpi	r18, 0x52	; 82
    2d62:	31 05       	cpc	r19, r1
    2d64:	51 f0       	breq	.+20     	; 0x2d7a <MainApp+0x80>
    2d66:	8c 81       	ldd	r24, Y+4	; 0x04
    2d68:	9d 81       	ldd	r25, Y+5	; 0x05
    2d6a:	86 34       	cpi	r24, 0x46	; 70
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	79 f4       	brne	.+30     	; 0x2d8e <MainApp+0x94>
			case 'F':
				motor_start(50, Forward);
    2d70:	82 e3       	ldi	r24, 0x32	; 50
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <motor_start>
    2d78:	0c c0       	rjmp	.+24     	; 0x2d92 <MainApp+0x98>
				break;
			case 'R':
				motor_start(50, Right);
    2d7a:	82 e3       	ldi	r24, 0x32	; 50
    2d7c:	63 e0       	ldi	r22, 0x03	; 3
    2d7e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <motor_start>
    2d82:	07 c0       	rjmp	.+14     	; 0x2d92 <MainApp+0x98>
				break;
			case 'L':
				motor_start(50, Left);
    2d84:	82 e3       	ldi	r24, 0x32	; 50
    2d86:	62 e0       	ldi	r22, 0x02	; 2
    2d88:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <motor_start>
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <MainApp+0x98>
				break;
			default:
				motor_stop();
    2d8e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <motor_stop>
				break;
			}
			Delay(500);
    2d92:	64 ef       	ldi	r22, 0xF4	; 244
    2d94:	71 e0       	ldi	r23, 0x01	; 1
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Delay>
			motor_stop();
    2d9e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <motor_stop>
			auto_state = 'S';
    2da2:	83 e5       	ldi	r24, 0x53	; 83
    2da4:	80 93 3b 03 	sts	0x033B, r24
			USART_INT_EN();
    2da8:	0e 94 42 06 	call	0xc84	; 0xc84 <USART_INT_EN>
			ADC_INT_EN();
    2dac:	0e 94 b8 12 	call	0x2570	; 0x2570 <ADC_INT_EN>
    2db0:	b9 cf       	rjmp	.-142    	; 0x2d24 <MainApp+0x2a>
			break;
		case '1': // manual
			USART_INT_DIS();
    2db2:	0e 94 50 06 	call	0xca0	; 0xca0 <USART_INT_DIS>
			 key = Bluetooth_Read();
    2db6:	0e 94 49 16 	call	0x2c92	; 0x2c92 <Bluetooth_Read>
    2dba:	89 83       	std	Y+1, r24	; 0x01
			 Bluetooth_Write(key);
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Bluetooth_Write>
			switch(key){
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	3b 83       	std	Y+3, r19	; 0x03
    2dca:	2a 83       	std	Y+2, r18	; 0x02
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd0:	84 33       	cpi	r24, 0x34	; 52
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <MainApp+0xde>
    2dd6:	47 c0       	rjmp	.+142    	; 0x2e66 <MainApp+0x16c>
    2dd8:	2a 81       	ldd	r18, Y+2	; 0x02
    2dda:	3b 81       	ldd	r19, Y+3	; 0x03
    2ddc:	25 33       	cpi	r18, 0x35	; 53
    2dde:	31 05       	cpc	r19, r1
    2de0:	dc f4       	brge	.+54     	; 0x2e18 <MainApp+0x11e>
    2de2:	8a 81       	ldd	r24, Y+2	; 0x02
    2de4:	9b 81       	ldd	r25, Y+3	; 0x03
    2de6:	81 33       	cpi	r24, 0x31	; 49
    2de8:	91 05       	cpc	r25, r1
    2dea:	81 f1       	breq	.+96     	; 0x2e4c <MainApp+0x152>
    2dec:	2a 81       	ldd	r18, Y+2	; 0x02
    2dee:	3b 81       	ldd	r19, Y+3	; 0x03
    2df0:	22 33       	cpi	r18, 0x32	; 50
    2df2:	31 05       	cpc	r19, r1
    2df4:	34 f4       	brge	.+12     	; 0x2e02 <MainApp+0x108>
    2df6:	8a 81       	ldd	r24, Y+2	; 0x02
    2df8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfa:	80 33       	cpi	r24, 0x30	; 48
    2dfc:	91 05       	cpc	r25, r1
    2dfe:	09 f1       	breq	.+66     	; 0x2e42 <MainApp+0x148>
    2e00:	91 cf       	rjmp	.-222    	; 0x2d24 <MainApp+0x2a>
    2e02:	2a 81       	ldd	r18, Y+2	; 0x02
    2e04:	3b 81       	ldd	r19, Y+3	; 0x03
    2e06:	22 33       	cpi	r18, 0x32	; 50
    2e08:	31 05       	cpc	r19, r1
    2e0a:	29 f1       	breq	.+74     	; 0x2e56 <MainApp+0x15c>
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e10:	83 33       	cpi	r24, 0x33	; 51
    2e12:	91 05       	cpc	r25, r1
    2e14:	29 f1       	breq	.+74     	; 0x2e60 <MainApp+0x166>
    2e16:	86 cf       	rjmp	.-244    	; 0x2d24 <MainApp+0x2a>
    2e18:	2a 81       	ldd	r18, Y+2	; 0x02
    2e1a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e1c:	26 33       	cpi	r18, 0x36	; 54
    2e1e:	31 05       	cpc	r19, r1
    2e20:	71 f1       	breq	.+92     	; 0x2e7e <MainApp+0x184>
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	9b 81       	ldd	r25, Y+3	; 0x03
    2e26:	86 33       	cpi	r24, 0x36	; 54
    2e28:	91 05       	cpc	r25, r1
    2e2a:	2c f1       	brlt	.+74     	; 0x2e76 <MainApp+0x17c>
    2e2c:	2a 81       	ldd	r18, Y+2	; 0x02
    2e2e:	3b 81       	ldd	r19, Y+3	; 0x03
    2e30:	27 33       	cpi	r18, 0x37	; 55
    2e32:	31 05       	cpc	r19, r1
    2e34:	41 f1       	breq	.+80     	; 0x2e86 <MainApp+0x18c>
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3a:	88 33       	cpi	r24, 0x38	; 56
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	39 f1       	breq	.+78     	; 0x2e8e <MainApp+0x194>
    2e40:	71 cf       	rjmp	.-286    	; 0x2d24 <MainApp+0x2a>
			case '0':
				motor_start(50, Forward);
    2e42:	82 e3       	ldi	r24, 0x32	; 50
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <motor_start>
    2e4a:	6c cf       	rjmp	.-296    	; 0x2d24 <MainApp+0x2a>
				break;
			case '1':
				motor_start(50, Right);
    2e4c:	82 e3       	ldi	r24, 0x32	; 50
    2e4e:	63 e0       	ldi	r22, 0x03	; 3
    2e50:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <motor_start>
    2e54:	67 cf       	rjmp	.-306    	; 0x2d24 <MainApp+0x2a>
				break;
			case '2':
				motor_start(50, Left);
    2e56:	82 e3       	ldi	r24, 0x32	; 50
    2e58:	62 e0       	ldi	r22, 0x02	; 2
    2e5a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <motor_start>
    2e5e:	62 cf       	rjmp	.-316    	; 0x2d24 <MainApp+0x2a>

				break;
			case '3':
				motor_stop();
    2e60:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <motor_stop>
    2e64:	5f cf       	rjmp	.-322    	; 0x2d24 <MainApp+0x2a>
				break;

			case '4'://switch to auto state
				//call fn to enable uart interrupt "will be done ISA :("
				system_state = '0';
    2e66:	80 e3       	ldi	r24, 0x30	; 48
    2e68:	80 93 3a 03 	sts	0x033A, r24
				USART_INT_EN();
    2e6c:	0e 94 42 06 	call	0xc84	; 0xc84 <USART_INT_EN>
				ADC_INT_EN();
    2e70:	0e 94 b8 12 	call	0x2570	; 0x2570 <ADC_INT_EN>
    2e74:	57 cf       	rjmp	.-338    	; 0x2d24 <MainApp+0x2a>
				break;
			//4 cases for servo
			case '5':
				Increase_angle(S1);
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	0e 94 34 14 	call	0x2868	; 0x2868 <Increase_angle>
    2e7c:	53 cf       	rjmp	.-346    	; 0x2d24 <MainApp+0x2a>
				break;
			case '6':
				Decrease_angle(S1);
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	0e 94 7e 14 	call	0x28fc	; 0x28fc <Decrease_angle>
    2e84:	4f cf       	rjmp	.-354    	; 0x2d24 <MainApp+0x2a>
				break;
			case '7':
				Increase_angle(S2);
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	0e 94 34 14 	call	0x2868	; 0x2868 <Increase_angle>
    2e8c:	4b cf       	rjmp	.-362    	; 0x2d24 <MainApp+0x2a>
				break;
			case '8':
				Decrease_angle(S2);
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	0e 94 7e 14 	call	0x28fc	; 0x28fc <Decrease_angle>
    2e94:	47 cf       	rjmp	.-370    	; 0x2d24 <MainApp+0x2a>

00002e96 <op>:
#include "../../HAL/LED/LED.h"
#include "../../MCAL/Timer/Timer2/Timer2_Interface.h"
#include "test_dio.h"


void op(){
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
	LED_ON();
    2e9e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <LED_ON>
}
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <test_dio>:

void test_dio(){
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	ff cf       	rjmp	.-2      	; 0x2eb0 <test_dio+0x8>

00002eb2 <Delay>:
#include "../../HAL/LED/LED.h"
#include "app1.h"
#include "../../MCAL/UART/uart.h"

void Delay(unsigned long counter)
{
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	28 97       	sbiw	r28, 0x08	; 8
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	6d 83       	std	Y+5, r22	; 0x05
    2ec8:	7e 83       	std	Y+6, r23	; 0x06
    2eca:	8f 83       	std	Y+7, r24	; 0x07
    2ecc:	98 87       	std	Y+8, r25	; 0x08
	unsigned long i = 0;
    2ece:	19 82       	std	Y+1, r1	; 0x01
    2ed0:	1a 82       	std	Y+2, r1	; 0x02
    2ed2:	1b 82       	std	Y+3, r1	; 0x03
    2ed4:	1c 82       	std	Y+4, r1	; 0x04

	for(i=0; i< counter; i++);
    2ed6:	19 82       	std	Y+1, r1	; 0x01
    2ed8:	1a 82       	std	Y+2, r1	; 0x02
    2eda:	1b 82       	std	Y+3, r1	; 0x03
    2edc:	1c 82       	std	Y+4, r1	; 0x04
    2ede:	0b c0       	rjmp	.+22     	; 0x2ef6 <Delay+0x44>
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ee6:	bc 81       	ldd	r27, Y+4	; 0x04
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	a1 1d       	adc	r26, r1
    2eec:	b1 1d       	adc	r27, r1
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	9a 83       	std	Y+2, r25	; 0x02
    2ef2:	ab 83       	std	Y+3, r26	; 0x03
    2ef4:	bc 83       	std	Y+4, r27	; 0x04
    2ef6:	29 81       	ldd	r18, Y+1	; 0x01
    2ef8:	3a 81       	ldd	r19, Y+2	; 0x02
    2efa:	4b 81       	ldd	r20, Y+3	; 0x03
    2efc:	5c 81       	ldd	r21, Y+4	; 0x04
    2efe:	8d 81       	ldd	r24, Y+5	; 0x05
    2f00:	9e 81       	ldd	r25, Y+6	; 0x06
    2f02:	af 81       	ldd	r26, Y+7	; 0x07
    2f04:	b8 85       	ldd	r27, Y+8	; 0x08
    2f06:	28 17       	cp	r18, r24
    2f08:	39 07       	cpc	r19, r25
    2f0a:	4a 07       	cpc	r20, r26
    2f0c:	5b 07       	cpc	r21, r27
    2f0e:	40 f3       	brcs	.-48     	; 0x2ee0 <Delay+0x2e>
}
    2f10:	28 96       	adiw	r28, 0x08	; 8
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	cd bf       	out	0x3d, r28	; 61
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	08 95       	ret

00002f22 <Test_Bluetooth>:

void Test_Bluetooth(void){
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	0f 92       	push	r0
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
	HC05_init();
    2f2c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <HC05_init>
	//uart_start();
	LED_Init();
    2f30:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LED_Init>
	unsigned char d = 'b';
    2f34:	82 e6       	ldi	r24, 0x62	; 98
    2f36:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		d= Bluetooth_Read();
    2f38:	0e 94 49 16 	call	0x2c92	; 0x2c92 <Bluetooth_Read>
    2f3c:	89 83       	std	Y+1, r24	; 0x01
		Delay(100);
    2f3e:	64 e6       	ldi	r22, 0x64	; 100
    2f40:	70 e0       	ldi	r23, 0x00	; 0
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Delay>
		Bluetooth_Write(d);
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Bluetooth_Write>

		if(d == 'o'){
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	8f 36       	cpi	r24, 0x6F	; 111
    2f54:	19 f4       	brne	.+6      	; 0x2f5c <Test_Bluetooth+0x3a>
			LED_ON();
    2f56:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <LED_ON>
    2f5a:	ee cf       	rjmp	.-36     	; 0x2f38 <Test_Bluetooth+0x16>
		}
		else{
			LED_OFF();
    2f5c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LED_OFF>
    2f60:	eb cf       	rjmp	.-42     	; 0x2f38 <Test_Bluetooth+0x16>

00002f62 <testadc>:
#include "../../MCAL/ADC/adc.h"
#include "../../HAL/LED/LED.h"
#include "../../HAL/Bluetooth/bluetooth.h"
#include <stdlib.h>

void testadc(){
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	2b 97       	sbiw	r28, 0x0b	; 11
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
	int sen1=0;
    2f76:	1e 82       	std	Y+6, r1	; 0x06
    2f78:	1d 82       	std	Y+5, r1	; 0x05
	int sen2=0, sen3=0;
    2f7a:	1c 82       	std	Y+4, r1	; 0x04
    2f7c:	1b 82       	std	Y+3, r1	; 0x03
    2f7e:	1a 82       	std	Y+2, r1	; 0x02
    2f80:	19 82       	std	Y+1, r1	; 0x01
	ADC_init();
    2f82:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <ADC_init>
	LED_Init();
    2f86:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LED_Init>
	HC05_init();
    2f8a:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <HC05_init>
	char String[5];
	while(1){
		ADC_readChannel(0);
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <ADC_readChannel>
		sen1 = ((uint32_t)g_adcResult*150*5)/(1023*1.5);
    2f94:	80 91 42 03 	lds	r24, 0x0342
    2f98:	90 91 43 03 	lds	r25, 0x0343
    2f9c:	cc 01       	movw	r24, r24
    2f9e:	a0 e0       	ldi	r26, 0x00	; 0
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	2e ee       	ldi	r18, 0xEE	; 238
    2fa4:	32 e0       	ldi	r19, 0x02	; 2
    2fa6:	40 e0       	ldi	r20, 0x00	; 0
    2fa8:	50 e0       	ldi	r21, 0x00	; 0
    2faa:	bc 01       	movw	r22, r24
    2fac:	cd 01       	movw	r24, r26
    2fae:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsi3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 9b 03 	call	0x736	; 0x736 <__floatunsisf>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 ed       	ldi	r19, 0xD0	; 208
    2fca:	4f eb       	ldi	r20, 0xBF	; 191
    2fcc:	54 e4       	ldi	r21, 0x44	; 68
    2fce:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__divsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 47 03 	call	0x68e	; 0x68e <__fixsfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	8d 83       	std	Y+5, r24	; 0x05
		itoa(sen1,String,10);	/* Integer to string conversion */
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	9e 01       	movw	r18, r28
    2fec:	29 5f       	subi	r18, 0xF9	; 249
    2fee:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff0:	b9 01       	movw	r22, r18
    2ff2:	4a e0       	ldi	r20, 0x0A	; 10
    2ff4:	50 e0       	ldi	r21, 0x00	; 0
    2ff6:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
		Bluetooth_Write_String(String);
    2ffa:	ce 01       	movw	r24, r28
    2ffc:	07 96       	adiw	r24, 0x07	; 7
    2ffe:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Bluetooth_Write_String>
		Bluetooth_Write('-');
    3002:	8d e2       	ldi	r24, 0x2D	; 45
    3004:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Bluetooth_Write>
		ADC_readChannel(1);
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <ADC_readChannel>
		sen2= ((uint32_t)g_adcResult*150*5)/(1023*1.5);
    300e:	80 91 42 03 	lds	r24, 0x0342
    3012:	90 91 43 03 	lds	r25, 0x0343
    3016:	cc 01       	movw	r24, r24
    3018:	a0 e0       	ldi	r26, 0x00	; 0
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	2e ee       	ldi	r18, 0xEE	; 238
    301e:	32 e0       	ldi	r19, 0x02	; 2
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	50 e0       	ldi	r21, 0x00	; 0
    3024:	bc 01       	movw	r22, r24
    3026:	cd 01       	movw	r24, r26
    3028:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsi3>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	bc 01       	movw	r22, r24
    3032:	cd 01       	movw	r24, r26
    3034:	0e 94 9b 03 	call	0x736	; 0x736 <__floatunsisf>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	bc 01       	movw	r22, r24
    303e:	cd 01       	movw	r24, r26
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 ed       	ldi	r19, 0xD0	; 208
    3044:	4f eb       	ldi	r20, 0xBF	; 191
    3046:	54 e4       	ldi	r21, 0x44	; 68
    3048:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__divsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 47 03 	call	0x68e	; 0x68e <__fixsfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	9c 83       	std	Y+4, r25	; 0x04
    305e:	8b 83       	std	Y+3, r24	; 0x03
		itoa(sen2,String,10);	/* Integer to string conversion */
    3060:	8b 81       	ldd	r24, Y+3	; 0x03
    3062:	9c 81       	ldd	r25, Y+4	; 0x04
    3064:	9e 01       	movw	r18, r28
    3066:	29 5f       	subi	r18, 0xF9	; 249
    3068:	3f 4f       	sbci	r19, 0xFF	; 255
    306a:	b9 01       	movw	r22, r18
    306c:	4a e0       	ldi	r20, 0x0A	; 10
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
		Bluetooth_Write_String(String);
    3074:	ce 01       	movw	r24, r28
    3076:	07 96       	adiw	r24, 0x07	; 7
    3078:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Bluetooth_Write_String>
		Bluetooth_Write('-');
    307c:	8d e2       	ldi	r24, 0x2D	; 45
    307e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Bluetooth_Write>
		ADC_readChannel(2);
    3082:	82 e0       	ldi	r24, 0x02	; 2
    3084:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <ADC_readChannel>
		sen3= ((uint32_t)g_adcResult*150*5)/(1023*1.5);
    3088:	80 91 42 03 	lds	r24, 0x0342
    308c:	90 91 43 03 	lds	r25, 0x0343
    3090:	cc 01       	movw	r24, r24
    3092:	a0 e0       	ldi	r26, 0x00	; 0
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	2e ee       	ldi	r18, 0xEE	; 238
    3098:	32 e0       	ldi	r19, 0x02	; 2
    309a:	40 e0       	ldi	r20, 0x00	; 0
    309c:	50 e0       	ldi	r21, 0x00	; 0
    309e:	bc 01       	movw	r22, r24
    30a0:	cd 01       	movw	r24, r26
    30a2:	0e 94 9c 18 	call	0x3138	; 0x3138 <__mulsi3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	bc 01       	movw	r22, r24
    30ac:	cd 01       	movw	r24, r26
    30ae:	0e 94 9b 03 	call	0x736	; 0x736 <__floatunsisf>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 ed       	ldi	r19, 0xD0	; 208
    30be:	4f eb       	ldi	r20, 0xBF	; 191
    30c0:	54 e4       	ldi	r21, 0x44	; 68
    30c2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__divsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	bc 01       	movw	r22, r24
    30cc:	cd 01       	movw	r24, r26
    30ce:	0e 94 47 03 	call	0x68e	; 0x68e <__fixsfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	89 83       	std	Y+1, r24	; 0x01
		itoa(sen3,String,10);	/* Integer to string conversion */
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	9a 81       	ldd	r25, Y+2	; 0x02
    30de:	9e 01       	movw	r18, r28
    30e0:	29 5f       	subi	r18, 0xF9	; 249
    30e2:	3f 4f       	sbci	r19, 0xFF	; 255
    30e4:	b9 01       	movw	r22, r18
    30e6:	4a e0       	ldi	r20, 0x0A	; 10
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
		Bluetooth_Write_String(String);
    30ee:	ce 01       	movw	r24, r28
    30f0:	07 96       	adiw	r24, 0x07	; 7
    30f2:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Bluetooth_Write_String>
		Bluetooth_Write('\r');
    30f6:	8d e0       	ldi	r24, 0x0D	; 13
    30f8:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Bluetooth_Write>
		if(sen1){
    30fc:	8d 81       	ldd	r24, Y+5	; 0x05
    30fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	19 f0       	breq	.+6      	; 0x310a <testadc+0x1a8>
			LED_ON();
    3104:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <LED_ON>
    3108:	02 c0       	rjmp	.+4      	; 0x310e <testadc+0x1ac>
		}else{
			LED_OFF();
    310a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LED_OFF>
		}
		if(sen2){
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	9c 81       	ldd	r25, Y+4	; 0x04
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	19 f0       	breq	.+6      	; 0x311c <testadc+0x1ba>
			LED2_ON();
    3116:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <LED2_ON>
    311a:	39 cf       	rjmp	.-398    	; 0x2f8e <testadc+0x2c>

		}else{
			LED2_OFF();
    311c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LED2_OFF>
    3120:	36 cf       	rjmp	.-404    	; 0x2f8e <testadc+0x2c>

00003122 <main>:
#include "HAL/Motor/motors.h"

//#include "MCAL/UART/uart.h"
//#include "ECUAL/LED/LED.h"

int main(){
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
	MainApp();
    312a:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <MainApp>
	//testadc();
	return  0;
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	90 e0       	ldi	r25, 0x00	; 0
}
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <__mulsi3>:
    3138:	62 9f       	mul	r22, r18
    313a:	d0 01       	movw	r26, r0
    313c:	73 9f       	mul	r23, r19
    313e:	f0 01       	movw	r30, r0
    3140:	82 9f       	mul	r24, r18
    3142:	e0 0d       	add	r30, r0
    3144:	f1 1d       	adc	r31, r1
    3146:	64 9f       	mul	r22, r20
    3148:	e0 0d       	add	r30, r0
    314a:	f1 1d       	adc	r31, r1
    314c:	92 9f       	mul	r25, r18
    314e:	f0 0d       	add	r31, r0
    3150:	83 9f       	mul	r24, r19
    3152:	f0 0d       	add	r31, r0
    3154:	74 9f       	mul	r23, r20
    3156:	f0 0d       	add	r31, r0
    3158:	65 9f       	mul	r22, r21
    315a:	f0 0d       	add	r31, r0
    315c:	99 27       	eor	r25, r25
    315e:	72 9f       	mul	r23, r18
    3160:	b0 0d       	add	r27, r0
    3162:	e1 1d       	adc	r30, r1
    3164:	f9 1f       	adc	r31, r25
    3166:	63 9f       	mul	r22, r19
    3168:	b0 0d       	add	r27, r0
    316a:	e1 1d       	adc	r30, r1
    316c:	f9 1f       	adc	r31, r25
    316e:	bd 01       	movw	r22, r26
    3170:	cf 01       	movw	r24, r30
    3172:	11 24       	eor	r1, r1
    3174:	08 95       	ret

00003176 <__prologue_saves__>:
    3176:	2f 92       	push	r2
    3178:	3f 92       	push	r3
    317a:	4f 92       	push	r4
    317c:	5f 92       	push	r5
    317e:	6f 92       	push	r6
    3180:	7f 92       	push	r7
    3182:	8f 92       	push	r8
    3184:	9f 92       	push	r9
    3186:	af 92       	push	r10
    3188:	bf 92       	push	r11
    318a:	cf 92       	push	r12
    318c:	df 92       	push	r13
    318e:	ef 92       	push	r14
    3190:	ff 92       	push	r15
    3192:	0f 93       	push	r16
    3194:	1f 93       	push	r17
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	ca 1b       	sub	r28, r26
    31a0:	db 0b       	sbc	r29, r27
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	19 94       	eijmp

000031ae <__epilogue_restores__>:
    31ae:	2a 88       	ldd	r2, Y+18	; 0x12
    31b0:	39 88       	ldd	r3, Y+17	; 0x11
    31b2:	48 88       	ldd	r4, Y+16	; 0x10
    31b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    31b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    31b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    31ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    31bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    31be:	aa 84       	ldd	r10, Y+10	; 0x0a
    31c0:	b9 84       	ldd	r11, Y+9	; 0x09
    31c2:	c8 84       	ldd	r12, Y+8	; 0x08
    31c4:	df 80       	ldd	r13, Y+7	; 0x07
    31c6:	ee 80       	ldd	r14, Y+6	; 0x06
    31c8:	fd 80       	ldd	r15, Y+5	; 0x05
    31ca:	0c 81       	ldd	r16, Y+4	; 0x04
    31cc:	1b 81       	ldd	r17, Y+3	; 0x03
    31ce:	aa 81       	ldd	r26, Y+2	; 0x02
    31d0:	b9 81       	ldd	r27, Y+1	; 0x01
    31d2:	ce 0f       	add	r28, r30
    31d4:	d1 1d       	adc	r29, r1
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    31e0:	ed 01       	movw	r28, r26
    31e2:	08 95       	ret

000031e4 <itoa>:
    31e4:	fb 01       	movw	r30, r22
    31e6:	9f 01       	movw	r18, r30
    31e8:	e8 94       	clt
    31ea:	42 30       	cpi	r20, 0x02	; 2
    31ec:	c4 f0       	brlt	.+48     	; 0x321e <itoa+0x3a>
    31ee:	45 32       	cpi	r20, 0x25	; 37
    31f0:	b4 f4       	brge	.+44     	; 0x321e <itoa+0x3a>
    31f2:	4a 30       	cpi	r20, 0x0A	; 10
    31f4:	29 f4       	brne	.+10     	; 0x3200 <itoa+0x1c>
    31f6:	97 fb       	bst	r25, 7
    31f8:	1e f4       	brtc	.+6      	; 0x3200 <itoa+0x1c>
    31fa:	90 95       	com	r25
    31fc:	81 95       	neg	r24
    31fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3200:	64 2f       	mov	r22, r20
    3202:	77 27       	eor	r23, r23
    3204:	0e 94 23 19 	call	0x3246	; 0x3246 <__udivmodhi4>
    3208:	80 5d       	subi	r24, 0xD0	; 208
    320a:	8a 33       	cpi	r24, 0x3A	; 58
    320c:	0c f0       	brlt	.+2      	; 0x3210 <itoa+0x2c>
    320e:	89 5d       	subi	r24, 0xD9	; 217
    3210:	81 93       	st	Z+, r24
    3212:	cb 01       	movw	r24, r22
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	a1 f7       	brne	.-24     	; 0x3200 <itoa+0x1c>
    3218:	16 f4       	brtc	.+4      	; 0x321e <itoa+0x3a>
    321a:	5d e2       	ldi	r21, 0x2D	; 45
    321c:	51 93       	st	Z+, r21
    321e:	10 82       	st	Z, r1
    3220:	c9 01       	movw	r24, r18
    3222:	0c 94 13 19 	jmp	0x3226	; 0x3226 <strrev>

00003226 <strrev>:
    3226:	dc 01       	movw	r26, r24
    3228:	fc 01       	movw	r30, r24
    322a:	67 2f       	mov	r22, r23
    322c:	71 91       	ld	r23, Z+
    322e:	77 23       	and	r23, r23
    3230:	e1 f7       	brne	.-8      	; 0x322a <strrev+0x4>
    3232:	32 97       	sbiw	r30, 0x02	; 2
    3234:	04 c0       	rjmp	.+8      	; 0x323e <strrev+0x18>
    3236:	7c 91       	ld	r23, X
    3238:	6d 93       	st	X+, r22
    323a:	70 83       	st	Z, r23
    323c:	62 91       	ld	r22, -Z
    323e:	ae 17       	cp	r26, r30
    3240:	bf 07       	cpc	r27, r31
    3242:	c8 f3       	brcs	.-14     	; 0x3236 <strrev+0x10>
    3244:	08 95       	ret

00003246 <__udivmodhi4>:
    3246:	aa 1b       	sub	r26, r26
    3248:	bb 1b       	sub	r27, r27
    324a:	51 e1       	ldi	r21, 0x11	; 17
    324c:	07 c0       	rjmp	.+14     	; 0x325c <__udivmodhi4_ep>

0000324e <__udivmodhi4_loop>:
    324e:	aa 1f       	adc	r26, r26
    3250:	bb 1f       	adc	r27, r27
    3252:	a6 17       	cp	r26, r22
    3254:	b7 07       	cpc	r27, r23
    3256:	10 f0       	brcs	.+4      	; 0x325c <__udivmodhi4_ep>
    3258:	a6 1b       	sub	r26, r22
    325a:	b7 0b       	sbc	r27, r23

0000325c <__udivmodhi4_ep>:
    325c:	88 1f       	adc	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	5a 95       	dec	r21
    3262:	a9 f7       	brne	.-22     	; 0x324e <__udivmodhi4_loop>
    3264:	80 95       	com	r24
    3266:	90 95       	com	r25
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	08 95       	ret

0000326e <_exit>:
    326e:	f8 94       	cli

00003270 <__stop_program>:
    3270:	ff cf       	rjmp	.-2      	; 0x3270 <__stop_program>
